<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gradle | Personal Interview Notes]]></title>
  <link href="http://tdongsi.github.io/java/blog/categories/gradle/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/java/"/>
  <updated>2019-07-05T22:27:10-07:00</updated>
  <id>http://tdongsi.github.io/java/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gradle Fundamentals: Part 3]]></title>
    <link href="http://tdongsi.github.io/java/blog/2018/08/11/gradle-fundamentals-part-3/"/>
    <updated>2018-08-11T03:04:31-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2018/08/11/gradle-fundamentals-part-3</id>
    <content type="html"><![CDATA[<p>This post corresponds to &ldquo;Basic Project Builds&rdquo; section of <a href="https://www.safaribooksonline.com/videos/gradle-fundamentals/9781491937266">this course</a>.</p>

<!--more-->


<h3>Basics</h3>

<p>Some tasks are simple.
Note that some tasks are derived from the following rules:</p>

<pre><code class="">$ gradle tasks
:tasks
...
Rules
-----
Pattern: clean&lt;TaskName&gt;: Cleans the output files of a task.
Pattern: build&lt;ConfigurationName&gt;: Assembles the artifacts of a configuration.
Pattern: upload&lt;ConfigurationName&gt;: Assembles and uploads the artifacts belonging to a configuration.
</code></pre>

<h3>Java Projects</h3>

<p>Output of <code>gradle build</code> for simple Java build file.</p>

<pre><code class="plain Java plugin">&gt; cat build.gradle
apply plugin: 'java'

# Same effect
$ cat build.gradle
apply(plugin: 'java')

&gt; gradle build
:compileJava NO-SOURCE
:processResources NO-SOURCE
:classes UP-TO-DATE
:jar
:assemble
:compileTestJava NO-SOURCE
:processTestResources NO-SOURCE
:testClasses UP-TO-DATE
:test NO-SOURCE
:check UP-TO-DATE
:build

BUILD SUCCESSFUL

Total time: 0.786 secs
</code></pre>

<p>Gradle&rsquo;s Build Init plugin is similar to Maven&rsquo;s <code>archetype</code> tasks.
It can be used to setup a Gradle project.</p>

<pre><code class="plain Build Init plugin">&gt; gradle init --type java-library
:wrapper
:init

BUILD SUCCESSFUL

Total time: 0.967 secs
&gt; ls
build           build.gradle    gradle          gradlew         gradlew.bat     settings.gradle src\

&gt; tree src
src
├── main
│   └── java
│       └── Library.java
└── test
    └── java
        └── LibraryTest.java

4 directories, 2 files

&gt; gradle build
:compileJava
Download https://jcenter.bintray.com/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.pom
Download https://jcenter.bintray.com/com/google/guava/guava/21.0/guava-21.0.pom
Download https://jcenter.bintray.com/com/google/guava/guava-parent/21.0/guava-parent-21.0.pom
Download https://jcenter.bintray.com/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar
Download https://jcenter.bintray.com/com/google/guava/guava/21.0/guava-21.0.jar
:processResources NO-SOURCE
:classes
:jar
:assemble
:compileTestJava
:processTestResources NO-SOURCE
:testClasses
:test
:check
:build

BUILD SUCCESSFUL

Total time: 6.218 secs

&gt; tree build
build
├── classes
│   ├── main
│   │   └── Library.class
│   └── test
│       └── LibraryTest.class
├── libs
│   └── workspace.jar
├── reports
│   └── tests
│       └── test
│           ├── classes
│           │   └── LibraryTest.html
│           ├── css
│           │   ├── base-style.css
│           │   └── style.css
│           ├── index.html
│           ├── js
│           │   └── report.js
│           └── packages
│               └── default-package.html
├── test-results
│   └── test
│       ├── TEST-LibraryTest.xml
│       └── binary
│           ├── output.bin
│           ├── output.bin.idx
│           └── results.bin
└── tmp
    ├── compileJava
    ├── compileTestJava
    └── jar
        └── MANIFEST.MF

18 directories, 14 files
</code></pre>

<h4>Project properties</h4>

<p>The command <code>gradle properties</code> will list all the pre-defined properties of the top Project instance.
Some of the interesting properties of the Project class are:</p>

<ul>
<li><code>assemble</code>, <code>check</code>, <code>jar</code>, etc.: corresponding to defined tasks.</li>
<li><code>version</code>, <code>sourceCompatibility</code>, <code>targetCompatibility</code>: commonly overridden properties.</li>
<li><code>ext</code>: Extra properties.</li>
</ul>


<pre><code class="plain Gradle project properties">&gt; gradle properties
:properties

------------------------------------------------------------
Root project
------------------------------------------------------------

allprojects: [root project 'workspace']
ant: org.gradle.api.internal.project.DefaultAntBuilder@42572e90
antBuilderFactory: org.gradle.api.internal.project.DefaultAntBuilderFactory@39495f8
archivesBaseName: workspace
...
version: unspecified

BUILD SUCCESSFUL

Total time: 0.779 secs
</code></pre>

<p>For example, the following <code>build.gradle</code> will overwrite some of the base properties:</p>

<pre><code>$ cat build.gradle
apply plugin: 'java'
version = '1.0'

&gt; gradle properties
:properties

------------------------------------------------------------
Root project
------------------------------------------------------------
...
version: 1.0

BUILD SUCCESSFUL

Total time: 0.715 secs
</code></pre>

<p>Reference:</p>

<ul>
<li><a href="https://docs.gradle.org/3.5/userguide/java_plugin.html">Java plugin</a></li>
<li><a href="https://docs.gradle.org/3.5/userguide/build_init_plugin.html">Build init plugin</a></li>
</ul>


<h3>Groovy Projects</h3>

<p>Examples:</p>

<ul>
<li><a href="https://github.com/gradle/gradle/blob/master/subprojects/docs/src/samples/groovy/quickstart/build.gradle">quickstart</a></li>
<li><a href="https://github.com/gradle/gradle/blob/master/subprojects/docs/src/samples/groovy/mixedJavaAndGroovy/build.gradle">mixedJavaAndGroovy</a></li>
<li><a href="https://github.com/gradle/gradle/blob/master/subprojects/docs/src/samples/groovy/customizedLayout/build.gradle">customizedLayout</a></li>
</ul>


<p>Reference:</p>

<ul>
<li><a href="https://docs.gradle.org/3.5/userguide/groovy_plugin.html">Groovy plugin</a></li>
<li><a href="https://github.com/gradle/gradle/tree/v3.5.1/subprojects/docs/src/samples/groovy">Groovy Examples</a></li>
</ul>


<h3>DAG and Source Sets</h3>

<p>DAGs mentioned are the dependency graphs of tasks defined in Gradle Java and Groovy plugins.
For example, the tasks <code>check</code> and <code>assemble</code> must be executed before <code>build</code> task, as shown in <a href="https://docs.gradle.org/3.5/userguide/java_plugin.html">here</a>.</p>

<p>Source Sets are Gradle way to organize related source code and resources.
Using source sets can also enable you to customize your project layout (e.g., Jenkins global library project).</p>

<h3>Project Properties and Dependencies</h3>

<p>Each <code>build.gradle</code> file is used to instantiate a <code>Project</code> object.
During its life cycle, that object will try to create a <code>Settings</code> instance for the build.
It will evaluate <code>settings.gradle</code> script to configure that <code>Settings</code> object (more about its life cycle at <a href="https://docs.gradle.org/3.5/dsl/org.gradle.api.Project.html">here</a>).</p>

<p>The documentation page has a list of default properties of <code>Project</code> class.
It should be noted that adding a plugin can add additional properties to <code>Project</code> class, as shown in the same page.
For example, <code>idea</code> plugin will add <code>idea</code> property for &ldquo;IdeaModel&rdquo;.</p>

<pre><code class="groovy Different way to specify dependencies">dependencies {
    runtime group: 'org.springframework', name: 'spring-core', version: '2.5'
    runtime 'org.springframework:spring-core:2.5',
            'org.springframework:spring-aop:2.5'
    runtime(
        [group: 'org.springframework', name: 'spring-core', version: '2.5'],
        [group: 'org.springframework', name: 'spring-aop', version: '2.5']
    )
    runtime('org.hibernate:hibernate:3.0.5') {
        transitive = true
    }
    runtime group: 'org.hibernate', name: 'hibernate', version: '3.0.5', transitive: true
    runtime(group: 'org.hibernate', name: 'hibernate', version: '3.0.5') {
        transitive = true
    }
}
</code></pre>

<pre><code class="groovy Artifact only notation">dependencies {
    runtime "org.groovy:groovy:2.2.0@jar"
    runtime group: 'org.groovy', name: 'groovy', version: '2.2.0', ext: 'jar'
}
</code></pre>

<p>Check depdendencies with Gradle:</p>

<pre><code class="plain Gradle automatically expands "dep" for "dependencies" task">&gt; gradle dep
:dependencies

------------------------------------------------------------
Root project
------------------------------------------------------------

api - API dependencies for source set 'main'. (n)
\--- org.apache.commons:commons-math3:3.6.1 (n)

apiElements - API elements for main. (n)
No dependencies

archives - Configuration for archive artifacts.
No dependencies

compile - Dependencies for source set 'main' (deprecated, use 'implementation ' instead).
No dependencies

compileClasspath - Compile classpath for source set 'main'.
+--- org.apache.commons:commons-math3:3.6.1
\--- com.google.guava:guava:21.0

compileOnly - Compile only dependencies for source set 'main'.
No dependencies

default - Configuration for default artifacts.
+--- org.apache.commons:commons-math3:3.6.1
\--- com.google.guava:guava:21.0

implementation - Implementation only dependencies for source set 'main'. (n)
\--- com.google.guava:guava:21.0 (n)

runtime - Runtime dependencies for source set 'main' (deprecated, use 'runtimeOnly ' instead).
No dependencies

runtimeClasspath - Runtime classpath of source set 'main'.
+--- org.apache.commons:commons-math3:3.6.1
\--- com.google.guava:guava:21.0

runtimeElements - Elements of runtime for main. (n)
No dependencies

runtimeOnly - Runtime only dependencies for source set 'main'. (n)
No dependencies

testCompile - Dependencies for source set 'test' (deprecated, use 'testImplementation ' instead).
No dependencies

testCompileClasspath - Compile classpath for source set 'test'.
+--- org.apache.commons:commons-math3:3.6.1
+--- com.google.guava:guava:21.0
\--- junit:junit:4.12
     \--- org.hamcrest:hamcrest-core:1.3

testCompileOnly - Compile only dependencies for source set 'test'.
No dependencies

testImplementation - Implementation only dependencies for source set 'test'. (n)
\--- junit:junit:4.12 (n)

testRuntime - Runtime dependencies for source set 'test' (deprecated, use 'testRuntimeOnly ' instead).
No dependencies

testRuntimeClasspath - Runtime classpath of source set 'test'.
+--- org.apache.commons:commons-math3:3.6.1
+--- com.google.guava:guava:21.0
\--- junit:junit:4.12
     \--- org.hamcrest:hamcrest-core:1.3

testRuntimeOnly - Runtime only dependencies for source set 'test'. (n)
No dependencies

(n) - Not resolved (configuration is not meant to be resolved)

BUILD SUCCESSFUL

Total time: 0.72 secs
</code></pre>

<p>Reference:</p>

<ul>
<li><a href="https://docs.gradle.org/3.5/dsl/org.gradle.api.Project.html">Project</a></li>
<li><a href="https://docs.gradle.org/current/userguide/introduction_dependency_management.html">Dependency Management</a></li>
<li><a href="https://docs.gradle.org/current/userguide/dependency_types.html">Dependency types</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle Fundamentals: Part 2]]></title>
    <link href="http://tdongsi.github.io/java/blog/2018/08/11/gradle-fundamentals-part-2/"/>
    <updated>2018-08-11T03:03:46-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2018/08/11/gradle-fundamentals-part-2</id>
    <content type="html"><![CDATA[<p>This post corresponds to &ldquo;Enough Groovy to Get By&rdquo; section of <a href="https://www.safaribooksonline.com/videos/gradle-fundamentals/9781491937266">this course</a>.</p>

<!--more-->


<h3>Static vs Dynamic Typing</h3>

<p><a href="https://github.com/tdongsi/groovy/blob/develop/learn/src/my/safari/groovy/basic/Hello.groovy">Code</a>.</p>

<h3>POGOs</h3>

<p><a href="https://github.com/tdongsi/groovy/blob/develop/learn/src/my/safari/groovy/basic/Pogo.groovy">Code</a>.</p>

<p><code>@Canonical</code> is equivalent to the following <code>@ToString</code>, <code>@EqualsAndHashCode</code>, and <code>@TupleConstructor</code> combined.</p>

<h3>Collections and Closures</h3>

<ul>
<li><a href="https://github.com/tdongsi/groovy/blob/develop/learn/src/my/safari/groovy/basic/Collection.groovy">Collection</a>.</li>
<li><a href="https://github.com/tdongsi/groovy/blob/develop/learn/src/my/safari/groovy/basic/Closures.groovy">Closure</a>.</li>
</ul>


<h3>Google Geocoder sample</h3>

<p><a href="https://github.com/tdongsi/groovy/blob/develop/learn/src/my/safari/groovy/basic/Geocode.groovy">Code</a>.</p>

<pre><code class="groovy Geocoding example">String XML_BASE = 'https://maps.googleapis.com/maps/api/geocode/xml?'
List address = ['2700 Coast Ave', 'Mountain View', 'CA']

String encoded = address.collect {
    URLEncoder.encode(it, 'UTF-8')
}.join(',')

String queryString = "address=$encoded"
String url = "$XML_BASE$queryString"
// println url.toURL().text

def root = new XmlSlurper().parse(url)
def loc = root.result[0].geometry.location // Navigate DOM using dot
println "Coordinates: ${loc.lat}, ${loc.lng}"
</code></pre>

<pre><code class="groovy ICNDB example">import groovy.json.JsonSlurper

String JSON_BASE = 'http://api.icndb.com/jokes/random?'
// Only the POTUS can claim such hyperbole.
def params = [limitTo:'[nerdy]', firstName: 'Donald', lastName: 'Trump']
def qs = params.collect {k,v -&gt; "$k=$v"}.join('&amp;')
String jsonTxt = "$JSON_BASE$qs".toURL().text
// println jsonTxt
def json = new JsonSlurper().parseText(jsonTxt)
println json.value.joke

// Demo
String HOMEPAGE = 'http://oreilly.com'
println HOMEPAGE.toURL().text.readLines() *. size()
// println HOMEPAGE.toURL().text
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle Fundamentals: Part 1]]></title>
    <link href="http://tdongsi.github.io/java/blog/2018/08/11/gradle-fundamentals-part-1/"/>
    <updated>2018-08-11T02:58:33-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2018/08/11/gradle-fundamentals-part-1</id>
    <content type="html"><![CDATA[<p>This post corresponds to &ldquo;Introduction&rdquo; section of <a href="https://www.safaribooksonline.com/videos/gradle-fundamentals/9781491937266">this course</a>.</p>

<!--more-->


<h3>Quick facts</h3>

<p>The course is recorded in July 2015, when the latest Gradle version is <code>2.4</code>.
The examples are in Gradle <code>2.4</code>.</p>

<h3>Installation and Configuration</h3>

<p>Installing using <code>sdkman</code> (formerly GVM) is recommended.
For example, on macOS, you might not be able to specify version using <code>homebrew</code>.</p>

<pre><code class="plain">&gt; sdk install gradle 3.5.1
&gt; sdk use gradle 3.5.1
&gt; sdk list gradle
================================================================================
Available Gradle Versions
================================================================================
     4.10-rc-1           4.0.1               2.10                1.8
     4.9                 4.0                 2.9                 1.7
     4.8.1           &gt; * 3.5.1               2.8                 1.6
     4.8                 3.5                 2.7                 1.5
     4.7                 3.4.1               2.6                 1.4
     4.6                 3.4                 2.5                 1.3
     4.5.1               3.3                 2.4                 1.2
     4.5                 3.2.1               2.3                 1.1
     4.4.1               3.2                 2.2.1               1.0
     4.4                 3.1                 2.2                 0.9.2
     4.3.1               3.0                 2.1                 0.9.1
     4.3                 2.14.1              2.0                 0.9
     4.2.1               2.14                1.12                0.8
     4.2                 2.13                1.11                0.7
     4.1                 2.12                1.10
     4.0.2               2.11                1.9

================================================================================
+ - local version
* - installed
&gt; - currently in use
================================================================================

&gt; gradle -version

------------------------------------------------------------
Gradle 3.5.1
------------------------------------------------------------

Build time:   2017-06-16 14:36:27 UTC
Revision:     d4c3bb4eac74bd0a3c70a0d213709e484193e251

Groovy:       2.4.10
Ant:          Apache Ant(TM) version 1.9.6 compiled on June 29 2015
JVM:          1.8.0_172 (Oracle Corporation 25.172-b11)
OS:           Mac OS X 10.13.6 x86_64
</code></pre>

<h3>Documentation</h3>

<p>Important docs:</p>

<ul>
<li><a href="https://gradle.org/guides/">User Guide</a></li>
<li><a href="https://docs.gradle.org/current/dsl/">DSL reference</a></li>
</ul>


<pre><code class="groovy Example Hello World build.gradle">// Not overriding any internal property
ext.person = 'Dobby'

task hello {
    doLast {
        println "Hello, $person!"
    }
}

task hi(dependsOn: 'hello') &lt;&lt; {
    println 'Hello, World!'
}
</code></pre>

<pre><code class="plain">&gt; gradle tasks --all
:tasks

------------------------------------------------------------
All tasks runnable from root project
------------------------------------------------------------

Build Setup tasks
-----------------
init - Initializes a new Gradle build.
wrapper - Generates Gradle wrapper files.

Help tasks
----------
buildEnvironment - Displays all buildscript dependencies declared in root project 'workspace'.
components - Displays the components produced by root project 'workspace'. [incubating]
dependencies - Displays all dependencies declared in root project 'workspace'.
dependencyInsight - Displays the insight into a specific dependency in root project 'workspace'.
dependentComponents - Displays the dependent components of components in root project 'workspace'. [incubating]
help - Displays a help message.
model - Displays the configuration model of root project 'workspace'. [incubating]
projects - Displays the sub-projects of root project 'workspace'.
properties - Displays the properties of root project 'workspace'.
tasks - Displays the tasks runnable from root project 'workspace'.

Other tasks
-----------
hello
hi

BUILD SUCCESSFUL

Total time: 0.691 secs
</code></pre>

<pre><code class="plain">&gt; gradle hi
The Task.leftShift(Closure) method has been deprecated and is scheduled to be removed in Gradle 5.0. Please use Task.doLast(Action) instead.
        at build_6vy9edw0bhsp70x0atckfxbnz.run(/Users/tuecuong/dev/hub/java/docs/source/workspace/build.gradle:7)
:hello
Hello, Dobby!
:hi
Hello, World!

BUILD SUCCESSFUL

Total time: 0.688 secs
</code></pre>

<p>Left-shift operator <code>&lt;&lt;</code> is the alias to the <code>doLast</code> command.
Using <code>doLast</code> is preferrable since you can do more (e.g., setup, configuration) as opposed to actions only in <code>&lt;&lt;</code> clauses.</p>

<h3>Sample Build Files</h3>

<p>In version 3+, the guides and samples are not included in the Gradle installation.
Instead, you can find it on</p>

<ul>
<li><a href="https://github.com/gradle/gradle/tree/master/subprojects/docs/src/samples">Samples as shown in video</a>

<ul>
<li><code>userguide</code> folder > <code>tutorial</code> folder > sample build.gradle files.</li>
<li>Example: <a href="https://github.com/gradle/gradle/blob/master/subprojects/docs/src/samples/userguide/tutorial/helloEnhanced/build.gradle">helloEnhanced</a>.</li>
</ul>
</li>
<li><a href="https://github.com/gradle/guides">Guide repo</a> which directs to the Github Org</li>
<li><a href="https://github.com/gradle-guides">gradle-guides Github org</a></li>
</ul>


<h3>Where to Find Answers</h3>

<ul>
<li><a href="https://blog.gradle.org/">Blog</a></li>
<li><a href="https://discuss.gradle.org/">Forum</a></li>
<li>Stackoverflow</li>
<li><a href="https://gradle.org/books/">Book</a>

<ul>
<li>Gradle in Action</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle Cookbook]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/05/11/gradle-cookbook/"/>
    <updated>2017-05-11T10:20:39-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/05/11/gradle-cookbook</id>
    <content type="html"><![CDATA[<p>This post goes over simple (but beyond the very basic) recipes for getting started with Gradle.</p>

<!--more-->


<h3>Basic tasks</h3>

<pre><code class="plain ">./gradlew dependencies

# Subproject
./gradlew :subprojectName:dependencies

# Configuration
./gradlew dependencies --configuration testCompile
</code></pre>

<p>In the second command based on <a href="http://stackoverflow.com/questions/27763472/how-to-check-dependency-list-at-runtime-gradle">this example</a>, the root project might not have dependencies and you want to list dependencies on one of the subprojects.</p>

<p>In the third command based on <a href="https://discuss.gradle.org/t/how-to-find-which-dependency-is-fetching-a-certain-jar/7319/10">this example</a>, you want to see which task will fetch a certain JAR (e.g., velocity).</p>

<h3>Sample <code>build.gradle</code> file</h3>

<p>Most of the tutorials show a very simplistic <code>build.gradle</code> file to illustrate the basics.
However, starting from those simple build files will often lead to frequent major changes, coming from frequent Google and StackOverflow searches for how to do something (e.g., Nexus authentication).
This section shows how a <code>build.gradle</code> file looks like for a medium-size team working in industry.</p>

<pre><code class="groovy Sample build file">buildscript {
    repositories {
        maven {
            credentials {
                username nexusUsername
                password nexusPassword
            }
            url { nexusPublic }
        }
    }
    dependencies {
        classpath 'com.h2database:h2:1.3.170'
        classpath 'org.postgresql:postgresql:9.4-1201-jdbc41'
        classpath 'com.example.plugins:some-gradle-plugin:1.1.6'
    }
}

apply plugin: 'com.example.plugins'

subprojects {
    repositories {
        maven {
            credentials {
                username nexusUsername
                password nexusPassword
            }
            url { nexusPublic }
        }
    }

    apply plugin: 'groovy'

    group = 'com.example.app'

    dependencies {
        // Core
        compile ('org.apache.kafka:kafka_2.11:0.8.2.0') {
            exclude module: 'jms'
            exclude module: 'jmxtools'
            exclude module: 'jmxri'
            exclude group: 'org.slf4j'
            exclude module: 'junit'
        }

        compile 'com.amazonaws:aws-java-sdk:1.9.24'
        compile 'io.swagger:swagger-core:1.5.10'

        /*
         * junit is excluded in multiple places, because org.apache.cassandra.cassandra-all:2.1.9
         * includes JUnit 4.8.1 as a compile dependency, and our test framework needing 4.12
         */
        // Support
        compile ("org.apache.cassandra.cassandra-all:2.1.9") {
            exclude module: 'junit'
        }
        compile ("com.example.app:common:${commons_version}") {
            exclude module: 'junit'
        }
        compile "org.flywaydb:flyway-core:3.2.1"
        testCompile 'org.hsqldb:hsqldb:2.3.2'
        compile 'com.google.code.findbugs:findbugs:3.0.1'
    }

    // CassandraSetupTest-based tests fail for newer versions of Guava.
    configurations.all {
        resolutionStrategy {
            force 'com.google.guava:guava:18.0'
        }
    }
}

jacocoCoverage.limits =  [
    'instruction': 40,
    'line'       : 48,
    'complexity' : 30,
    'method'     : 55,
    'class'      : 70
]

project(':server') {
    mainClassName = 'com.example.app.ApiApplication'
    dependencies {
        compile 'com.exacttarget:partner-api:1.0.3'

        testCompile 'com.squareup.okhttp3:mockwebserver:3.2.0'
        testCompile 'org.apache.lucene:lucene-test-framework:5.3.1'
    }

    test {
        exclude '**/SomeClass.class'
        exclude '**/*IntegrationTest.*'
        exclude '**/schema/model/*MoreWildcard.class'
    }

    // generateSwagger is not a Test but depends on the testing framework
    task generateSwagger(type: Test, dependsOn: testClasses) {
        include '**/util/SwaggerFileGenerator.class'
        String swaggerPath = 'build/swagger-test.yaml'

        // Not considered "UP-TO-DATE" if the output file does not exist
        outputs.upToDateWhen {
            file('server/' + swaggerPath).exists()
        }
        systemProperty 'test.swagger.outfile', file(swaggerPath)
        doLast {
            println "\n\nSwagger documentation can be found in api/server/${swaggerPath}\n\n"
        }
    }


    checkstyle {
        checkstyleMain.exclude '**/db/migration/*.java' // Exclude flywaydb migrations: they violate type name checks
    }

    jacocoCoverage.limits =  [
        'instruction': 40,
        'line'       : 48,
        'complexity' : 30,
        'method'     : 55,
        'class'      : 70
    ]

}
</code></pre>

<h4>Maven/Nexus authentication</h4>

<p>In Gradle, Nexus authentication can be specified in both <code>build.gradle</code> and <code>gradle.properties</code> file, where <code>build.gradle</code> should be checked into VCS (e.g., git) while <code>gradle.properties</code> contains sensitive credentials information.</p>

<pre><code class="groovy Example build.gradle">    repositories {
        maven {
            credentials {
                username nexusUsername
                password nexusPassword
            }
            url { nexusPublic }
        }
    }
</code></pre>

<pre><code class="properties Example gradle.properties">nexusUsername=myUsername
nexusPassword=password123
nexusPublic=https://nexus.example.com/nexus/content/groups/public/
</code></pre>

<p>In Jenkins, to securely passing Nexus credentials, <code>properties</code> file is not recommended.
Instead, use <code>withCredentials</code> for passing credentials as shown in <a href="http://tdongsi.github.io/blog/2017/05/20/gradle-settings-in-jenkinsfile/">this blog post</a>.</p>

<h4><code>buildscript</code> block</h4>

<p>From <a href="https://discuss.gradle.org/t/what-is-difference-between-buildscript-classpath-and-dependencies-compile/4290/2">here</a>,
the <code>buildscript</code> block only controls dependencies for the buildscript process itself, not for the application code, which the top-level <code>dependencies</code> block controls.
For instance, you could define dependencies in &ldquo;buildscript/classpath&rdquo; that represent Gradle plugins used in the build process.
Those plugins would not be referenced as dependencies for the application code.
Read the Gradle User Guide for more information (the PDF is easy to search).</p>

<h4>Proxy</h4>

<p>Use <code>http.proxyHost</code> and <code>https.proxyHost</code> accordingly for setting up proxy.</p>

<pre><code class="groovy Example HTTP proxy in Jenkinsfile">            echo "Running with proxy ${env.https_proxy} and ${env.http_proxy}"
            PROXY_OPTIONS = '-Dhttps.proxyHost=public0-proxy1.data.example.net -Dhttps.proxyPort=8080'
            sh "./gradlew ${PROXY_OPTIONS} run --stacktrace --info"
</code></pre>
]]></content>
  </entry>
  
</feed>
