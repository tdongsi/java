<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Personal Interview Notes]]></title>
  <link href="http://tdongsi.github.io/java/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/java/"/>
  <updated>2017-12-22T00:13:08-08:00</updated>
  <id>http://tdongsi.github.io/java/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java 9]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/12/06/java-9/"/>
    <updated>2017-12-06T12:11:16-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/12/06/java-9</id>
    <content type="html"><![CDATA[<p>JDK 9 was released in September and includes many changes to the Java platform.
The biggest is the Java Platform Module System (often referred to as Project Jigsaw).</p>

<!--more-->


<p>This new JPMS breaks up the existing rt.jar file into 97 modules (28 of them are SE) but also encapsulates internal APIs, such as sun.misc.Unsafe that have previously been available to developers.
This note summarizes some intersting points from a guest speaker about the new JDK 9 and other intersting changes in Java Community.</p>

<h3>JDK 9 Features</h3>

<p>Java Platform Module System</p>

<ul>
<li>Initially, leave everything on the classpath.</li>
<li>Anything on the classpath is in the unamed module

<ul>
<li>All packages are exported</li>
<li>The unamed module depends on all modules</li>
</ul>
</li>
<li>Migrate to modules as required</li>
</ul>


<p><code>--illegal-access</code> option is the Kill Switch to turn off encapsulation:</p>

<ul>
<li>permit: Warning for first use of an encapsulated API</li>
<li>warn: Warning for every use</li>
<li>debug: Warning and stack trace for every use</li>
<li>deny: No access.</li>
</ul>


<p><code>--add-exports</code> option allows direct access to encapsulated APIs.
<code>--add-opens</code> option allows reflective access to encapulated APIs.</p>

<p><code>jlink</code>: The Java Linker (JEP 282).
The implication of <code>jlink</code> is that the slogan &ldquo;Write once, run anywhere&rdquo; might not be true anymore.
<code>jlink</code> generated runtime may not include all Java SE modules.
It is still a conformant Java implementation.</p>

<h3>Java Development Changes</h3>

<p>OpenJDK have a new release model: more agile, every six months.
Features are included when ready instead of targeted for specific release when started.</p>

<p>JDK Version Numbering: new scheme introduced (JEP 223).</p>

<ul>
<li>JDK MAJOR.MINOR.SECURITY</li>
<li>Semantic versioning</li>
</ul>


<p>However, there is a new scheme proposed in JEP 322: FEATURE.INTERIM.UPDATE.PATCH.</p>

<p>Availability of JDK updates: Oracle is switching to LTS model.</p>

<ul>
<li>JDK 8 is a LTS release.

<ul>
<li>It will have updates for more than 3 years.</li>
</ul>
</li>
<li>JDK 9 is a feature release.

<ul>
<li>Public updates are only available until next feature release.</li>
</ul>
</li>
</ul>


<h3>Deprecated features in JDK 9</h3>

<ul>
<li>Applets as a deployment mechanism</li>
<li>CMS garbage collector</li>
<li>Java policy tool, jconsole, Doclet API</li>
<li>No more 32-bit Oracle JDK binaries. No more ARM binaries.

<ul>
<li>Only Mac, Windows, Linux, SPARC supported. All 64-bit.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Common Interview Questions]]></title>
    <link href="http://tdongsi.github.io/java/blog/2016/09/09/common-interview-questions/"/>
    <updated>2016-09-09T00:50:08-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2016/09/09/common-interview-questions</id>
    <content type="html"><![CDATA[<p>Common interview questions that are specific to Java language.</p>

<!--more-->


<h3>Trivia Questions</h3>

<p>The full list is <a href="http://javarevisited.blogspot.sg/2015/10/133-java-interview-questions-answers-from-last-5-years.html">here</a>.</p>

<ol>
<li>Why constructors dont return any value. What problem did Java face in returning a value from Constructors?

<ul>
<li>So the reason the constructor doesn&rsquo;t return a value is because it&rsquo;s not called directly by your code, it&rsquo;s called by the memory allocation and object initialization code in the runtime.
Its return value (if it actually has one when compiled down to machine code) is opaque to the user - therefore, you can&rsquo;t specify it.</li>
</ul>
</li>
<li>Difference between abstract class and interface?

<ul>
<li>The question is lame. However, it comes up so often that you have to get ready for it.
Failing to give the expected answer can make you fail in the phone screen.</li>
<li>Answer <a href="http://javarevisited.blogspot.com/2013/05/difference-between-abstract-class-vs-interface-java-when-prefer-over-design-oops.html">here</a>.</li>
</ul>
</li>
<li>What is string immutable? What is intern() method on String?</li>
<li>What is the difference between StringBuilder vs. StringBuffer? Vector and ArrayList?</li>
<li>Generics: is there any way to get the generic type in your program? (Answer: no due to type erasure)</li>
<li>Design pattern: what do you know? Which one do you use most? In what situation?</li>
<li>What is the <code>finalize()</code> method?

<ul>
<li>Finalizers are unpredictable, often dangerous, and generally unnecessary.
Only use it when you need a safety-net, a reminder to call explicit termination method OR you work with native methods and objects.</li>
</ul>
</li>
</ol>


<p>Java:</p>

<ul>
<li>Methods of Object class (relation between hashCode() and equals(), give a simple algorithm to do hashCode(), when to use finalize()). See chapter in Effective Java (see wiki)

<ul>
<li>equals() compare the hash code that is generated by hashCode(), usually different for different instances. If the two different objects, such as String, have equals() as true, the equals() function must be overridden.</li>
<li>Simple hashCode: use the time of creation.</li>
</ul>
</li>
<li>Collections framework (when to use Map, List, Set; implementations of those). See wiki</li>
<li>Some details about frequently used classes: String class (e.g., what intern() method does), StringBuilder vs. StringBuffer</li>
<li>Java I/O: using Scanner, printf, InputStream</li>
<li>Java generics: erasure, Java generics vs. C++ template</li>
<li>It&rsquo;s very impressive if you know about Java concurrency: e.g., what is volatile? when to use it? synchronize?</li>
</ul>


<p>20) From this book, which methods are invoked? Classes are extended as Dessert &lt;- Cake &lt;- ChocolateCake, and Dessert &lt;- Scone &lt;- ButteredScone.</p>

<pre><code class="java">// Overloaded method forms
void more( Dessert d, Scone s ) { }
void more( Cake c, Dessert d ) { }
void more( Chocolatecake cc, Scone s ) { }
void more( Dessert... desserts ) { }

// Method invocations
more( dessertRef, sconeRef ) { }
more( chocolateCakeRef, dessertRef ) { }
more( chocolateCakeRef, butteredSconeRef ) { }
more( cakeRef, sconeRef ) { }
more( sconeRef, cakeRef ) { }
</code></pre>

<h3>Singleton question</h3>

<p>This question seems to be common because it shows that if a candidate knows &ldquo;design pattern&rdquo;, best practices, concurrency, and enum (one of newer Java features).</p>

<p>TODO: Enum</p>

<p>TODO: Standard singleton with lazy initlaization and private constructor.</p>

<p>TODO: Is it thread-safe?</p>

<p>TODO: How to make it thread-safe?</p>

<p>TODO: How to make it more performant?</p>

<p>Double-checked locking idiom for Singleton.
<a href="http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html">http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</a></p>

<pre><code class="java Double-checked locking idiom">// Works with acquire/release semantics for volatile
// Broken under current semantics for volatile
  class Foo {
        private volatile Helper helper = null;
        public Helper getHelper() {
            if (helper == null) {
                synchronized(this) {
                    if (helper == null)
                        helper = new Helper();
                }
            }
            return helper;
        }
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Quick-start for Java Programming Test]]></title>
    <link href="http://tdongsi.github.io/java/blog/2016/08/29/tutorial-timed-programming-test/"/>
    <updated>2016-08-29T01:38:40-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2016/08/29/tutorial-timed-programming-test</id>
    <content type="html"><![CDATA[<p>For <strong>timed</strong> programming tests, new test-takers usually underestimate how short two and a half hours can be.
Remember that 30 minutes of that will go into reading the problem instructions and another 10 to 30 minutes go into setting up before you can start writing the first line of code.
And if you are unlucky, you need another 15-30 minutes to debug any issue that comes up.
That leaves you only about one hour for actually solving the problem.
Most of the test takers are experienced and skilled programmers, but they tend to forget that many of those steps above are not needed in their everyday tasks, in their daily environments and routines.</p>

<p>This post lists out steps to get started quickly for a <strong>Java</strong> programming test, using Eclipse and Maven.</p>

<!--more-->


<p>(1) Use this command to setup an Eclipse empty project.</p>

<pre><code class="plain Create an Eclipse project">mvn archetype:generate -DgroupId=my.interview -DartifactId=CompanyName -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
</code></pre>

<p>(2) In Eclipse, go to File > Import > Existing Maven Project. Import the Eclipse project created above.</p>

<p>(3) Update pom.xml for &ldquo;Executable jar file&rdquo; + &ldquo;specified Java version&rdquo;. Replace <code>my.interview.CompanyName</code> with the correct name of your main class.</p>

<pre><code class="xml Add this into pom.xml">    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;attached&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;phase&gt;package&lt;/phase&gt;
                        &lt;configuration&gt;
                            &lt;descriptorRefs&gt;
                                &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;
                            &lt;/descriptorRefs&gt;
                            &lt;archive&gt;
                                &lt;manifest&gt;
                                    &lt;mainClass&gt;my.interview.CompanyName&lt;/mainClass&gt;
                                &lt;/manifest&gt;
                            &lt;/archive&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                &lt;version&gt;3.1&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;source&gt;1.7&lt;/source&gt;
                    &lt;target&gt;1.7&lt;/target&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
</code></pre>

<p>(4) Add logging. Ability to use logging frameworks shows off your skill and experience.
More importantly, it allows you to liberally print lots of information needed for debugging without worrying about cleaning up console output later.</p>

<ul>
<li>Create <code>resources</code> source folder in <code>src/main</code>.</li>
<li>Add <code>log4j.properties</code>. For simplicity, only log information to console.

<ul>
<li>Use <code>logger.debug</code> for printing debug information and turn on/off logging by setting <code>rootLogger</code> to <code>DEBUG</code>/<code>INFO</code>.</li>
</ul>
</li>
<li>You need to add into <code>pom.xml</code> dependencies for the three followings: <code>slf4j-api</code> (interface), <code>slf4j-log4j12</code> (route slf4j calls to log4j), <code>log4j</code> (logging backend).</li>
</ul>


<p>Use the following content for <code>log4j.properties</code>, modified from <a href="https://logging.apache.org/log4j/1.2/manual.html">this example</a>.</p>

<pre><code class="java log4j.properties file"># Set root logger level to DEBUG and its only appender to A1.
log4j.rootLogger= INFO, A1

# A1 is set to be a ConsoleAppender.
log4j.appender.A1= org.apache.log4j.ConsoleAppender

# A1 uses PatternLayout.
log4j.appender.A1.layout= org.apache.log4j.PatternLayout
log4j.appender.A1.layout.ConversionPattern= [%t][%-5p][%c] - %m%n
</code></pre>

<p>(5) At the end, your <code>pom.xml</code> shoulld looks like <a href="https://github.com/tdongsi/bart-parking/blob/f8511604bafa4564c468f952ca2fce1452f6a097/java/bart/pom.xml">this</a>. Check setup.</p>

<pre><code class="plain Check running">mvn clean package
java -jar target/xxx-jar-with-dependencies.jar
</code></pre>

<p>(6) Use <code>StreamEditor</code> interface for easy testing in Eclipse and CLI.</p>

<pre><code class="java StreamEditor interface">public interface StreamEditor {
    public void process(InputStream in, PrintStream out);
}
</code></pre>

<pre><code class="java Main class calling Solver that implements StreamEditor interface">public class App {
    public static void main(String[] args) {
        InputStream in;
        PrintStream out;

        if (args.length == 2) {
            try {
                in = new FileInputStream(new File(args[0]));
                out = new PrintStream(new File(args[1]));
            } catch (FileNotFoundException e) {
                System.err.println("Could not find file");
                return;
            }
        } else {
            in = System.in;
            out = System.out;
        }

        Solver solver = new Solver();
        solver.process(in, out);
    }
}
</code></pre>

<p>If the test requires specific input from/output to console or file, it&rsquo;s easy to do it either way.</p>

<pre><code class="plain Commands to run when using StreamEditor interface">For console input/output:
java -jar target\xxx-jar-with-dependencies.jar &lt; data\in.txt

For file input/output:
java -jar target\Salesforce-1.0-SNAPSHOT-jar-with-dependencies.jar data/in.txt data/out.txt
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Process Synchronization (Pt. 2): Race Condition]]></title>
    <link href="http://tdongsi.github.io/java/blog/2015/11/26/concurrency-race-condition/"/>
    <updated>2015-11-26T18:13:05-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2015/11/26/concurrency-race-condition</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Process Synchronization (Pt. 1): Producer-Consumer Problem]]></title>
    <link href="http://tdongsi.github.io/java/blog/2015/11/19/concurrency-tutorial-in-java-part-1-producer-consumer-problem/"/>
    <updated>2015-11-19T14:57:21-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2015/11/19/concurrency-tutorial-in-java-part-1-producer-consumer-problem</id>
    <content type="html"><![CDATA[<p><figure class='code'><figcaption><span> (Counter.java)</span> <a href='/download/code/java/Concurrency/src/Counter.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">my</span><span class="o">.</span><span class="na">practice</span><span class="o">.</span><span class="na">concurrency</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Simulate a queue in Producer-Consumer problem</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * @author cdongsi</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Counter</span> <span class="o">{</span>
</span><span class='line'>	<span class="cm">/**</span>
</span><span class='line'><span class="cm">	 * Increment counter value by one.</span>
</span><span class='line'><span class="cm">	 */</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">increment</span><span class="o">();</span>
</span><span class='line'>	
</span><span class='line'>	<span class="cm">/**</span>
</span><span class='line'><span class="cm">	 * Decrement counter value by one.</span>
</span><span class='line'><span class="cm">	 */</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">decrement</span><span class="o">();</span>
</span><span class='line'>	
</span><span class='line'>	<span class="cm">/**</span>
</span><span class='line'><span class="cm">	 * Return the current counter value.</span>
</span><span class='line'><span class="cm">	 * </span>
</span><span class='line'><span class="cm">	 * @return</span>
</span><span class='line'><span class="cm">	 */</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">current</span><span class="o">();</span>
</span><span class='line'>	
</span><span class='line'>	<span class="cm">/**</span>
</span><span class='line'><span class="cm">	 * Reset the counter value. For multiple experiment runs.</span>
</span><span class='line'><span class="cm">	 */</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">reset</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span> (Producer.java)</span> <a href='/download/code/java/Concurrency/src/Producer.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">my</span><span class="o">.</span><span class="na">practice</span><span class="o">.</span><span class="na">concurrency</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Producer</span> <span class="kd">extends</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class='line'>	
</span><span class='line'>	<span class="cm">/**</span>
</span><span class='line'><span class="cm">	 * Add some item into a common item queue</span>
</span><span class='line'><span class="cm">	 */</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">produce</span><span class="o">();</span>
</span><span class='line'>	
</span><span class='line'>	<span class="cm">/**</span>
</span><span class='line'><span class="cm">	 * Use Counter as an item queue</span>
</span><span class='line'><span class="cm">	 * </span>
</span><span class='line'><span class="cm">	 * @param queue</span>
</span><span class='line'><span class="cm">	 */</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">useQueue</span><span class="o">(</span><span class="n">Counter</span> <span class="n">queue</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span> (Consumer.java)</span> <a href='/download/code/java/Concurrency/src/Consumer.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">my</span><span class="o">.</span><span class="na">practice</span><span class="o">.</span><span class="na">concurrency</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Consumer</span> <span class="kd">extends</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class='line'>	
</span><span class='line'>	<span class="cm">/**</span>
</span><span class='line'><span class="cm">	 * Remove some item from a common item queue</span>
</span><span class='line'><span class="cm">	 */</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">consume</span><span class="o">();</span>
</span><span class='line'>	
</span><span class='line'>	<span class="cm">/**</span>
</span><span class='line'><span class="cm">	 * Use Counter as an item queue</span>
</span><span class='line'><span class="cm">	 * </span>
</span><span class='line'><span class="cm">	 * @param queue</span>
</span><span class='line'><span class="cm">	 */</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">useQueue</span><span class="o">(</span><span class="n">Counter</span> <span class="n">queue</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<pre><code class="java Producer-Consumer simulation (one producer, one consumer)">    /**
     * Run the simulation of producer-consumer problem
     * with the given queue.
     * 
     * At the end of simulation run, the queue should have 0 item.
     */
    public static void produceAndConsume(Counter queue, Producer producer, Consumer consumer) {

        Thread t1 = new Thread((Runnable) producer);
        Thread t2 = new Thread((Runnable) consumer);

        t1.start();
        t2.start();

        try {
            t1.join();
            t2.join();
        } catch (InterruptedException e) {
            // Nothing
      return;
        }

    }
</code></pre>

<p>Once you have concrete implementations of your queue (implementing Counter interface), producer (Producer interface), and consumer (Consumer interface), you can run the simulation easily. One example is as follows:</p>

<pre><code class="java Run Producer-Consumer with concrete implementations">    public static void main(String[] args) {

        Counter queue = new SimpleCounter();
        Producer producer = new SimpleProducer(queue);
        Consumer consumer = new SimpleConsumer(queue);
        produceAndConsume(queue, producer, consumer);
        System.out.println("Queue at the end: " + queue.current());
    }
</code></pre>
]]></content>
  </entry>
  
</feed>
