<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tutorial | Personal Interview Notes]]></title>
  <link href="http://tdongsi.github.io/java/blog/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/java/"/>
  <updated>2017-08-06T03:28:53-07:00</updated>
  <id>http://tdongsi.github.io/java/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gradle Cookbook]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/05/11/gradle-cookbook/"/>
    <updated>2017-05-11T10:20:39-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/05/11/gradle-cookbook</id>
    <content type="html"><![CDATA[<p>This post goes over simple (but beyond the very basic) recipes for getting started with Gradle.</p>

<!--more-->


<h3>Basic tasks</h3>

<pre><code class="plain ">./gradlew dependencies

# Subproject
./gradlew :subprojectName:dependencies

# Configuration
./gradlew dependencies --configuration testCompile
</code></pre>

<p>In the second command based on <a href="http://stackoverflow.com/questions/27763472/how-to-check-dependency-list-at-runtime-gradle">this example</a>, the root project might not have dependencies and you want to list dependencies on one of the subprojects.</p>

<p>In the third command based on <a href="https://discuss.gradle.org/t/how-to-find-which-dependency-is-fetching-a-certain-jar/7319/10">this example</a>, you want to see which task will fetch a certain JAR (e.g., velocity).</p>

<h3>Sample <code>build.gradle</code> file</h3>

<p>Most of the tutorials show a very simplistic <code>build.gradle</code> file to illustrate the basics.
However, starting from those simple build files will often lead to frequent major changes, coming from frequent Google and StackOverflow searches for how to do something (e.g., Nexus authentication).
This section shows how a <code>build.gradle</code> file looks like for a medium-size team working in industry.</p>

<pre><code class="groovy Sample build file">buildscript {
    repositories {
        maven {
            credentials {
                username nexusUsername
                password nexusPassword
            }
            url { nexusPublic }
        }
    }
    dependencies {
        classpath 'com.h2database:h2:1.3.170'
        classpath 'org.postgresql:postgresql:9.4-1201-jdbc41'
        classpath 'com.example.plugins:some-gradle-plugin:1.1.6'
    }
}

apply plugin: 'com.example.plugins'

subprojects {
    repositories {
        maven {
            credentials {
                username nexusUsername
                password nexusPassword
            }
            url { nexusPublic }
        }
    }

    apply plugin: 'groovy'

    group = 'com.example.app'

    dependencies {
        // Core
        compile ('org.apache.kafka:kafka_2.11:0.8.2.0') {
            exclude module: 'jms'
            exclude module: 'jmxtools'
            exclude module: 'jmxri'
            exclude group: 'org.slf4j'
            exclude module: 'junit'
        }

        compile 'com.amazonaws:aws-java-sdk:1.9.24'
        compile 'io.swagger:swagger-core:1.5.10'

        /*
         * junit is excluded in multiple places, because org.apache.cassandra.cassandra-all:2.1.9
         * includes JUnit 4.8.1 as a compile dependency, and our test framework needing 4.12
         */
        // Support
        compile ("org.apache.cassandra.cassandra-all:2.1.9") {
            exclude module: 'junit'
        }
        compile ("com.example.app:common:${commons_version}") {
            exclude module: 'junit'
        }
        compile "org.flywaydb:flyway-core:3.2.1"
        testCompile 'org.hsqldb:hsqldb:2.3.2'
        compile 'com.google.code.findbugs:findbugs:3.0.1'
    }

    // CassandraSetupTest-based tests fail for newer versions of Guava.
    configurations.all {
        resolutionStrategy {
            force 'com.google.guava:guava:18.0'
        }
    }
}

jacocoCoverage.limits =  [
    'instruction': 40,
    'line'       : 48,
    'complexity' : 30,
    'method'     : 55,
    'class'      : 70
]

project(':server') {
    mainClassName = 'com.example.app.ApiApplication'
    dependencies {
        compile 'com.exacttarget:partner-api:1.0.3'

        testCompile 'com.squareup.okhttp3:mockwebserver:3.2.0'
        testCompile 'org.apache.lucene:lucene-test-framework:5.3.1'
    }

    test {
        exclude '**/SomeClass.class'
        exclude '**/*IntegrationTest.*'
        exclude '**/schema/model/*MoreWildcard.class'
    }

    // generateSwagger is not a Test but depends on the testing framework
    task generateSwagger(type: Test, dependsOn: testClasses) {
        include '**/util/SwaggerFileGenerator.class'
        String swaggerPath = 'build/swagger-test.yaml'

        // Not considered "UP-TO-DATE" if the output file does not exist
        outputs.upToDateWhen {
            file('server/' + swaggerPath).exists()
        }
        systemProperty 'test.swagger.outfile', file(swaggerPath)
        doLast {
            println "\n\nSwagger documentation can be found in api/server/${swaggerPath}\n\n"
        }
    }


    checkstyle {
        checkstyleMain.exclude '**/db/migration/*.java' // Exclude flywaydb migrations: they violate type name checks
    }

    jacocoCoverage.limits =  [
        'instruction': 40,
        'line'       : 48,
        'complexity' : 30,
        'method'     : 55,
        'class'      : 70
    ]

}
</code></pre>

<h4>Maven/Nexus authentication</h4>

<p>In Gradle, Nexus authentication can be specified in both <code>build.gradle</code> and <code>gradle.properties</code> file, where <code>build.gradle</code> should be checked into VCS (e.g., git) while <code>gradle.properties</code> contains sensitive credentials information.</p>

<pre><code class="groovy Example build.gradle">    repositories {
        maven {
            credentials {
                username nexusUsername
                password nexusPassword
            }
            url { nexusPublic }
        }
    }
</code></pre>

<pre><code class="properties Example gradle.properties">nexusUsername=myUsername
nexusPassword=password123
nexusPublic=https://nexus.example.com/nexus/content/groups/public/
</code></pre>

<p>In Jenkins, to securely passing Nexus credentials, <code>properties</code> file is not recommended.
Instead, use <code>withCredentials</code> for passing credentials as shown in <a href="http://tdongsi.github.io/blog/2017/05/20/gradle-settings-in-jenkinsfile/">this blog post</a>.</p>

<h4><code>buildscript</code> block</h4>

<p>From <a href="https://discuss.gradle.org/t/what-is-difference-between-buildscript-classpath-and-dependencies-compile/4290/2">here</a>,
the <code>buildscript</code> block only controls dependencies for the buildscript process itself, not for the application code, which the top-level <code>dependencies</code> block controls.
For instance, you could define dependencies in &ldquo;buildscript/classpath&rdquo; that represent Gradle plugins used in the build process.
Those plugins would not be referenced as dependencies for the application code.
Read the Gradle User Guide for more information (the PDF is easy to search).</p>

<h4>Proxy</h4>

<p>Use <code>http.proxyHost</code> and <code>https.proxyHost</code> accordingly for setting up proxy.</p>

<pre><code class="groovy Example HTTP proxy in Jenkinsfile">            echo "Running with proxy ${env.https_proxy} and ${env.http_proxy}"
            PROXY_OPTIONS = '-Dhttps.proxyHost=public0-proxy1.data.example.net -Dhttps.proxyPort=8080'
            sh "./gradlew ${PROXY_OPTIONS} run --stacktrace --info"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Quick-start for Groovy Programming Test]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/05/10/tutorial-quick-start-for-groovy-programming-test/"/>
    <updated>2017-05-10T00:07:18-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/05/10/tutorial-quick-start-for-groovy-programming-test</id>
    <content type="html"><![CDATA[<p>Eclipse &amp; Maven.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Quick-start for Java Programming Test]]></title>
    <link href="http://tdongsi.github.io/java/blog/2016/08/29/tutorial-timed-programming-test/"/>
    <updated>2016-08-29T01:38:40-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2016/08/29/tutorial-timed-programming-test</id>
    <content type="html"><![CDATA[<p>For <strong>timed</strong> programming tests, new test-takers usually underestimate how short two and a half hours can be.
Remember that 30 minutes of that will go into reading the problem instructions and another 10 to 30 minutes go into setting up before you can start writing the first line of code.
And if you are unlucky, you need another 15-30 minutes to debug any issue that comes up.
That leaves you only about one hour for actually solving the problem.
Most of the test takers are experienced and skilled programmers, but they tend to forget that many of those steps above are not needed in their everyday tasks, in their daily environments and routines.</p>

<p>This post lists out steps to get started quickly for a <strong>Java</strong> programming test, using Eclipse and Maven.</p>

<!--more-->


<p>(1) Use this command to setup an Eclipse empty project.</p>

<pre><code class="plain Create an Eclipse project">mvn archetype:generate -DgroupId=my.interview -DartifactId=CompanyName -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
</code></pre>

<p>(2) In Eclipse, go to File > Import > Existing Maven Project. Import the Eclipse project created above.</p>

<p>(3) Update pom.xml for &ldquo;Executable jar file&rdquo; + &ldquo;specified Java version&rdquo;. Replace <code>my.interview.CompanyName</code> with the correct name of your main class.</p>

<pre><code class="xml Add this into pom.xml">    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;attached&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;phase&gt;package&lt;/phase&gt;
                        &lt;configuration&gt;
                            &lt;descriptorRefs&gt;
                                &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;
                            &lt;/descriptorRefs&gt;
                            &lt;archive&gt;
                                &lt;manifest&gt;
                                    &lt;mainClass&gt;my.interview.CompanyName&lt;/mainClass&gt;
                                &lt;/manifest&gt;
                            &lt;/archive&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                &lt;version&gt;3.1&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;source&gt;1.7&lt;/source&gt;
                    &lt;target&gt;1.7&lt;/target&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
</code></pre>

<p>(4) Add logging. Ability to use logging frameworks shows off your skill and experience.
More importantly, it allows you to liberally print lots of information needed for debugging without worrying about cleaning up console output later.</p>

<ul>
<li>Create <code>resources</code> source folder in <code>src/main</code>.</li>
<li>Add <code>log4j.properties</code>. For simplicity, only log information to console.

<ul>
<li>Use <code>logger.debug</code> for printing debug information and turn on/off logging by setting <code>rootLogger</code> to <code>DEBUG</code>/<code>INFO</code>.</li>
</ul>
</li>
<li>You need to add into <code>pom.xml</code> dependencies for the three followings: <code>slf4j-api</code> (interface), <code>slf4j-log4j12</code> (route slf4j calls to log4j), <code>log4j</code> (logging backend).</li>
</ul>


<p>Use the following content for <code>log4j.properties</code>, modified from <a href="https://logging.apache.org/log4j/1.2/manual.html">this example</a>.</p>

<pre><code class="java log4j.properties file"># Set root logger level to DEBUG and its only appender to A1.
log4j.rootLogger= INFO, A1

# A1 is set to be a ConsoleAppender.
log4j.appender.A1= org.apache.log4j.ConsoleAppender

# A1 uses PatternLayout.
log4j.appender.A1.layout= org.apache.log4j.PatternLayout
log4j.appender.A1.layout.ConversionPattern= [%t][%-5p][%c] - %m%n
</code></pre>

<p>(5) At the end, your <code>pom.xml</code> shoulld looks like <a href="https://github.com/tdongsi/bart-parking/blob/f8511604bafa4564c468f952ca2fce1452f6a097/java/bart/pom.xml">this</a>. Check setup.</p>

<pre><code class="plain Check running">mvn clean package
java -jar target/xxx-jar-with-dependencies.jar
</code></pre>

<p>(6) Use <code>StreamEditor</code> interface for easy testing in Eclipse and CLI.</p>

<pre><code class="java StreamEditor interface">public interface StreamEditor {
    public void process(InputStream in, PrintStream out);
}
</code></pre>

<pre><code class="java Main class calling Solver that implements StreamEditor interface">public class App {
    public static void main(String[] args) {
        InputStream in;
        PrintStream out;

        if (args.length == 2) {
            try {
                in = new FileInputStream(new File(args[0]));
                out = new PrintStream(new File(args[1]));
            } catch (FileNotFoundException e) {
                System.err.println("Could not find file");
                return;
            }
        } else {
            in = System.in;
            out = System.out;
        }

        Solver solver = new Solver();
        solver.process(in, out);
    }
}
</code></pre>

<p>If the test requires specific input from/output to console or file, it&rsquo;s easy to do it either way.</p>

<pre><code class="plain Commands to run when using StreamEditor interface">For console input/output:
java -jar target\xxx-jar-with-dependencies.jar &lt; data\in.txt

For file input/output:
java -jar target\Salesforce-1.0-SNAPSHOT-jar-with-dependencies.jar data/in.txt data/out.txt
</code></pre>
]]></content>
  </entry>
  
</feed>
