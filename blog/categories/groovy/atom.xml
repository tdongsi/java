<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Groovy | Personal Interview Notes]]></title>
  <link href="http://tdongsi.github.io/java/blog/categories/groovy/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/java/"/>
  <updated>2017-06-21T17:07:53-07:00</updated>
  <id>http://tdongsi.github.io/java/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Advanced Jenkinsfile Cookbook]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/06/19/jenkinsfile-cookbook/"/>
    <updated>2017-06-19T14:23:01-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/06/19/jenkinsfile-cookbook</id>
    <content type="html"><![CDATA[<p>This post details some of the more advanced Jenkins pipelines using Jenkinsfile.</p>

<!--more-->


<h3>Nexus authentication in Maven</h3>

<p>More detailed discussion is in <a href="/blog/2017/06/17/groovy-in-jenkinsfile/">here</a>.</p>

<pre><code class="groovy Jenkinsfile">def myScript

pipeline {
   agent { node { label 'test-agent' } }
   stages {
       stage("compile") {
           steps {
               checkout scm
               withCredentials([
                 [$class: 'StringBinding', credentialsId: 'nexusUsername', variable: 'nexusUsername'],
                 [$class: 'StringBinding', credentialsId: 'nexusPassword', variable: 'nexusPassword']
               ]) {
                   script {
                       myScript = load 'jenkins/xml.groovy'
                       def xmlTemplate = readFile( 'jenkins/settings.xml' )
                       String xmlFile = myScript.transformXml(xmlTemplate, env.nexusUsername, env.nexusPassword)

                       String myPath = 'temp.xml'
                       writeFile file: myPath, text: xmlFile

                       sh "mvn -B clean compile -s ${myPath}"

                       sh "rm ${myPath}"
                   }
               }
           }
           post {
           failure {
               echo "Sending email for compile failed (TBD)"
            }
           }
       }
   }
}
</code></pre>

<pre><code class="groovy xml.groovy">import groovy.xml.StreamingMarkupBuilder
import groovy.xml.XmlUtil

@NonCPS
def transformXml(String xmlContent, String username, String password) {
  def xml = new XmlSlurper(false, false).parseText(xmlContent)

  echo 'Start tranforming XML'
  xml.servers.server.each { node -&gt;
    node.username = username
    node.password = password
  }

  def outWriter = new StringWriter()
  XmlUtil.serialize( xml, outWriter )
  return outWriter.toString()
}

return this
</code></pre>

<h3>Running test suite in parallel</h3>

<pre><code class="groovy Jenkinsfile">node('remote') {
  git 'https://github.com/jenkinsci/parallel-test-executor-plugin-sample.git'
  stash name: 'sources', includes: 'pom.xml,src/'
}
def splits = splitTests count(2)
def branches = [:]
for (int i = 0; i &lt; splits.size(); i++) {
  def index = i // fresh variable per iteration; i will be mutated
  branches["split${i}"] = {
    node('remote') {
      deleteDir()
      unstash 'sources'
      def exclusions = splits.get(index);
      writeFile file: 'exclusions.txt', text: exclusions.join("\n")
      sh "${tool 'M3'}/bin/mvn -B -Dmaven.test.failure.ignore test"
      junit 'target/surefire-reports/*.xml'
    }
  }
}
parallel branches
</code></pre>

<p>When you run this Pipeline for the first time, it will check out a project and run all of its tests in sequence.
The second and subsequent times you run it, the <code>splitTests</code> task will partition your tests into two sets of roughly equal runtime.
The rest of the Pipeline then runs these in parallel — so if you look at <strong>trend</strong> (in the <strong>Build History</strong> widget) you will see the second and subsequent builds taking roughly half the time of the first.
If you only have the one agent configured with its two executors, this won&rsquo;t save as much time, but you may have multiple agents on different hardware matching the same label expression.</p>

<p>This script is more complex than the previous ones so it bears some examination.
You start by grabbing an agent, checking out sources, and making a copy of them using the <code>stash</code> step:</p>

<pre><code class="groovy">stash name: 'sources', includes: 'pom.xml,src/'
</code></pre>

<p>Later, you <code>unstash</code> these same files back into <strong>other</strong> workspaces.
You could have just run <code>git</code> anew in each agent&rsquo;s workspace, but this would result in duplicated changelog entries, as well as contacting the Git server twice.
* A Pipeline build is permitted to run as many SCM checkouts as it needs to, which is useful for projects working with multiple repositories, but not what we want here.
* More importantly, if anyone pushes a new Git commit at  the wrong time, you might be testing different sources in some branches - which is prevented when you do the checkout just once and distribute sources to agents yourself.</p>

<p>The command <code>splitTests</code> returns a list of lists of strings.
From each (list) entry, you construct one branch to run; the label (map key) is akin to a thread name, and will appear in the build log.
The Maven project is set up to expect a file <code>exclusions.txt</code> at its root, and it will run all tests <em>not</em> mentioned there, which we set up via the <code>writeFile</code> step.
When you run the <code>parallel</code> step, each branch is started at the same time, and the overall step completes when all the branches finish: “fork &amp; join”.</p>

<p>There are several new ideas at work here:
* A single Pipeline build allocates several executors, potentially on different agents, at the same time.
You can see these starting and finishing in the Jenkins executor widget on the main screen.</p>

<ul>
<li>Each call to <code>node</code> gets its own workspace.
This kind of flexibility is impossible in a freestyle project, each build of which is tied to exactly one workspace.The Parallel Test Executor plugin works around that for its freestyle build step by triggering multiple builds of the project, making the history hard to follow.</li>
</ul>


<p>Do not use <code>env</code> in this case:</p>

<pre><code class="groovy">env.PATH = "${mvnHome}/bin:${env.PATH}"
</code></pre>

<p>because environment variable overrides are  limited to being global to a pipeline run, not local to the current thread (and thus agent).
You could, however, use the <code>withEnv</code> step as noted above.</p>

<p>You may also have noticed that you are running <code>JUnitResultArchiver</code> several times, something that is not possible in a freestyle project.
The test results recorded in the build are cumulative.</p>

<p>When you view the log for a build with multiple branches, the output from each will be intermixed.
It can be useful to click on the <em>Pipeline Steps</em> link on the build’s sidebar.
This will display a tree-table view of all the steps run so far in the build, grouped by logical block, for example <code>parallel</code> branch.
You can click on individual steps and get more details, such as the log output for that step in isolation, the workspace associated with a <code>node</code> step, and so on.</p>

<h4>Reference</h4>

<ul>
<li><a href="https://github.com/jenkinsci/pipeline-plugin/blob/master/TUTORIAL.md">TUTORIAL</a></li>
<li><a href="https://jenkins.io/blog/2016/06/16/parallel-test-executor-plugin/">More in Blog post</a></li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Parallel+Test+Executor+Plugin">Plugin page</a>: <code>splitTests</code> defined by this plugin.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy in Jenkinsfile]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/06/17/groovy-in-jenkinsfile/"/>
    <updated>2017-06-17T12:08:15-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/06/17/groovy-in-jenkinsfile</id>
    <content type="html"><![CDATA[<p>Groovy is supported in Jenkinsfile for quick scripting.
However, lots of features in the Groovy language is not supported and simple works in Groovy can be really tricky in Jenkinsfile.</p>

<!--more-->


<h3>Different ways to process XML file</h3>

<p>In summary, if it is possible, use another script language (e.g., Python) for <strong>file manipulation</strong> in Jenkinsfile.
It is time consuming to navigate all tricky stuffs of Groovy implementaiton in Jenkins:</p>

<ul>
<li>In-process Script Approval: you have to approve every single class and method <em>one by one</em>.</li>
<li>Some features of Groovy is not supported and it takes time to figure out what is not supported and how to work around. When in doubt, use <code>@NonCPS</code>.</li>
</ul>


<h4>Groovy method in Jenkinsfile</h4>

<pre><code class="groovy Jenkinsfile">import groovy.xml.StreamingMarkupBuilder
import groovy.xml.XmlUtil

def settingsFile = 'temp.xml'

@NonCPS
def xmlTransform(txt, username, password) {

    def xmlRoot = new XmlSlurper(false, false).parseText(txt)
    echo 'Start tranforming XML'
    xmlRoot.servers.server.each { node -&gt;
       node.username = username
       node.password = password
    }

    // TRICKY: FileWriter does NOT work
    def outWriter = new StringWriter()
    XmlUtil.serialize( xmlRoot, outWriter )
    return outWriter.toString()
}

pipeline {
   agent { node { label 'test-agent' } }
   stages {
       stage("compile") {
           steps {
               checkout scm
               withCredentials([
                 [$class: 'StringBinding', credentialsId: 'nexusUsername', variable: 'nexusUsername'],
                 [$class: 'StringBinding', credentialsId: 'nexusPassword', variable: 'nexusPassword']
               ]) {
                   script {
                       def xmlTemplate = readFile( 'jenkins/settings.xml' )
                       def xmlFile = xmlTransform(xmlTemplate, env.nexusUsername, env.nexusPassword)
                       writeFile file: settingsFile, text: xmlFile

                       sh "mvn -B -s ${settingsFile} clean compile"
                   }
               }
           }
           post {
           failure {
               echo "Sending email for compile failed (TBD)"
            }
           }
       }
   }
}
</code></pre>

<p>Some notes:</p>

<ul>
<li><code>import</code> statements must be at the top, right after the shebang and before anything else.</li>
<li>The Groovy methods must be annotated with <code>@NonCPS</code> or Jenkins will report the error &ldquo;java.io.NotSerializableException&rdquo;.</li>
<li>The Groovy methods can not be defined inside a <code>step</code> block. It must be defined at the top.</li>
<li><code>@NonCPS</code> is required since the Groovy method uses several non-serializble objects.</li>
</ul>


<h4>Groovy method in separate script</h4>

<pre><code class="groovy Jenkinsfile">def myScript

pipeline {
   agent { node { label 'test-agent' } }
   stages {
       stage("compile") {
           steps {
               checkout scm
               withCredentials([
                 [$class: 'StringBinding', credentialsId: 'nexusUsername', variable: 'nexusUsername'],
                 [$class: 'StringBinding', credentialsId: 'nexusPassword', variable: 'nexusPassword']
               ]) {
                   script {
                       myScript = load 'jenkins/xml.groovy'
                       def xmlTemplate = readFile( 'jenkins/settings.xml' )
                       String xmlFile = myScript.transformXml(xmlTemplate, env.nexusUsername, env.nexusPassword)

                       String myPath = 'temp.xml'
                       def mCommand = "cat &gt;${myPath} &lt;&lt;EOF"
                       mCommand += "\n${xmlFile}\nEOF"
                       sh mCommand

                       sh "mvn -B clean compile -s ${myPath}"

                       sh "rm ${myPath}"
                   }
               }
           }
           post {
           failure {
               echo "Sending email for compile failed (TBD)"
            }
           }
       }
   }
}
</code></pre>

<pre><code class="groovy xml.groovy">import groovy.xml.StreamingMarkupBuilder
import groovy.xml.XmlUtil

@NonCPS
def transformXml(String xmlContent, String username, String password) {
  def xml = new XmlSlurper(false, false).parseText(xmlContent)

  echo 'Start tranforming XML'
  xml.servers.server.each { node -&gt;
    node.username = username
    node.password = password
  }

  def outWriter = new StringWriter()
  XmlUtil.serialize( xml, outWriter )
  return outWriter.toString()
}

return this
</code></pre>

<h4>Groovy method in shared library</h4>

<p>The above Nexus authentication code is likely repeated across multiple Maven builds.
Therefore, it is worth converting it into a DSL into a Shared Library in Jenkins.
The DSL takes two parameters:</p>

<ul>
<li>templateFile: settings.xml template with Nexus credentials info redacted.</li>
<li>command: Maven command with settings file NOT specified (i.e., NO &ldquo;-s&rdquo; option in the command).</li>
</ul>


<p>The example usage is as follows:</p>

<pre><code class="groovy Jenkinsfile">pipeline {
   agent { node { label 'test-agent' } }
   stages {
       stage("compile") {
           steps {
               checkout scm
               script {
                    withNexusMaven {
                        templateFile = 'jenkins/settings.xml'
                        command = "mvn -B clean compile"
                    }
               }
           }
           post {
           failure {
               echo "Sending email for compile failed (TBD)"
            }
           }
       }
   }
}
</code></pre>

<p>The Jenksinfile is much cleaner since most of implementation details have been moved inside the DSL:</p>

<pre><code class="groovy withNexusMaven.groovy">#!groovy
import groovy.xml.XmlUtil

@NonCPS
def transformXml(String xmlContent, String username, String password) {
  def xml = new XmlSlurper(false, false).parseText(xmlContent)

  echo 'Start tranforming XML'
  xml.servers.server.each { node -&gt;
    node.username = username
    node.password = password
  }

  def outWriter = new StringWriter()
  XmlUtil.serialize( xml, outWriter )
  return outWriter.toString()
}

def call(Closure body) {

    def config = [:]
    if (body != null) {
        body.resolveStrategy = Closure.DELEGATE_FIRST
        body.delegate = config
        body()
    }

    def templateFile = config.templateFile ?: '/home/data/settings.xml'
    def command = config.command ?: "mvn -B clean compile"

    withCredentials([
        [$class: 'StringBinding', credentialsId: 'nexusUsername', variable: 'nexusUsername'],
        [$class: 'StringBinding', credentialsId: 'nexusPassword', variable: 'nexusPassword']
    ]) {
        def xmlTemplate = readFile templateFile
        String xmlFile = transformXml(xmlTemplate, env.nexusUsername, env.nexusPassword)

        String tempFile = 'temp.xml'
        writeFile file: tempFile, text: xmlFile

        sh "${command} -s ${tempFile}"

        // Clean up
        sh "rm ${tempFile}"
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XML Processing in Groovy]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/06/14/xml-processing-in-groovy/"/>
    <updated>2017-06-14T09:57:51-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/06/14/xml-processing-in-groovy</id>
    <content type="html"><![CDATA[<p>This post discusses XML processing in Groovy.</p>

<!--more-->


<h3>XmlParser vs XmlSlurper</h3>

<p>TODO</p>

<h3>Code recipes</h3>

<p>The input XML file is based on typical Maven &ldquo;settings.xml&rdquo; file.</p>

<p><strong>Recipe 1</strong>: Read, transform, and write to file. Based on <a href="https://stackoverflow.com/questions/2245641/load-modify-and-write-an-xml-document-in-groovy">this</a>.</p>

<pre><code class="groovy XML transform to file">import groovy.xml.StreamingMarkupBuilder
import groovy.xml.XmlUtil

def transformXml(String filePath, String username, String password) {
  String TMP_PATH = '/tmp/temp.xml'

  def inFile = new File( filePath )
  def outFile = new File( TMP_PATH )
  def xml = new XmlSlurper(false, false).parse(inFile)

  xml.servers.server.each { node -&gt;
    node.username = username
    node.password = password
  }

  def outBuilder = new StreamingMarkupBuilder()
  def outWriter = outFile.newWriter()

  // Option 1: Write XML to one line
  outWriter &lt;&lt; outBuilder.bind{ mkp.yield xml }
  // Option 2: Pretty print XML
  XmlUtil.serialize( xml, outWriter )

  return TMP_PATH
}
</code></pre>

<p>For overwriting the original file (based on <a href="https://stackoverflow.com/questions/18385062/writing-updated-xml-to-originally-parsed-file">this</a>):</p>

<pre><code class="groovy Write the transformed XML to original file">inFile.withWriter { outWriter -&gt;
    XmlUtil.serialize( new StreamingMarkupBuilder().bind{ mkp.yield xml }, outWriter )
}
</code></pre>

<p><strong>Recipe 2</strong>: Read, transform, and write to string.</p>

<pre><code class="groovy XML transform to String">import groovy.xml.XmlUtil

@NonCPS
def transformXml(String xmlContent, String username, String password) {
  def xml = new XmlSlurper(false, false).parseText(xmlContent)

  echo 'Start tranforming XML'
  xml.servers.server.each { node -&gt;
    node.username = username
    node.password = password
  }

  def outWriter = new StringWriter()
  XmlUtil.serialize( xml, outWriter )
  return outWriter.toString()
}
</code></pre>

<h3>Tips</h3>

<ul>
<li><code>XmlSlurper(false, false)</code> is used due to <a href="https://stackoverflow.com/questions/9197588/tag0-namespace-added-for-elements-in-default-namespace">this</a></li>
</ul>


<h3>References</h3>

<ul>
<li><a href="http://groovy-lang.org/processing-xml.html">Processing XML</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Quick-start for Groovy Programming Test]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/05/10/tutorial-quick-start-for-groovy-programming-test/"/>
    <updated>2017-05-10T00:07:18-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/05/10/tutorial-quick-start-for-groovy-programming-test</id>
    <content type="html"><![CDATA[<p>Eclipse &amp; Maven.</p>
]]></content>
  </entry>
  
</feed>
