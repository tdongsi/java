<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Groovy | Personal Interview Notes]]></title>
  <link href="http://tdongsi.github.io/java/blog/categories/groovy/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/java/"/>
  <updated>2018-02-16T19:31:14-08:00</updated>
  <id>http://tdongsi.github.io/java/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Groovy Fundamentals: Part 5: Demos]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-5/"/>
    <updated>2017-12-08T17:17:20-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-5</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy Fundamentals: Part 4: Closures & Operators]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-4/"/>
    <updated>2017-12-08T17:17:09-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-4</id>
    <content type="html"><![CDATA[<p>This post corresponds to &ldquo;Basic Closures&rdquo; and &ldquo;Misc Operators&rdquo; sections of <a href="https://www.safaribooksonline.com/library/view/groovy-programming-fundamentals/9781491926253/">this course</a>.</p>

<!--more-->


<h3>Closures</h3>

<pre><code class="groovy Iterating list with closure">List nums = [9,6,7,5,8,6,4,2,3]
for (int num: nums) {
    println num
}

// Pro: not much. You don't have to specify type
for (num in nums) {
    // println num
}

// Idiomatic in Groovy.
nums.each { num -&gt;
    println num
}
nums.eachWithIndex { num, idx -&gt;
    println "nums[$idx] == $num"
}
</code></pre>

<pre><code class="groovy Iterating map with closure">Map m = [a:1, b:2, c:2]

// Java idiom
for (String key : m.keySet()) {
    ...
}

// Groovy idiom
// One parameter closure gives Map.Entry
m.each { e -&gt;
    println "${e.key} ${e.value}"
}
// Two parameter closure gives key, value
m.each { k, v -&gt;

}
</code></pre>

<pre><code class="groovy collect method">println nums.collect { it * 2 } // map
    .findAll { it % 3 == 0 }    // filter
    .sum()                      // reduce

def factor = 2
println nums.collect { it*factor }
// Spread dot operator
println nums *. multiply(2)
// Demo
String HOMEPAGE = 'http://oreilly.com'
println HOMEPAGE.toURL().text.readLines() *. size()
</code></pre>

<h3>Geocoding demo: XML query and parsing</h3>

<pre><code class="groovy">String XML_BASE = 'https://maps.googleapis.com/maps/api/geocode/xml?'
List address = ['2700 Coast Ave', 'Mountain View', 'CA']

String encoded = address.collect {
    URLEncoder.encode(it, 'UTF-8')
}.join(',')

String queryString = "address=$encoded"
String url = "$XML_BASE$queryString"
// println url.toURL().text

def root = new XmlSlurper().parse(url)
def loc = root.result[0].geometry.location // Navigate DOM using dot
println "Coordinates: ${loc.lat}, ${loc.lng}"
</code></pre>

<h3>ICNDB demo: JSON query and parsing</h3>

<pre><code class="groovy">String JSON_BASE = 'http://api.icndb.com/jokes/random?'
// Only the POTUS can claim such hyperbole.
def params = [limitTo:'[nerdy]', firstName: 'Donald', lastName: 'Trump']
def qs = params.collect {k,v -&gt; "$k=$v"}.join('&amp;')
String jsonTxt = "$JSON_BASE$qs".toURL().text
// println jsonTxt
def json = new JsonSlurper().parseText(jsonTxt)
println json.value.joke
</code></pre>

<h3>Operators</h3>

<pre><code class="groovy Misc operators in Groovy">// Safe navigation ?.
class Department {
    Manager boss
}
class Manager {
    String name
}
Department d1 = new Department(boss: new Manager(name: 'ABC'))
Department d2 = new Department()
println d1 ?. boss ?. name
// Standard d2.boss.name will throw NPE.
println d2 ?. boss ?. name

// Spaceship operator: Comparable interface
println 1 &lt;=&gt; 2

// See Groovy truth
// Elvis operator
String input
String greet = 'Hello ' + (input ?: 'World')
println greet
</code></pre>

<p>Groovy truth:</p>

<ul>
<li>non-zero numbers</li>
<li>non-null references</li>
<li>non-empty strings</li>
<li>non-empty collections</li>
<li>regex with a match</li>
<li>boolean true</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy Fundamentals: Part 3: POGOs & Collections]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-3/"/>
    <updated>2017-12-08T17:17:05-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-3</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy Fundamentals: Part 2: Numbers & Strings]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-2/"/>
    <updated>2017-12-08T17:16:49-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-2</id>
    <content type="html"><![CDATA[<pre><code class="groovy Speak Groovy with Java accent">def void healthcheck(String endpoint, int timeoutInSeconds = 120, int expectedCode = 200) {
    println "Doing health check of " + endpoint

    int i = 0
    int code = 0
    while (code != expectedCode) {
        try {
            URL url = new URL(endpoint)
            HttpURLConnection connection = (HttpURLConnection) url.openConnection()
            connection.setRequestMethod("GET")
            connection.connect()
            code = connection.getResponseCode()
            println "Response code:" + code
        } catch (Exception e) {
            println e
        }

        Thread.sleep(1000)

        i += 1
        if (i == timeoutInSeconds) {
            throw new RuntimeException("Healthcheck of " + endpoint + " failed.")
        }
    }
}

def out = healthcheck("https://my.service.com/")
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy Fundamentals: Part 1: Basics]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-1/"/>
    <updated>2017-12-08T17:16:47-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-1</id>
    <content type="html"><![CDATA[<p>This post corresponds to &ldquo;Installing Groovy&rdquo; section of <a href="https://www.safaribooksonline.com/library/view/groovy-programming-fundamentals/9781491926253/">this course</a>.</p>

<!--more-->


<h3>Anatomy of Groovy bytecode</h3>

<p>There is no requirement of filename matching class name like in Java (e.g., Foo.java for Foo class).
However, the convention is that filesnames with lower cases and underscore are used for script (e.g., hello_world.groovy) and filesnames with camel cases are used for Groovy class (e.g., Foo.groovy for Foo class).</p>

<pre><code class="plain">tdongsi-ltm4:docs tdongsi$ groovy hello_world.groovy
Hello World


tdongsi-ltm4:docs tdongsi$ groovyc hello_world.groovy
tdongsi-ltm4:docs tdongsi$ ls
hello_world.class
hello_world.groovy
tdongsi-ltm4:docs tdongsi$ groovy hello_world
Hello World
</code></pre>

<p>The above code snippets show that you can run command <code>groovy</code> with source code directly, giving the impression of interpreting language.
However, what actually happens is that it compiles and runs the bytecode but does not save the byte code.
On the other hand, you can compile with <code>groovyc</code> command to obtain the bytecode and run like Java code.</p>

<pre><code class="plain Anatomy of bytecode from Groovy code">tdongsi-ltm4:docs tdongsi$ java hello_world
Error: Could not find or load main class hello_world

tdongsi-ltm4:docs tdongsi$ javap hello_world
Compiled from "hello_world.groovy"
public class hello_world extends groovy.lang.Script {
  public static transient boolean __$stMC;
  public hello_world();
  public hello_world(groovy.lang.Binding);
  public static void main(java.lang.String...);
  public java.lang.Object run();
  protected groovy.lang.MetaClass $getStaticMetaClass();
}
</code></pre>

<p>The above code snippets show that <code>hello_world.class</code> is also JVM bytecode.
Although, we cannot execute <code>java hello_world</code> directly, the <code>javap</code> command confirms that it is Java bytecode.
With the right class dependencies, provided in <code>groovy-all-2.4.8.jar</code> in <code>GROOVY_HOME</code>, we can execute the bytecode compiled from Groovy code using <code>java</code> code, as shown below.</p>

<pre><code class="plain Exceute Groovy code with Java">tdongsi-ltm4:docs tdongsi$ which groovyc
/usr/local/bin/groovyc
tdongsi-ltm4:docs tdongsi$ ls -l /usr/local/bin/groovyc
lrwxr-xr-x  1 tdongsi  staff  34 Feb 10  2017 /usr/local/bin/groovyc -&gt; ../Cellar/groovy/2.4.8/bin/groovyc

tdongsi-ltm4:docs tdongsi$ java -cp /usr/local/Cellar/groovy/2.4.8/libexec/embeddable/groovy-all-2.4.8.jar:. hello_world
Hello World
</code></pre>

<p>The implication is that, in any production system or development environment, you can add/execute any Groovy code by simply adding a single jar file.
For example, in Maven projects, all you need to do is to add this into the pom.xml file:</p>

<pre><code class="xml Groovy dependencies">    &lt;dependency&gt;
      &lt;groupId&gt;org.codehaus.groovy&lt;/groupId&gt;
      &lt;artifactId&gt;groovy-all&lt;/artifactId&gt;
      &lt;version&gt;2.4.13&lt;/version&gt;
    &lt;/dependency&gt;
</code></pre>

<p>After that, you can start adding package and Groovy file, e.g., HelloWorld.groovy, into &ldquo;src/main/groovy&rdquo; folder.
See <a href="https://github.com/tdongsi/java/commit/3ce5202f9c575f735f14f095ea26759224316576">example commit</a>.</p>

<h3>Default imports</h3>

<p>In Groovy, if you don&rsquo;t add any <code>import</code> statements, you get the following package by default:</p>

<ul>
<li>java.lang.*</li>
<li>java.util.*</li>
<li>java.net.*</li>
<li>java.io.*</li>
<li>java.math.BigInteger</li>
<li>java.math.BigDecimal</li>
<li>groovy.lang.*</li>
<li>groovy.util.*</li>
</ul>


<h3><code>def</code> keyword</h3>

<p>In Groovy, a variable can be dynamic type, using <code>def</code> keyword, or static type (Java-style).</p>

<pre><code class="groovy Dynamic and weak typing">def x = 1
println x.class.name
x = 'abc'
println x.class.name
</code></pre>

<p>The best practice is to use static typing when you know what type a variable is at the time of writing.</p>
]]></content>
  </entry>
  
</feed>
