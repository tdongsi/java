<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Groovy | Personal Interview Notes]]></title>
  <link href="http://tdongsi.github.io/java/blog/categories/groovy/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/java/"/>
  <updated>2019-07-05T22:40:06-07:00</updated>
  <id>http://tdongsi.github.io/java/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gradle Fundamentals: Part 2]]></title>
    <link href="http://tdongsi.github.io/java/blog/2018/08/11/gradle-fundamentals-part-2/"/>
    <updated>2018-08-11T03:03:46-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2018/08/11/gradle-fundamentals-part-2</id>
    <content type="html"><![CDATA[<p>This post corresponds to &ldquo;Enough Groovy to Get By&rdquo; section of <a href="https://www.safaribooksonline.com/videos/gradle-fundamentals/9781491937266">this course</a>.</p>

<!--more-->


<h3>Static vs Dynamic Typing</h3>

<p><a href="https://github.com/tdongsi/groovy/blob/develop/learn/src/my/safari/groovy/basic/Hello.groovy">Code</a>.</p>

<h3>POGOs</h3>

<p><a href="https://github.com/tdongsi/groovy/blob/develop/learn/src/my/safari/groovy/basic/Pogo.groovy">Code</a>.</p>

<p><code>@Canonical</code> is equivalent to the following <code>@ToString</code>, <code>@EqualsAndHashCode</code>, and <code>@TupleConstructor</code> combined.</p>

<h3>Collections and Closures</h3>

<ul>
<li><a href="https://github.com/tdongsi/groovy/blob/develop/learn/src/my/safari/groovy/basic/Collection.groovy">Collection</a>.</li>
<li><a href="https://github.com/tdongsi/groovy/blob/develop/learn/src/my/safari/groovy/basic/Closures.groovy">Closure</a>.</li>
</ul>


<h3>Google Geocoder sample</h3>

<p><a href="https://github.com/tdongsi/groovy/blob/develop/learn/src/my/safari/groovy/basic/Geocode.groovy">Code</a>.</p>

<pre><code class="groovy Geocoding example">String XML_BASE = 'https://maps.googleapis.com/maps/api/geocode/xml?'
List address = ['2700 Coast Ave', 'Mountain View', 'CA']

String encoded = address.collect {
    URLEncoder.encode(it, 'UTF-8')
}.join(',')

String queryString = "address=$encoded"
String url = "$XML_BASE$queryString"
// println url.toURL().text

def root = new XmlSlurper().parse(url)
def loc = root.result[0].geometry.location // Navigate DOM using dot
println "Coordinates: ${loc.lat}, ${loc.lng}"
</code></pre>

<pre><code class="groovy ICNDB example">import groovy.json.JsonSlurper

String JSON_BASE = 'http://api.icndb.com/jokes/random?'
// Only the POTUS can claim such hyperbole.
def params = [limitTo:'[nerdy]', firstName: 'Donald', lastName: 'Trump']
def qs = params.collect {k,v -&gt; "$k=$v"}.join('&amp;')
String jsonTxt = "$JSON_BASE$qs".toURL().text
// println jsonTxt
def json = new JsonSlurper().parseText(jsonTxt)
println json.value.joke

// Demo
String HOMEPAGE = 'http://oreilly.com'
println HOMEPAGE.toURL().text.readLines() *. size()
// println HOMEPAGE.toURL().text
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy Fundamentals: Part 5: Demos]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-5/"/>
    <updated>2017-12-08T17:17:20-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-5</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy Fundamentals: Part 4: Closures & Operators]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-4/"/>
    <updated>2017-12-08T17:17:09-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-4</id>
    <content type="html"><![CDATA[<p>This post corresponds to &ldquo;Basic Closures&rdquo; and &ldquo;Misc Operators&rdquo; sections of <a href="https://www.safaribooksonline.com/library/view/groovy-programming-fundamentals/9781491926253/">this course</a>.</p>

<!--more-->


<h3>Closures</h3>

<pre><code class="groovy Iterating list with closure">List nums = [9,6,7,5,8,6,4,2,3]
for (int num: nums) {
    println num
}

// Pro: not much. You don't have to specify type
for (num in nums) {
    // println num
}

// Idiomatic in Groovy.
nums.each { num -&gt;
    println num
}
nums.eachWithIndex { num, idx -&gt;
    println "nums[$idx] == $num"
}
</code></pre>

<pre><code class="groovy Iterating map with closure">Map m = [a:1, b:2, c:2]

// Java idiom
for (String key : m.keySet()) {
    ...
}

// Groovy idiom
// One parameter closure gives Map.Entry
m.each { e -&gt;
    println "${e.key} ${e.value}"
}
// Two parameter closure gives key, value
m.each { k, v -&gt;

}
</code></pre>

<pre><code class="groovy collect method">println nums.collect { it * 2 } // map
    .findAll { it % 3 == 0 }    // filter
    .sum()                      // reduce

def factor = 2
println nums.collect { it*factor }
// Spread dot operator
println nums *. multiply(2)
// Demo
String HOMEPAGE = 'http://oreilly.com'
println HOMEPAGE.toURL().text.readLines() *. size()
</code></pre>

<h3>Geocoding demo: XML query and parsing</h3>

<pre><code class="groovy">String XML_BASE = 'https://maps.googleapis.com/maps/api/geocode/xml?'
List address = ['2700 Coast Ave', 'Mountain View', 'CA']

String encoded = address.collect {
    URLEncoder.encode(it, 'UTF-8')
}.join(',')

String queryString = "address=$encoded"
String url = "$XML_BASE$queryString"
// println url.toURL().text

def root = new XmlSlurper().parse(url)
def loc = root.result[0].geometry.location // Navigate DOM using dot
println "Coordinates: ${loc.lat}, ${loc.lng}"
</code></pre>

<h3>ICNDB demo: JSON query and parsing</h3>

<pre><code class="groovy">String JSON_BASE = 'http://api.icndb.com/jokes/random?'
// Only the POTUS can claim such hyperbole.
def params = [limitTo:'[nerdy]', firstName: 'Donald', lastName: 'Trump']
def qs = params.collect {k,v -&gt; "$k=$v"}.join('&amp;')
String jsonTxt = "$JSON_BASE$qs".toURL().text
// println jsonTxt
def json = new JsonSlurper().parseText(jsonTxt)
println json.value.joke
</code></pre>

<h3>Operators</h3>

<pre><code class="groovy Misc operators in Groovy">// Safe navigation ?.
class Department {
    Manager boss
}
class Manager {
    String name
}
Department d1 = new Department(boss: new Manager(name: 'ABC'))
Department d2 = new Department()
println d1 ?. boss ?. name
// Standard d2.boss.name will throw NPE.
println d2 ?. boss ?. name

// Spaceship operator: Comparable interface
println 1 &lt;=&gt; 2

// See Groovy truth
// Elvis operator
String input
String greet = 'Hello ' + (input ?: 'World')
println greet
</code></pre>

<p>Groovy truth:</p>

<ul>
<li>non-zero numbers</li>
<li>non-null references</li>
<li>non-empty strings</li>
<li>non-empty collections</li>
<li>regex with a match</li>
<li>boolean true</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy Fundamentals: Part 3: POGOs & Collections]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-3/"/>
    <updated>2017-12-08T17:17:05-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-3</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy Fundamentals: Part 2: Numbers & Strings]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-2/"/>
    <updated>2017-12-08T17:16:49-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-2</id>
    <content type="html"><![CDATA[<pre><code class="groovy Speak Groovy with Java accent">def void healthcheck(String endpoint, int timeoutInSeconds = 120, int expectedCode = 200) {
    println "Doing health check of " + endpoint

    int i = 0
    int code = 0
    while (code != expectedCode) {
        try {
            URL url = new URL(endpoint)
            HttpURLConnection connection = (HttpURLConnection) url.openConnection()
            connection.setRequestMethod("GET")
            connection.connect()
            code = connection.getResponseCode()
            println "Response code:" + code
        } catch (Exception e) {
            println e
        }

        Thread.sleep(1000)

        i += 1
        if (i == timeoutInSeconds) {
            throw new RuntimeException("Healthcheck of " + endpoint + " failed.")
        }
    }
}

def out = healthcheck("https://my.service.com/")
</code></pre>
]]></content>
  </entry>
  
</feed>
