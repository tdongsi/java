<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Todo | Personal Interview Notes]]></title>
  <link href="http://tdongsi.github.io/java/blog/categories/todo/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/java/"/>
  <updated>2017-06-19T14:32:26-07:00</updated>
  <id>http://tdongsi.github.io/java/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Groovy in Jenkinsfile]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/06/17/groovy-in-jenkinsfile/"/>
    <updated>2017-06-17T12:08:15-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/06/17/groovy-in-jenkinsfile</id>
    <content type="html"><![CDATA[<p>Groovy is supported in Jenkinsfile for quick scripting.
However, lots of features in the Groovy language is not supported and simple works in Groovy can be really tricky in Jenkinsfile.</p>

<!--more-->


<h3>Different ways to process XML file</h3>

<p>In summary, if it is possible, use another script language (e.g., Python) for <strong>file manipulation</strong> in Jenkinsfile.
It is time consuming to navigate all tricky stuffs of Groovy implementaiton in Jenkins:</p>

<ul>
<li>In-process Script Approval: you have to approve every single class and method <em>one by one</em>.</li>
<li>Some features of Groovy is not supported and it takes time to figure out what is not supported and how to work around. When in doubt, use <code>@NonCPS</code>.</li>
</ul>


<h4>Groovy method in Jenkinsfile</h4>

<pre><code class="groovy Jenkinsfile">import groovy.xml.StreamingMarkupBuilder
import groovy.xml.XmlUtil

def settingsFile = 'temp.xml'

@NonCPS
def xmlTransform(txt, username, password) {

    def xmlRoot = new XmlSlurper(false, false).parseText(txt)
    echo 'Start tranforming XML'
    xmlRoot.servers.server.each { node -&gt;
       node.username = username
       node.password = password
    }

    // TRICKY: FileWriter does NOT work
    def outWriter = new StringWriter()
    XmlUtil.serialize( xmlRoot, outWriter )
    return outWriter.toString()
}

pipeline {
   agent { node { label 'test-agent' } }
   stages {
       stage("compile") {
           steps {
               checkout scm
               withCredentials([
                 [$class: 'StringBinding', credentialsId: 'nexusUsername', variable: 'nexusUsername'],
                 [$class: 'StringBinding', credentialsId: 'nexusPassword', variable: 'nexusPassword']
               ]) {
                   script {
                       def xmlTemplate = readFile( 'jenkins/settings.xml' )
                       def xmlFile = xmlTransform(xmlTemplate, env.nexusUsername, env.nexusPassword)

                       // TRICKY: FileWriter does NOT work in xmlTransform
                       def mCommand = "cat &gt;${settingsFile} &lt;&lt;EOF"
                       mCommand += "\n${xmlFile}\nEOF"
                       sh mCommand
                       sh "ls -al ${settingsFile}"

                       sh "mvn -B -s ${settingsFile} clean compile"
                   }
               }
           }
           post {
           failure {
               echo "Sending email for compile failed (TBD)"
            }
           }
       }
   }
}
</code></pre>

<p>Some notes:</p>

<ul>
<li><code>import</code> statements must be at the top, right after the shebang and before anything else.</li>
<li>The Groovy methods must be annotated with <code>@NonCPS</code> or Jenkins will report the error &ldquo;java.io.NotSerializableException&rdquo;.</li>
<li>The Groovy methods can not be defined inside a <code>step</code> block. It must be defined at the top.</li>
<li><code>@NonCPS</code> is required since the Groovy method uses several non-serializble objects.</li>
</ul>


<h4>Groovy method in separate script</h4>

<pre><code class="groovy Jenkinsfile">def myScript

pipeline {
   agent { node { label 'test-agent' } }
   stages {
       stage("compile") {
           steps {
               checkout scm
               withCredentials([
                 [$class: 'StringBinding', credentialsId: 'nexusUsername', variable: 'nexusUsername'],
                 [$class: 'StringBinding', credentialsId: 'nexusPassword', variable: 'nexusPassword']
               ]) {
                   script {
                       myScript = load 'jenkins/xml.groovy'
                       def xmlTemplate = readFile( 'jenkins/settings.xml' )
                       String xmlFile = myScript.transformXml(xmlTemplate, env.nexusUsername, env.nexusPassword)

                       String myPath = 'temp.xml'
                       def mCommand = "cat &gt;${myPath} &lt;&lt;EOF"
                       mCommand += "\n${xmlFile}\nEOF"
                       sh mCommand

                       sh "mvn -B clean compile -s ${myPath}"

                       sh "rm ${myPath}"
                   }
               }
           }
           post {
           failure {
               echo "Sending email for compile failed (TBD)"
            }
           }
       }
   }
}
</code></pre>

<pre><code class="groovy xml.groovy">import groovy.xml.StreamingMarkupBuilder
import groovy.xml.XmlUtil

@NonCPS
def transformXml(String xmlContent, String username, String password) {
  def xml = new XmlSlurper(false, false).parseText(xmlContent)

  echo 'Start tranforming XML'
  xml.servers.server.each { node -&gt;
    node.username = username
    node.password = password
  }

  def outWriter = new StringWriter()
  XmlUtil.serialize( xml, outWriter )
  return outWriter.toString()
}

return this
</code></pre>

<h4>Groovy method in shared library</h4>

<p>TODO: For Declarative Pipeline and Scripted Pipeline.</p>

<p><code>groovy Jenkinsfile
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XML Processing in Groovy]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/06/14/xml-processing-in-groovy/"/>
    <updated>2017-06-14T09:57:51-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/06/14/xml-processing-in-groovy</id>
    <content type="html"><![CDATA[<p>This post discusses XML processing in Groovy.</p>

<!--more-->


<h3>XmlParser vs XmlSlurper</h3>

<p>TODO</p>

<h3>Code recipes</h3>

<p>The input XML file is based on typical Maven &ldquo;settings.xml&rdquo; file.</p>

<p><strong>Recipe 1</strong>: Read, transform, and write to file. Based on <a href="https://stackoverflow.com/questions/2245641/load-modify-and-write-an-xml-document-in-groovy">this</a>.</p>

<pre><code class="groovy XML transform to file">import groovy.xml.StreamingMarkupBuilder
import groovy.xml.XmlUtil

def transformXml(String filePath, String username, String password) {
  String TMP_PATH = '/tmp/temp.xml'

  def inFile = new File( filePath )
  def outFile = new File( TMP_PATH )
  def xml = new XmlSlurper(false, false).parse(inFile)

  xml.servers.server.each { node -&gt;
    node.username = username
    node.password = password
  }

  def outBuilder = new StreamingMarkupBuilder()
  def outWriter = outFile.newWriter()

  // Option 1: Write XML to one line
  outWriter &lt;&lt; outBuilder.bind{ mkp.yield xml }
  // Option 2: Pretty print XML
  XmlUtil.serialize( xml, outWriter )

  return TMP_PATH
}
</code></pre>

<p>For overwriting the original file (based on <a href="https://stackoverflow.com/questions/18385062/writing-updated-xml-to-originally-parsed-file">this</a>):</p>

<pre><code class="groovy Write the transformed XML to original file">inFile.withWriter { outWriter -&gt;
    XmlUtil.serialize( new StreamingMarkupBuilder().bind{ mkp.yield xml }, outWriter )
}
</code></pre>

<p><strong>Recipe 2</strong>: Read, transform, and write to string.</p>

<pre><code class="groovy XML transform to String">import groovy.xml.XmlUtil

@NonCPS
def transformXml(String xmlContent, String username, String password) {
  def xml = new XmlSlurper(false, false).parseText(xmlContent)

  echo 'Start tranforming XML'
  xml.servers.server.each { node -&gt;
    node.username = username
    node.password = password
  }

  def outWriter = new StringWriter()
  XmlUtil.serialize( xml, outWriter )
  return outWriter.toString()
}
</code></pre>

<h3>Tips</h3>

<ul>
<li><code>XmlSlurper(false, false)</code> is used due to <a href="https://stackoverflow.com/questions/9197588/tag0-namespace-added-for-elements-in-default-namespace">this</a></li>
</ul>


<h3>References</h3>

<ul>
<li><a href="http://groovy-lang.org/processing-xml.html">Processing XML</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Quick-start for Groovy Programming Test]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/05/10/tutorial-quick-start-for-groovy-programming-test/"/>
    <updated>2017-05-10T00:07:18-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/05/10/tutorial-quick-start-for-groovy-programming-test</id>
    <content type="html"><![CDATA[<p>Eclipse &amp; Maven.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Common Interview Questions]]></title>
    <link href="http://tdongsi.github.io/java/blog/2016/09/09/common-interview-questions/"/>
    <updated>2016-09-09T00:50:08-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2016/09/09/common-interview-questions</id>
    <content type="html"><![CDATA[<p>Common interview questions that are specific to Java language.</p>

<!--more-->


<h3>Trivia Questions</h3>

<p>The full list is <a href="http://javarevisited.blogspot.sg/2015/10/133-java-interview-questions-answers-from-last-5-years.html">here</a>.</p>

<ol>
<li>Why constructors dont return any value. What problem did Java face in returning a value from Constructors?

<ul>
<li>So the reason the constructor doesn&rsquo;t return a value is because it&rsquo;s not called directly by your code, it&rsquo;s called by the memory allocation and object initialization code in the runtime.
Its return value (if it actually has one when compiled down to machine code) is opaque to the user - therefore, you can&rsquo;t specify it.</li>
</ul>
</li>
<li>Difference between abstract class and interface?

<ul>
<li>The question is lame. However, it comes up so often that you have to get ready for it.
Failing to give the expected answer can make you fail in the phone screen.</li>
<li>Answer <a href="http://javarevisited.blogspot.com/2013/05/difference-between-abstract-class-vs-interface-java-when-prefer-over-design-oops.html">here</a>.</li>
</ul>
</li>
<li>What is string immutable? What is intern() method on String?</li>
<li>What is the difference between StringBuilder vs. StringBuffer? Vector and ArrayList?</li>
<li>Generics: is there any way to get the generic type in your program? (Answer: no due to type erasure)</li>
<li>Design pattern: what do you know? Which one do you use most? In what situation?</li>
<li>What is the <code>finalize()</code> method?

<ul>
<li>Finalizers are unpredictable, often dangerous, and generally unnecessary.
Only use it when you need a safety-net, a reminder to call explicit termination method OR you work with native methods and objects.</li>
</ul>
</li>
</ol>


<p>Java:</p>

<ul>
<li>Methods of Object class (relation between hashCode() and equals(), give a simple algorithm to do hashCode(), when to use finalize()). See chapter in Effective Java (see wiki)

<ul>
<li>equals() compare the hash code that is generated by hashCode(), usually different for different instances. If the two different objects, such as String, have equals() as true, the equals() function must be overridden.</li>
<li>Simple hashCode: use the time of creation.</li>
</ul>
</li>
<li>Collections framework (when to use Map, List, Set; implementations of those). See wiki</li>
<li>Some details about frequently used classes: String class (e.g., what intern() method does), StringBuilder vs. StringBuffer</li>
<li>Java I/O: using Scanner, printf, InputStream</li>
<li>Java generics: erasure, Java generics vs. C++ template</li>
<li>It&rsquo;s very impressive if you know about Java concurrency: e.g., what is volatile? when to use it? synchronize?</li>
</ul>


<p>20) From this book, which methods are invoked? Classes are extended as Dessert &lt;- Cake &lt;- ChocolateCake, and Dessert &lt;- Scone &lt;- ButteredScone.</p>

<pre><code class="java">// Overloaded method forms
void more( Dessert d, Scone s ) { }
void more( Cake c, Dessert d ) { }
void more( Chocolatecake cc, Scone s ) { }
void more( Dessert... desserts ) { }

// Method invocations
more( dessertRef, sconeRef ) { }
more( chocolateCakeRef, dessertRef ) { }
more( chocolateCakeRef, butteredSconeRef ) { }
more( cakeRef, sconeRef ) { }
more( sconeRef, cakeRef ) { }
</code></pre>

<h3>Singleton question</h3>

<p>This question seems to be common because it shows that if a candidate knows &ldquo;design pattern&rdquo;, best practices, concurrency, and enum (one of newer Java features).</p>

<p>TODO: Enum</p>

<p>TODO: Standard singleton with lazy initlaization and private constructor.</p>

<p>TODO: Is it thread-safe?</p>

<p>TODO: How to make it thread-safe?</p>

<p>TODO: How to make it more performant?</p>

<p>Double-checked locking idiom for Singleton.
<a href="http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html">http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</a></p>

<pre><code class="java Double-checked locking idiom">// Works with acquire/release semantics for volatile
// Broken under current semantics for volatile
  class Foo {
        private volatile Helper helper = null;
        public Helper getHelper() {
            if (helper == null) {
                synchronized(this) {
                    if (helper == null)
                        helper = new Helper();
                }
            }
            return helper;
        }
    }
</code></pre>
]]></content>
  </entry>
  
</feed>
