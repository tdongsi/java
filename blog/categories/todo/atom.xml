<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Todo | Personal Interview Notes]]></title>
  <link href="http://tdongsi.github.io/java/blog/categories/todo/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/java/"/>
  <updated>2016-09-03T02:08:09-07:00</updated>
  <id>http://tdongsi.github.io/java/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Common Interview Questions]]></title>
    <link href="http://tdongsi.github.io/java/blog/2016/09/09/common-interview-questions/"/>
    <updated>2016-09-09T00:50:08-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2016/09/09/common-interview-questions</id>
    <content type="html"><![CDATA[<p>Common interview questions that are specific to Java language.</p>

<!--more-->


<h3>Questions</h3>

<p>TODO: Reorganize this section</p>

<p>Why constructors dont return any value. What problem did Java face in returning a value from Constructors ?
<a href="http://stackoverflow.com/questions/1788312/why-do-constructors-not-return-values">http://stackoverflow.com/questions/1788312/why-do-constructors-not-return-values</a>
So the reason the constructor doesn&rsquo;t return a value is because it&rsquo;s not called directly by your code, it&rsquo;s called by the memory allocation and object initialization code in the runtime. Its return value (if it actually has one when compiled down to machine code) is opaque to the user - therefore, you can&rsquo;t specify it.</p>

<p><a href="http://javarevisited.blogspot.sg/2011/04/top-20-core-java-interview-questions.html">http://javarevisited.blogspot.sg/2011/04/top-20-core-java-interview-questions.html</a></p>

<p>Difference between abstract class and interface?
<a href="http://javarevisited.blogspot.com/2013/05/difference-between-abstract-class-vs-interface-java-when-prefer-over-design-oops.html">http://javarevisited.blogspot.com/2013/05/difference-between-abstract-class-vs-interface-java-when-prefer-over-design-oops.html</a>
<a href="http://javarevisited.blogspot.com/2012/12/inversion-of-control-dependency-injection-design-pattern-spring-example-tutorial.html">http://javarevisited.blogspot.com/2012/12/inversion-of-control-dependency-injection-design-pattern-spring-example-tutorial.html</a></p>

<p>Java:</p>

<ul>
<li>Methods of Object class (relation between hashCode() and equals(), give a simple algorithm to do hashCode(), when to use finalize()). See chapter in Effective Java (see wiki)

<ul>
<li>equals() compare the hash code that is generated by hashCode(), usually different for different instances. If the two different objects, such as String, have equals() as true, the equals() function must be overridden.</li>
<li>Simple hashCode: use the time of creation.</li>
<li>Finalizers are unpredictable, often dangerous, and generally unnecessary. Only use it when you need a safety-net, a reminder to call explicit termination method OR you work with native methods and objects.</li>
</ul>
</li>
<li>Collections framework (when to use Map, List, Set; implementations of those). See wiki</li>
<li>Some details about frequently used classes: String class (e.g., what intern() method does), StringBuilder vs. StringBuffer</li>
<li>Java I/O: using Scanner, printf, InputStream</li>
<li>Java generics: erasure, Java generics vs. C++ template</li>
<li>It&rsquo;s very impressive if you know about Java concurrency: e.g., what is volatile? when to use it? synchronize?</li>
</ul>


<p>20) From this book, which methods are invoked? Classes are extended as Dessert &lt;- Cake &lt;- ChocolateCake, and Dessert &lt;- Scone &lt;- ButteredScone.</p>

<pre><code class="java">// Overloaded method forms
void more( Dessert d, Scone s ) { }
void more( Cake c, Dessert d ) { }
void more( Chocolatecake cc, Scone s ) { }
void more( Dessert... desserts ) { }

// Method invocations
more( dessertRef, sconeRef ) { }
more( chocolateCakeRef, dessertRef ) { }
more( chocolateCakeRef, butteredSconeRef ) { }
more( cakeRef, sconeRef ) { }
more( sconeRef, cakeRef ) { }
</code></pre>

<ul>
<li>What is string immutable? What is intern() method on String?</li>
<li>Given a problem, how do you design class? What class do you have?</li>
<li>Collections: List, Map</li>
<li>StringBuilder vs. StringBuffer</li>
<li>Generics: is there any way to get the generic type in your program? (Answer: no due to type erasure)</li>
<li>Design pattern: what do you know? Which one do you use most? In what situation?</li>
</ul>


<h3>Answer</h3>

<h4>Singleton question</h4>

<p>This question seems to be common because it shows if a candidate knows &ldquo;design pattern&rdquo;, best practices, concurrency, and enum (one of newer Java features).</p>

<p>TODO: Enum</p>

<p>TODO: Standard singleton with lazy initlaization and private constructor.</p>

<p>TODO: Is it thread-safe?</p>

<p>TODO: How to make it thread-safe?</p>

<p>TODO: How to make it more performant?</p>

<p>Double-checked locking idiom for Singleton.
<a href="http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html">http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</a></p>

<pre><code class="java Double-checked locking idiom">// Works with acquire/release semantics for volatile
// Broken under current semantics for volatile
  class Foo {
        private volatile Helper helper = null;
        public Helper getHelper() {
            if (helper == null) {
                synchronized(this) {
                    if (helper == null)
                        helper = new Helper();
                }
            }
            return helper;
        }
    }
</code></pre>
]]></content>
  </entry>
  
</feed>
