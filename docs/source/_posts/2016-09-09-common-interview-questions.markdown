---
layout: post
title: "Common interview questions"
date: 2016-09-09 00:50:08 -0700
comments: true
categories: 
- Java
- Questions
- TODO
---

Common interview questions that are specific to Java language.

<!--more-->

### Trivia Questions

The full list is [here](http://javarevisited.blogspot.sg/2015/10/133-java-interview-questions-answers-from-last-5-years.html).

1. Why constructors dont return any value. What problem did Java face in returning a value from Constructors?
    * So the reason the constructor doesn't return a value is because it's not called directly by your code, it's called by the memory allocation and object initialization code in the runtime. 
      Its return value (if it actually has one when compiled down to machine code) is opaque to the user - therefore, you can't specify it.
2. Difference between abstract class and interface? 
    * The question is lame. However, it comes up so often that you have to get ready for it.
      Failing to give the expected answer can make you fail in the phone screen.
    * Answer [here](http://javarevisited.blogspot.com/2013/05/difference-between-abstract-class-vs-interface-java-when-prefer-over-design-oops.html).
3. What is string immutable? What is intern() method on String?
4. What is the difference between StringBuilder vs. StringBuffer? Vector and ArrayList?
5. Generics: is there any way to get the generic type in your program? (Answer: no due to type erasure)
6. Design pattern: what do you know? Which one do you use most? In what situation?
7. What is the `finalize()` method?
    * Finalizers are unpredictable, often dangerous, and generally unnecessary. 
      Only use it when you need a safety-net, a reminder to call explicit termination method OR you work with native methods and objects.

Java:

* Methods of Object class (relation between hashCode() and equals(), give a simple algorithm to do hashCode(), when to use finalize()). See chapter in Effective Java (see wiki)
    * equals() compare the hash code that is generated by hashCode(), usually different for different instances. If the two different objects, such as String, have equals() as true, the equals() function must be overridden.
    * Simple hashCode: use the time of creation.
* Collections framework (when to use Map, List, Set; implementations of those). See wiki
* Some details about frequently used classes: String class (e.g., what intern() method does), StringBuilder vs. StringBuffer
* Java I/O: using Scanner, printf, InputStream
* Java generics: erasure, Java generics vs. C++ template
* It's very impressive if you know about Java concurrency: e.g., what is volatile? when to use it? synchronize?


20) From this book, which methods are invoked? Classes are extended as Dessert <- Cake <- ChocolateCake, and Dessert <- Scone <- ButteredScone.

``` java
// Overloaded method forms
void more( Dessert d, Scone s ) { }
void more( Cake c, Dessert d ) { }
void more( Chocolatecake cc, Scone s ) { }
void more( Dessert... desserts ) { }

// Method invocations
more( dessertRef, sconeRef ) { }
more( chocolateCakeRef, dessertRef ) { }
more( chocolateCakeRef, butteredSconeRef ) { }
more( cakeRef, sconeRef ) { }
more( sconeRef, cakeRef ) { }
```

### Singleton question

This question seems to be common because it shows that if a candidate knows "design pattern", best practices, concurrency, and enum (one of newer Java features).

TODO: Enum

TODO: Standard singleton with lazy initlaization and private constructor.

TODO: Is it thread-safe?

TODO: How to make it thread-safe?

TODO: How to make it more performant?

Double-checked locking idiom for Singleton.
http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html

``` java Double-checked locking idiom
// Works with acquire/release semantics for volatile
// Broken under current semantics for volatile
  class Foo {
        private volatile Helper helper = null;
        public Helper getHelper() {
            if (helper == null) {
                synchronized(this) {
                    if (helper == null)
                        helper = new Helper();
                }
            }
            return helper;
        }
    }
```
