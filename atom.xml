<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Personal Interview Notes]]></title>
  <link href="http://tdongsi.github.io/java/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/java/"/>
  <updated>2019-07-07T19:05:30-07:00</updated>
  <id>http://tdongsi.github.io/java/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gradle Fundamentals: Tasks]]></title>
    <link href="http://tdongsi.github.io/java/blog/2019/07/07/gradle-fundamentals-tasks/"/>
    <updated>2019-07-07T18:56:56-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2019/07/07/gradle-fundamentals-tasks</id>
    <content type="html"><![CDATA[<p>This post corresponds to Section 4: &ldquo;Custom Tasks&rdquo; of <a href="https://learning.oreilly.com/videos/gradle-fundamentals/9781491937266/9781491937266-video224139">this course</a>.</p>

<!--more-->


<h3>Identifying, Defining, and Executing Tasks</h3>

<p>Define <a href="https://docs.gradle.org/3.5/dsl/org.gradle.api.Task.html">a task</a>:</p>

<figure class='code'><figcaption><span>Define a task</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">task</span> <span class="n">myTask</span>
</span><span class='line'><span class="n">task</span> <span class="n">myTask</span> <span class="o">{</span> <span class="n">configure</span> <span class="n">closure</span> <span class="o">}</span>
</span><span class='line'><span class="n">task</span> <span class="nf">myTask</span><span class="o">(</span><span class="nl">type:</span> <span class="n">SomeType</span><span class="o">)</span>
</span><span class='line'><span class="n">task</span> <span class="nf">myTask</span><span class="o">(</span><span class="nl">type:</span> <span class="n">SomeType</span><span class="o">)</span> <span class="o">{</span> <span class="n">configure</span> <span class="n">closure</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>List a task:</p>

<figure class='code'><figcaption><span>List a custom task</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gradle help --task hello
</span><span class='line'>:help
</span><span class='line'>Detailed task information for hello
</span><span class='line'>
</span><span class='line'>Path
</span><span class='line'>     :hello
</span><span class='line'>
</span><span class='line'>Type
</span><span class='line'>     Task (org.gradle.api.Task)
</span><span class='line'>
</span><span class='line'>Description
</span><span class='line'>     Hello
</span><span class='line'>
</span><span class='line'>Group
</span><span class='line'>     -
</span><span class='line'>
</span><span class='line'>BUILD SUCCESSFUL</span></code></pre></td></tr></table></div></figure>


<h3>Conditional Task Execution</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle Fundamentals: Part 3]]></title>
    <link href="http://tdongsi.github.io/java/blog/2018/08/11/gradle-fundamentals-part-3/"/>
    <updated>2018-08-11T03:04:31-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2018/08/11/gradle-fundamentals-part-3</id>
    <content type="html"><![CDATA[<p>This post corresponds to &ldquo;Basic Project Builds&rdquo; section of <a href="https://www.safaribooksonline.com/videos/gradle-fundamentals/9781491937266">this course</a>.</p>

<!--more-->


<h3>Basics</h3>

<p>Some tasks are simple.
Note that some tasks are derived from the following rules:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gradle tasks
</span><span class='line'>:tasks
</span><span class='line'>...
</span><span class='line'>Rules
</span><span class='line'>-----
</span><span class='line'>Pattern: clean&lt;TaskName&gt;: Cleans the output files of a task.
</span><span class='line'>Pattern: build&lt;ConfigurationName&gt;: Assembles the artifacts of a configuration.
</span><span class='line'>Pattern: upload&lt;ConfigurationName&gt;: Assembles and uploads the artifacts belonging to a configuration.</span></code></pre></td></tr></table></div></figure>


<h3>Java Projects</h3>

<p>Output of <code>gradle build</code> for simple Java build file.</p>

<figure class='code'><figcaption><span>Java plugin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; cat build.gradle
</span><span class='line'>apply plugin: 'java'
</span><span class='line'>
</span><span class='line'># Same effect
</span><span class='line'>$ cat build.gradle
</span><span class='line'>apply(plugin: 'java')
</span><span class='line'>
</span><span class='line'>&gt; gradle build
</span><span class='line'>:compileJava NO-SOURCE
</span><span class='line'>:processResources NO-SOURCE
</span><span class='line'>:classes UP-TO-DATE
</span><span class='line'>:jar
</span><span class='line'>:assemble
</span><span class='line'>:compileTestJava NO-SOURCE
</span><span class='line'>:processTestResources NO-SOURCE
</span><span class='line'>:testClasses UP-TO-DATE
</span><span class='line'>:test NO-SOURCE
</span><span class='line'>:check UP-TO-DATE
</span><span class='line'>:build
</span><span class='line'>
</span><span class='line'>BUILD SUCCESSFUL
</span><span class='line'>
</span><span class='line'>Total time: 0.786 secs</span></code></pre></td></tr></table></div></figure>


<p>Gradle&rsquo;s Build Init plugin is similar to Maven&rsquo;s <code>archetype</code> tasks.
It can be used to setup a Gradle project.</p>

<figure class='code'><figcaption><span>Build Init plugin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; gradle init --type java-library
</span><span class='line'>:wrapper
</span><span class='line'>:init
</span><span class='line'>
</span><span class='line'>BUILD SUCCESSFUL
</span><span class='line'>
</span><span class='line'>Total time: 0.967 secs
</span><span class='line'>&gt; ls
</span><span class='line'>build           build.gradle    gradle          gradlew         gradlew.bat     settings.gradle src\
</span><span class='line'>
</span><span class='line'>&gt; tree src
</span><span class='line'>src
</span><span class='line'>├── main
</span><span class='line'>│   └── java
</span><span class='line'>│       └── Library.java
</span><span class='line'>└── test
</span><span class='line'>    └── java
</span><span class='line'>        └── LibraryTest.java
</span><span class='line'>
</span><span class='line'>4 directories, 2 files
</span><span class='line'>
</span><span class='line'>&gt; gradle build
</span><span class='line'>:compileJava
</span><span class='line'>Download https://jcenter.bintray.com/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.pom
</span><span class='line'>Download https://jcenter.bintray.com/com/google/guava/guava/21.0/guava-21.0.pom
</span><span class='line'>Download https://jcenter.bintray.com/com/google/guava/guava-parent/21.0/guava-parent-21.0.pom
</span><span class='line'>Download https://jcenter.bintray.com/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar
</span><span class='line'>Download https://jcenter.bintray.com/com/google/guava/guava/21.0/guava-21.0.jar
</span><span class='line'>:processResources NO-SOURCE
</span><span class='line'>:classes
</span><span class='line'>:jar
</span><span class='line'>:assemble
</span><span class='line'>:compileTestJava
</span><span class='line'>:processTestResources NO-SOURCE
</span><span class='line'>:testClasses
</span><span class='line'>:test
</span><span class='line'>:check
</span><span class='line'>:build
</span><span class='line'>
</span><span class='line'>BUILD SUCCESSFUL
</span><span class='line'>
</span><span class='line'>Total time: 6.218 secs
</span><span class='line'>
</span><span class='line'>&gt; tree build
</span><span class='line'>build
</span><span class='line'>├── classes
</span><span class='line'>│   ├── main
</span><span class='line'>│   │   └── Library.class
</span><span class='line'>│   └── test
</span><span class='line'>│       └── LibraryTest.class
</span><span class='line'>├── libs
</span><span class='line'>│   └── workspace.jar
</span><span class='line'>├── reports
</span><span class='line'>│   └── tests
</span><span class='line'>│       └── test
</span><span class='line'>│           ├── classes
</span><span class='line'>│           │   └── LibraryTest.html
</span><span class='line'>│           ├── css
</span><span class='line'>│           │   ├── base-style.css
</span><span class='line'>│           │   └── style.css
</span><span class='line'>│           ├── index.html
</span><span class='line'>│           ├── js
</span><span class='line'>│           │   └── report.js
</span><span class='line'>│           └── packages
</span><span class='line'>│               └── default-package.html
</span><span class='line'>├── test-results
</span><span class='line'>│   └── test
</span><span class='line'>│       ├── TEST-LibraryTest.xml
</span><span class='line'>│       └── binary
</span><span class='line'>│           ├── output.bin
</span><span class='line'>│           ├── output.bin.idx
</span><span class='line'>│           └── results.bin
</span><span class='line'>└── tmp
</span><span class='line'>    ├── compileJava
</span><span class='line'>    ├── compileTestJava
</span><span class='line'>    └── jar
</span><span class='line'>        └── MANIFEST.MF
</span><span class='line'>
</span><span class='line'>18 directories, 14 files</span></code></pre></td></tr></table></div></figure>


<h4>Project properties</h4>

<p>The command <code>gradle properties</code> will list all the pre-defined properties of the top Project instance.
Some of the interesting properties of the Project class are:</p>

<ul>
<li><code>assemble</code>, <code>check</code>, <code>jar</code>, etc.: corresponding to defined tasks.</li>
<li><code>version</code>, <code>sourceCompatibility</code>, <code>targetCompatibility</code>: commonly overridden properties.</li>
<li><code>ext</code>: Extra properties.</li>
</ul>


<figure class='code'><figcaption><span>Gradle project properties</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; gradle properties
</span><span class='line'>:properties
</span><span class='line'>
</span><span class='line'>------------------------------------------------------------
</span><span class='line'>Root project
</span><span class='line'>------------------------------------------------------------
</span><span class='line'>
</span><span class='line'>allprojects: [root project 'workspace']
</span><span class='line'>ant: org.gradle.api.internal.project.DefaultAntBuilder@42572e90
</span><span class='line'>antBuilderFactory: org.gradle.api.internal.project.DefaultAntBuilderFactory@39495f8
</span><span class='line'>archivesBaseName: workspace
</span><span class='line'>...
</span><span class='line'>version: unspecified
</span><span class='line'>
</span><span class='line'>BUILD SUCCESSFUL
</span><span class='line'>
</span><span class='line'>Total time: 0.779 secs</span></code></pre></td></tr></table></div></figure>


<p>For example, the following <code>build.gradle</code> will overwrite some of the base properties:</p>

<figure class='code'><figcaption><span>Gradle project properties</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat build.gradle
</span><span class='line'>apply plugin: 'java'
</span><span class='line'>version = '1.0'
</span><span class='line'>
</span><span class='line'>&gt; gradle properties
</span><span class='line'>:properties
</span><span class='line'>
</span><span class='line'>------------------------------------------------------------
</span><span class='line'>Root project
</span><span class='line'>------------------------------------------------------------
</span><span class='line'>...
</span><span class='line'>version: 1.0
</span><span class='line'>
</span><span class='line'>BUILD SUCCESSFUL
</span><span class='line'>
</span><span class='line'>Total time: 0.715 secs</span></code></pre></td></tr></table></div></figure>


<p>Reference:</p>

<ul>
<li><a href="https://docs.gradle.org/3.5/userguide/java_plugin.html">Java plugin</a></li>
<li><a href="https://docs.gradle.org/3.5/userguide/build_init_plugin.html">Build init plugin</a></li>
</ul>


<h3>Groovy Projects</h3>

<figure class='code'><figcaption><span>Quickstart Groovy project</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">plugins</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">id</span> <span class="s1">&#39;groovy&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">implementation</span> <span class="s1">&#39;org.codehaus.groovy:groovy-all:2.4.15&#39;</span>
</span><span class='line'>    <span class="n">testImplementation</span> <span class="s1">&#39;junit:junit:4.12&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Build execution</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gradle build
</span><span class='line'>:compileJava NO-SOURCE
</span><span class='line'>:compileGroovy NO-SOURCE
</span><span class='line'>:processResources NO-SOURCE
</span><span class='line'>:classes UP-TO-DATE
</span><span class='line'>:jar
</span><span class='line'>:assemble
</span><span class='line'>:compileTestJava NO-SOURCE
</span><span class='line'>:compileTestGroovy NO-SOURCE
</span><span class='line'>:processTestResources NO-SOURCE
</span><span class='line'>:testClasses UP-TO-DATE
</span><span class='line'>:test NO-SOURCE
</span><span class='line'>:check UP-TO-DATE
</span><span class='line'>:build
</span><span class='line'>
</span><span class='line'>BUILD SUCCESSFUL
</span><span class='line'>
</span><span class='line'>Total time: 0.736 secs</span></code></pre></td></tr></table></div></figure>


<p>Examples:</p>

<ul>
<li><a href="https://github.com/gradle/gradle/tree/master/subprojects/docs/src/samples/groovy/quickstart">quickstart</a></li>
<li><a href="https://github.com/gradle/gradle/blob/master/subprojects/docs/src/samples/groovy/mixedJavaAndGroovy">mixedJavaAndGroovy</a></li>
<li><a href="https://github.com/gradle/gradle/blob/master/subprojects/docs/src/samples/groovy/customizedLayout">customizedLayout</a></li>
</ul>


<p>Reference:</p>

<ul>
<li><a href="https://docs.gradle.org/3.5/userguide/groovy_plugin.html">Groovy plugin</a></li>
<li><a href="https://github.com/gradle/gradle/tree/v3.5.1/subprojects/docs/src/samples/groovy">Groovy Examples</a></li>
</ul>


<h3>DAG and Source Sets</h3>

<p>DAGs mentioned are the dependency graphs of tasks defined in Gradle Java and Groovy plugins.
For example, the tasks <code>check</code> and <code>assemble</code> must be executed before <code>build</code> task, as shown in <a href="https://docs.gradle.org/3.5/userguide/java_plugin.html">here</a>.</p>

<p>Source Sets are Gradle way to organize related source code and resources.
Using source sets can also enable you to customize your project layout (e.g., Jenkins global library project).</p>

<p>The <code>java</code> plugin adds two default source sets:</p>

<ul>
<li><code>main</code>: Contains the production source code of the project, which is compiled and assembled into a JAR.</li>
<li><code>test</code>: Contains your test source code, which is compiled and executed using <strong>JUnit</strong> or <strong>TestNG</strong>. These are typically unit tests, but you can include any test.</li>
</ul>


<p>For each source set, there are &ldquo;SourceSet tasks&rdquo; associated with it, as listed in <a href="https://docs.gradle.org/current/userguide/java_plugin.html#java_source_set_tasks">here</a>.
For example, the Java plugin adds the following tasks:</p>

<ul>
<li>compile<em>SourceSet</em>Java - JavaCompile</li>
<li>process<em>SourceSet</em>Resources - Copy</li>
<li><em>sourceSet</em>Classes — Task: Depends on: compile<em>SourceSet</em>Java, process<em>SourceSet</em>Resources</li>
</ul>


<p>For example, the default <code>test</code> source set has those SourceSet tasks defined accordingly as <code>testClasses</code> -> <code>compileTestJava</code>, <code>processTestResources</code>.
If you define another source set such as <code>integrationTest</code>, additional SourceSet tasks should be defined accordingly.</p>

<p>Java plugin assumes that the project layout follows Maven convention.
If you have a custom <em>sourceSet</em>, it should follow similar convention:</p>

<ul>
<li><code>src/sourceSet/java</code>: Java source for the source set named <em>sourceSet</em>.</li>
<li><code>src/sourceSet/resources</code>: Resources for the source set named <em>sourceSet</em>.</li>
</ul>


<p>Changing the project layout is done by configuring the <code>sourceSets</code> property.</p>

<figure class='code'><figcaption><span>Custom Java project layout</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">sourceSets</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">main</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">java</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;src/java&#39;</span><span class="o">]</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">resources</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;src/resources&#39;</span><span class="o">]</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>See <a href="https://docs.gradle.org/current/userguide/java_testing.html#sec:configuring_java_integration_tests">this</a> for example of adding a new source set <code>intTest</code> for integration tests.</p>

<h3>Project Properties and Dependencies</h3>

<p>Each <code>build.gradle</code> file is used to instantiate a <code>Project</code> object.
During its life cycle, that object will try to create a <code>Settings</code> instance for the build.
It will evaluate <code>settings.gradle</code> script to configure that <code>Settings</code> object (more about its life cycle at <a href="https://docs.gradle.org/3.5/dsl/org.gradle.api.Project.html">here</a>).</p>

<p>The documentation page has a list of default properties of <code>Project</code> class.
It should be noted that adding a plugin can add additional properties to <code>Project</code> class, as shown in the same page.
For example, <code>idea</code> plugin will add <code>idea</code> property for &ldquo;IdeaModel&rdquo;.</p>

<p>To declare a specific dependency for a configuration you can use the following syntax:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dependencies {
</span><span class='line'>    configurationName dependencyNotation1, dependencyNotation2, ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Examples of <em>configurationName</em>: &ldquo;compile&rdquo; and &ldquo;testCompile&rdquo; are the common ones, being deprecated with &ldquo;implementation&rdquo; and &ldquo;testImplementation&rdquo; being the replacements.
See <a href="https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_plugin_and_dependency_management">this</a> for relationship between different dependecy configurations.</p>

<figure class='code'><figcaption><span>Different way to specify dependencies</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">runtime</span> <span class="nl">group:</span> <span class="s1">&#39;org.springframework&#39;</span><span class="o">,</span> <span class="nl">name:</span> <span class="s1">&#39;spring-core&#39;</span><span class="o">,</span> <span class="nl">version:</span> <span class="s1">&#39;2.5&#39;</span>
</span><span class='line'>    <span class="n">runtime</span> <span class="s1">&#39;org.springframework:spring-core:2.5&#39;</span><span class="o">,</span>
</span><span class='line'>            <span class="s1">&#39;org.springframework:spring-aop:2.5&#39;</span>
</span><span class='line'>    <span class="n">runtime</span><span class="o">(</span>
</span><span class='line'>        <span class="o">[</span><span class="nl">group:</span> <span class="s1">&#39;org.springframework&#39;</span><span class="o">,</span> <span class="nl">name:</span> <span class="s1">&#39;spring-core&#39;</span><span class="o">,</span> <span class="nl">version:</span> <span class="s1">&#39;2.5&#39;</span><span class="o">],</span>
</span><span class='line'>        <span class="o">[</span><span class="nl">group:</span> <span class="s1">&#39;org.springframework&#39;</span><span class="o">,</span> <span class="nl">name:</span> <span class="s1">&#39;spring-aop&#39;</span><span class="o">,</span> <span class="nl">version:</span> <span class="s1">&#39;2.5&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'>    <span class="n">runtime</span><span class="o">(</span><span class="s1">&#39;org.hibernate:hibernate:3.0.5&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">transitive</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">runtime</span> <span class="nl">group:</span> <span class="s1">&#39;org.hibernate&#39;</span><span class="o">,</span> <span class="nl">name:</span> <span class="s1">&#39;hibernate&#39;</span><span class="o">,</span> <span class="nl">version:</span> <span class="s1">&#39;3.0.5&#39;</span><span class="o">,</span> <span class="nl">transitive:</span> <span class="kc">true</span>
</span><span class='line'>    <span class="n">runtime</span><span class="o">(</span><span class="nl">group:</span> <span class="s1">&#39;org.hibernate&#39;</span><span class="o">,</span> <span class="nl">name:</span> <span class="s1">&#39;hibernate&#39;</span><span class="o">,</span> <span class="nl">version:</span> <span class="s1">&#39;3.0.5&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">transitive</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Artifact only notation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">runtime</span> <span class="s2">&quot;org.groovy:groovy:2.2.0@jar&quot;</span>
</span><span class='line'>    <span class="n">runtime</span> <span class="nl">group:</span> <span class="s1">&#39;org.groovy&#39;</span><span class="o">,</span> <span class="nl">name:</span> <span class="s1">&#39;groovy&#39;</span><span class="o">,</span> <span class="nl">version:</span> <span class="s1">&#39;2.2.0&#39;</span><span class="o">,</span> <span class="nl">ext:</span> <span class="s1">&#39;jar&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check depdendencies with Gradle:</p>

<figure class='code'><figcaption><span>Gradle automatically expands "dep" for "dependencies" task</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; gradle dep
</span><span class='line'>:dependencies
</span><span class='line'>
</span><span class='line'>------------------------------------------------------------
</span><span class='line'>Root project
</span><span class='line'>------------------------------------------------------------
</span><span class='line'>
</span><span class='line'>api - API dependencies for source set 'main'. (n)
</span><span class='line'>\--- org.apache.commons:commons-math3:3.6.1 (n)
</span><span class='line'>
</span><span class='line'>apiElements - API elements for main. (n)
</span><span class='line'>No dependencies
</span><span class='line'>
</span><span class='line'>archives - Configuration for archive artifacts.
</span><span class='line'>No dependencies
</span><span class='line'>
</span><span class='line'>compile - Dependencies for source set 'main' (deprecated, use 'implementation ' instead).
</span><span class='line'>No dependencies
</span><span class='line'>
</span><span class='line'>compileClasspath - Compile classpath for source set 'main'.
</span><span class='line'>+--- org.apache.commons:commons-math3:3.6.1
</span><span class='line'>\--- com.google.guava:guava:21.0
</span><span class='line'>
</span><span class='line'>compileOnly - Compile only dependencies for source set 'main'.
</span><span class='line'>No dependencies
</span><span class='line'>
</span><span class='line'>default - Configuration for default artifacts.
</span><span class='line'>+--- org.apache.commons:commons-math3:3.6.1
</span><span class='line'>\--- com.google.guava:guava:21.0
</span><span class='line'>
</span><span class='line'>implementation - Implementation only dependencies for source set 'main'. (n)
</span><span class='line'>\--- com.google.guava:guava:21.0 (n)
</span><span class='line'>
</span><span class='line'>runtime - Runtime dependencies for source set 'main' (deprecated, use 'runtimeOnly ' instead).
</span><span class='line'>No dependencies
</span><span class='line'>
</span><span class='line'>runtimeClasspath - Runtime classpath of source set 'main'.
</span><span class='line'>+--- org.apache.commons:commons-math3:3.6.1
</span><span class='line'>\--- com.google.guava:guava:21.0
</span><span class='line'>
</span><span class='line'>runtimeElements - Elements of runtime for main. (n)
</span><span class='line'>No dependencies
</span><span class='line'>
</span><span class='line'>runtimeOnly - Runtime only dependencies for source set 'main'. (n)
</span><span class='line'>No dependencies
</span><span class='line'>
</span><span class='line'>testCompile - Dependencies for source set 'test' (deprecated, use 'testImplementation ' instead).
</span><span class='line'>No dependencies
</span><span class='line'>
</span><span class='line'>testCompileClasspath - Compile classpath for source set 'test'.
</span><span class='line'>+--- org.apache.commons:commons-math3:3.6.1
</span><span class='line'>+--- com.google.guava:guava:21.0
</span><span class='line'>\--- junit:junit:4.12
</span><span class='line'>     \--- org.hamcrest:hamcrest-core:1.3
</span><span class='line'>
</span><span class='line'>testCompileOnly - Compile only dependencies for source set 'test'.
</span><span class='line'>No dependencies
</span><span class='line'>
</span><span class='line'>testImplementation - Implementation only dependencies for source set 'test'. (n)
</span><span class='line'>\--- junit:junit:4.12 (n)
</span><span class='line'>
</span><span class='line'>testRuntime - Runtime dependencies for source set 'test' (deprecated, use 'testRuntimeOnly ' instead).
</span><span class='line'>No dependencies
</span><span class='line'>
</span><span class='line'>testRuntimeClasspath - Runtime classpath of source set 'test'.
</span><span class='line'>+--- org.apache.commons:commons-math3:3.6.1
</span><span class='line'>+--- com.google.guava:guava:21.0
</span><span class='line'>\--- junit:junit:4.12
</span><span class='line'>     \--- org.hamcrest:hamcrest-core:1.3
</span><span class='line'>
</span><span class='line'>testRuntimeOnly - Runtime only dependencies for source set 'test'. (n)
</span><span class='line'>No dependencies
</span><span class='line'>
</span><span class='line'>(n) - Not resolved (configuration is not meant to be resolved)
</span><span class='line'>
</span><span class='line'>BUILD SUCCESSFUL
</span><span class='line'>
</span><span class='line'>Total time: 0.72 secs</span></code></pre></td></tr></table></div></figure>


<p>Reference:</p>

<ul>
<li><a href="https://docs.gradle.org/3.5/dsl/org.gradle.api.Project.html">Project</a></li>
<li><a href="https://docs.gradle.org/current/userguide/introduction_dependency_management.html">Dependency Management</a></li>
<li><a href="https://docs.gradle.org/current/userguide/dependency_types.html">Dependency types</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle Fundamentals: Part 2]]></title>
    <link href="http://tdongsi.github.io/java/blog/2018/08/11/gradle-fundamentals-part-2/"/>
    <updated>2018-08-11T03:03:46-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2018/08/11/gradle-fundamentals-part-2</id>
    <content type="html"><![CDATA[<p>This post corresponds to &ldquo;Enough Groovy to Get By&rdquo; section of <a href="https://www.safaribooksonline.com/videos/gradle-fundamentals/9781491937266">this course</a>.</p>

<!--more-->


<h3>Static vs Dynamic Typing</h3>

<p><a href="https://github.com/tdongsi/groovy/blob/develop/learn/src/my/safari/groovy/basic/Hello.groovy">Code</a>.</p>

<h3>POGOs</h3>

<p><a href="https://github.com/tdongsi/groovy/blob/develop/learn/src/my/safari/groovy/basic/Pogo.groovy">Code</a>.</p>

<p><code>@Canonical</code> is equivalent to the following <code>@ToString</code>, <code>@EqualsAndHashCode</code>, and <code>@TupleConstructor</code> combined.</p>

<h3>Collections and Closures</h3>

<ul>
<li><a href="https://github.com/tdongsi/groovy/blob/develop/learn/src/my/safari/groovy/basic/Collection.groovy">Collection</a>.</li>
<li><a href="https://github.com/tdongsi/groovy/blob/develop/learn/src/my/safari/groovy/basic/Closures.groovy">Closure</a>.</li>
</ul>


<h3>Google Geocoder sample</h3>

<p><a href="https://github.com/tdongsi/groovy/blob/develop/learn/src/my/safari/groovy/basic/Geocode.groovy">Code</a>.</p>

<figure class='code'><figcaption><span>Geocoding example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">String</span> <span class="n">XML_BASE</span> <span class="o">=</span> <span class="s1">&#39;https://maps.googleapis.com/maps/api/geocode/xml?&#39;</span>
</span><span class='line'><span class="n">List</span> <span class="n">address</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;2700 Coast Ave&#39;</span><span class="o">,</span> <span class="s1">&#39;Mountain View&#39;</span><span class="o">,</span> <span class="s1">&#39;CA&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span> <span class="n">encoded</span> <span class="o">=</span> <span class="n">address</span><span class="o">.</span><span class="na">collect</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">URLEncoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">it</span><span class="o">,</span> <span class="s1">&#39;UTF-8&#39;</span><span class="o">)</span>
</span><span class='line'><span class="o">}.</span><span class="na">join</span><span class="o">(</span><span class="s1">&#39;,&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span> <span class="n">queryString</span> <span class="o">=</span> <span class="s2">&quot;address=$encoded&quot;</span>
</span><span class='line'><span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;$XML_BASE$queryString&quot;</span>
</span><span class='line'><span class="c1">// println url.toURL().text</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlSlurper</span><span class="o">().</span><span class="na">parse</span><span class="o">(</span><span class="n">url</span><span class="o">)</span>
</span><span class='line'><span class="kt">def</span> <span class="n">loc</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="na">result</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">geometry</span><span class="o">.</span><span class="na">location</span> <span class="c1">// Navigate DOM using dot</span>
</span><span class='line'><span class="n">println</span> <span class="s2">&quot;Coordinates: ${loc.lat}, ${loc.lng}&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>ICNDB example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">groovy.json.JsonSlurper</span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span> <span class="n">JSON_BASE</span> <span class="o">=</span> <span class="s1">&#39;http://api.icndb.com/jokes/random?&#39;</span>
</span><span class='line'><span class="c1">// Only the POTUS can claim such hyperbole.</span>
</span><span class='line'><span class="kt">def</span> <span class="n">params</span> <span class="o">=</span> <span class="o">[</span><span class="nl">limitTo:</span><span class="s1">&#39;[nerdy]&#39;</span><span class="o">,</span> <span class="nl">firstName:</span> <span class="s1">&#39;Donald&#39;</span><span class="o">,</span> <span class="nl">lastName:</span> <span class="s1">&#39;Trump&#39;</span><span class="o">]</span>
</span><span class='line'><span class="kt">def</span> <span class="n">qs</span> <span class="o">=</span> <span class="n">params</span><span class="o">.</span><span class="na">collect</span> <span class="o">{</span><span class="n">k</span><span class="o">,</span><span class="n">v</span> <span class="o">-&gt;</span> <span class="s2">&quot;$k=$v&quot;</span><span class="o">}.</span><span class="na">join</span><span class="o">(</span><span class="s1">&#39;&amp;&#39;</span><span class="o">)</span>
</span><span class='line'><span class="n">String</span> <span class="n">jsonTxt</span> <span class="o">=</span> <span class="s2">&quot;$JSON_BASE$qs&quot;</span><span class="o">.</span><span class="na">toURL</span><span class="o">().</span><span class="na">text</span>
</span><span class='line'><span class="c1">// println jsonTxt</span>
</span><span class='line'><span class="kt">def</span> <span class="n">json</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JsonSlurper</span><span class="o">().</span><span class="na">parseText</span><span class="o">(</span><span class="n">jsonTxt</span><span class="o">)</span>
</span><span class='line'><span class="n">println</span> <span class="n">json</span><span class="o">.</span><span class="na">value</span><span class="o">.</span><span class="na">joke</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Demo</span>
</span><span class='line'><span class="n">String</span> <span class="n">HOMEPAGE</span> <span class="o">=</span> <span class="s1">&#39;http://oreilly.com&#39;</span>
</span><span class='line'><span class="n">println</span> <span class="n">HOMEPAGE</span><span class="o">.</span><span class="na">toURL</span><span class="o">().</span><span class="na">text</span><span class="o">.</span><span class="na">readLines</span><span class="o">()</span> <span class="o">*.</span> <span class="n">size</span><span class="o">()</span>
</span><span class='line'><span class="c1">// println HOMEPAGE.toURL().text</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle Fundamentals: Part 1]]></title>
    <link href="http://tdongsi.github.io/java/blog/2018/08/11/gradle-fundamentals-part-1/"/>
    <updated>2018-08-11T02:58:33-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2018/08/11/gradle-fundamentals-part-1</id>
    <content type="html"><![CDATA[<p>This post corresponds to &ldquo;Introduction&rdquo; section of <a href="https://www.safaribooksonline.com/videos/gradle-fundamentals/9781491937266">this course</a>.</p>

<!--more-->


<h3>Quick facts</h3>

<p>The course is recorded in July 2015, when the latest Gradle version is <code>2.4</code>.
The examples are in Gradle <code>2.4</code>.</p>

<h3>Installation and Configuration</h3>

<p>Installing using <code>sdkman</code> (formerly GVM) is recommended.
For example, on macOS, you might not be able to specify version using <code>homebrew</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; sdk install gradle 3.5.1
</span><span class='line'>&gt; sdk use gradle 3.5.1
</span><span class='line'>&gt; sdk list gradle
</span><span class='line'>================================================================================
</span><span class='line'>Available Gradle Versions
</span><span class='line'>================================================================================
</span><span class='line'>     4.10-rc-1           4.0.1               2.10                1.8
</span><span class='line'>     4.9                 4.0                 2.9                 1.7
</span><span class='line'>     4.8.1           &gt; * 3.5.1               2.8                 1.6
</span><span class='line'>     4.8                 3.5                 2.7                 1.5
</span><span class='line'>     4.7                 3.4.1               2.6                 1.4
</span><span class='line'>     4.6                 3.4                 2.5                 1.3
</span><span class='line'>     4.5.1               3.3                 2.4                 1.2
</span><span class='line'>     4.5                 3.2.1               2.3                 1.1
</span><span class='line'>     4.4.1               3.2                 2.2.1               1.0
</span><span class='line'>     4.4                 3.1                 2.2                 0.9.2
</span><span class='line'>     4.3.1               3.0                 2.1                 0.9.1
</span><span class='line'>     4.3                 2.14.1              2.0                 0.9
</span><span class='line'>     4.2.1               2.14                1.12                0.8
</span><span class='line'>     4.2                 2.13                1.11                0.7
</span><span class='line'>     4.1                 2.12                1.10
</span><span class='line'>     4.0.2               2.11                1.9
</span><span class='line'>
</span><span class='line'>================================================================================
</span><span class='line'>+ - local version
</span><span class='line'>* - installed
</span><span class='line'>&gt; - currently in use
</span><span class='line'>================================================================================
</span><span class='line'>
</span><span class='line'>&gt; gradle -version
</span><span class='line'>
</span><span class='line'>------------------------------------------------------------
</span><span class='line'>Gradle 3.5.1
</span><span class='line'>------------------------------------------------------------
</span><span class='line'>
</span><span class='line'>Build time:   2017-06-16 14:36:27 UTC
</span><span class='line'>Revision:     d4c3bb4eac74bd0a3c70a0d213709e484193e251
</span><span class='line'>
</span><span class='line'>Groovy:       2.4.10
</span><span class='line'>Ant:          Apache Ant(TM) version 1.9.6 compiled on June 29 2015
</span><span class='line'>JVM:          1.8.0_172 (Oracle Corporation 25.172-b11)
</span><span class='line'>OS:           Mac OS X 10.13.6 x86_64</span></code></pre></td></tr></table></div></figure>


<h3>Documentation</h3>

<p>Important docs:</p>

<ul>
<li><a href="https://gradle.org/guides/">User Guide</a></li>
<li><a href="https://docs.gradle.org/current/dsl/">DSL reference</a></li>
</ul>


<figure class='code'><figcaption><span>Example Hello World build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="c1">// Not overriding any internal property</span>
</span><span class='line'><span class="n">ext</span><span class="o">.</span><span class="na">person</span> <span class="o">=</span> <span class="s1">&#39;Dobby&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="n">hello</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">doLast</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">println</span> <span class="s2">&quot;Hello, $person!&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="nf">hi</span><span class="o">(</span><span class="nl">dependsOn:</span> <span class="s1">&#39;hello&#39;</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span> <span class="s1">&#39;Hello, World!&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; gradle tasks --all
</span><span class='line'>:tasks
</span><span class='line'>
</span><span class='line'>------------------------------------------------------------
</span><span class='line'>All tasks runnable from root project
</span><span class='line'>------------------------------------------------------------
</span><span class='line'>
</span><span class='line'>Build Setup tasks
</span><span class='line'>-----------------
</span><span class='line'>init - Initializes a new Gradle build.
</span><span class='line'>wrapper - Generates Gradle wrapper files.
</span><span class='line'>
</span><span class='line'>Help tasks
</span><span class='line'>----------
</span><span class='line'>buildEnvironment - Displays all buildscript dependencies declared in root project 'workspace'.
</span><span class='line'>components - Displays the components produced by root project 'workspace'. [incubating]
</span><span class='line'>dependencies - Displays all dependencies declared in root project 'workspace'.
</span><span class='line'>dependencyInsight - Displays the insight into a specific dependency in root project 'workspace'.
</span><span class='line'>dependentComponents - Displays the dependent components of components in root project 'workspace'. [incubating]
</span><span class='line'>help - Displays a help message.
</span><span class='line'>model - Displays the configuration model of root project 'workspace'. [incubating]
</span><span class='line'>projects - Displays the sub-projects of root project 'workspace'.
</span><span class='line'>properties - Displays the properties of root project 'workspace'.
</span><span class='line'>tasks - Displays the tasks runnable from root project 'workspace'.
</span><span class='line'>
</span><span class='line'>Other tasks
</span><span class='line'>-----------
</span><span class='line'>hello
</span><span class='line'>hi
</span><span class='line'>
</span><span class='line'>BUILD SUCCESSFUL
</span><span class='line'>
</span><span class='line'>Total time: 0.691 secs</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; gradle hi
</span><span class='line'>The Task.leftShift(Closure) method has been deprecated and is scheduled to be removed in Gradle 5.0. Please use Task.doLast(Action) instead.
</span><span class='line'>        at build_6vy9edw0bhsp70x0atckfxbnz.run(/Users/tuecuong/dev/hub/java/docs/source/workspace/build.gradle:7)
</span><span class='line'>:hello
</span><span class='line'>Hello, Dobby!
</span><span class='line'>:hi
</span><span class='line'>Hello, World!
</span><span class='line'>
</span><span class='line'>BUILD SUCCESSFUL
</span><span class='line'>
</span><span class='line'>Total time: 0.688 secs</span></code></pre></td></tr></table></div></figure>


<p>Left-shift operator <code>&lt;&lt;</code> is the alias to the <code>doLast</code> command.
Using <code>doLast</code> is preferrable since you can do more (e.g., setup, configuration) as opposed to actions only in <code>&lt;&lt;</code> clauses.</p>

<h3>Sample Build Files</h3>

<p>In version 3+, the guides and samples are not included in the Gradle installation.
Instead, you can find it on</p>

<ul>
<li><a href="https://github.com/gradle/gradle/tree/master/subprojects/docs/src/samples">Samples as shown in video</a>

<ul>
<li><code>userguide</code> folder > <code>tutorial</code> folder > sample build.gradle files.</li>
<li>Example: <a href="https://github.com/gradle/gradle/blob/master/subprojects/docs/src/samples/userguide/tutorial/helloEnhanced/build.gradle">helloEnhanced</a>.</li>
</ul>
</li>
<li><a href="https://github.com/gradle/guides">Guide repo</a> which directs to the Github Org</li>
<li><a href="https://github.com/gradle-guides">gradle-guides Github org</a></li>
</ul>


<h3>Where to Find Answers</h3>

<ul>
<li><a href="https://blog.gradle.org/">Blog</a></li>
<li><a href="https://discuss.gradle.org/">Forum</a></li>
<li>Stackoverflow</li>
<li><a href="https://gradle.org/books/">Book</a>

<ul>
<li>Gradle in Action</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Java Part 1]]></title>
    <link href="http://tdongsi.github.io/java/blog/2018/03/25/advanced-java-part-1/"/>
    <updated>2018-03-25T14:35:11-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2018/03/25/advanced-java-part-1</id>
    <content type="html"><![CDATA[<p>Based on Part 1: &ldquo;Interfaces, Inheritances, and Objects&rdquo; of <a href="https://www.safaribooksonline.com/library/view/advanced-java-development/9781491960400/video247566.html">SafariBooks&rsquo;s Advanced Java Development</a>
by Ken Kousen.</p>

<!--more-->


<h3>Default and static methods</h3>

<h4>Why static method in interface?</h4>

<p>Before Java 8, it is hard to add static methods that work on objects of the same type.
For example, <code>sort</code> method should work on all Collection objects.
However, we don’t have that in Collection interface.
We end up working around by adding all static methods into Collections (plural) class.
That is how we end up with <code>Collections.sort()</code>.</p>

<p>After Java 8, the above problem is sorted out with static method in interfaces.
For example, Stream is an interface but it has utility methods such as &ldquo;Stream.of(a, b, c)&rdquo; which is static method.</p>

<h4>Default methods in interface</h4>

<p>What if default methods in two interfaces have the same name and a class implements both interfaces?
You have to override the method in the class to provide the specific implementation.
Otherwise, you will get the compilation error.
Note that, it is different from two abstract classes since it is usually required (before Java 8) for the class to provide concrete implementation for an interface method.
You can still refer to the default methods in the interfaces as follows:</p>

<figure class='code'><figcaption><span>Default methods with same name in interfaces</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Company</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">default</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="s">&quot;defaults.Company&quot;</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Contractor</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="nf">getFirst</span><span class="o">();</span>
</span><span class='line'>    <span class="n">String</span> <span class="nf">getLast</span><span class="o">();</span>
</span><span class='line'>    <span class="k">default</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%s %s&quot;</span><span class="o">,</span> <span class="n">getFirst</span><span class="o">(),</span> <span class="n">getLast</span><span class="o">());</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CompanyContractor</span> <span class="kd">implements</span> <span class="n">Company</span><span class="o">,</span> <span class="n">Contractor</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Contractor</span><span class="o">.</span><span class="na">super</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; at &quot;</span> <span class="o">+</span> <span class="n">Company</span><span class="o">.</span><span class="na">super</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Exceptions</h3>

<p>The following exmample demonstrates how &ldquo;try-with-resources&rdquo; clauses can simplify codes that would be otherwise verbose before Java 7.
In this example, let&rsquo;s open a file and read it.
Although it uses Java 7&rsquo;s NIO classes, all exception-related tasks apply.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Path</span> <span class="n">dir</span> <span class="o">=</span> <span class="n">Paths</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;src&quot;</span><span class="o">,</span> <span class="s">&quot;main&quot;</span><span class="o">,</span> <span class="s">&quot;java&quot;</span><span class="o">,</span> <span class="s">&quot;my&quot;</span><span class="o">,</span> <span class="s">&quot;learning&quot;</span><span class="o">,</span> <span class="s">&quot;advanced&quot;</span><span class="o">,</span> <span class="s">&quot;one&quot;</span><span class="o">);</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="n">Files</span><span class="o">.</span><span class="na">newBufferedReader</span><span class="o">(</span><span class="n">dir</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">&quot;ExceptionDemo.java&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The missing piece in the above code is that you need to properly close the file should any exception happens.
Now, the problem is that simply adding the following would not work since <code>br</code> is a local variable in <code>try</code> block.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the end, you would end up with so much additional works just to make sure the file is closed should any exception happens, as shown in the following code.</p>

<ul>
<li>Declare a null <code>br</code> outside of try-catch block to make it visible in <code>finally</code> block.</li>
<li>Add <code>finally</code> block to close the file.</li>
<li>Additional null-check for <code>br</code> before closing the file.</li>
<li>Additional try-catch block for closing the file in <code>finally</code> block.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Path</span> <span class="n">dir</span> <span class="o">=</span> <span class="n">Paths</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;src&quot;</span><span class="o">,</span> <span class="s">&quot;main&quot;</span><span class="o">,</span> <span class="s">&quot;java&quot;</span><span class="o">,</span> <span class="s">&quot;my&quot;</span><span class="o">,</span> <span class="s">&quot;learning&quot;</span><span class="o">,</span> <span class="s">&quot;advanced&quot;</span><span class="o">,</span> <span class="s">&quot;one&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">br</span> <span class="o">=</span> <span class="n">Files</span><span class="o">.</span><span class="na">newBufferedReader</span><span class="o">(</span><span class="n">dir</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">&quot;ExceptionDemo.java&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">br</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Such code is verbose and obfuscating the simple purpose of closing the file.
It is also distracting developers and reviewers from the main code of reading and processing the file.</p>

<p>With Java 7&rsquo;s &ldquo;try-with-resources&rdquo;, the above problem is effectively solved:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Path</span> <span class="n">dir</span> <span class="o">=</span> <span class="n">Paths</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;src&quot;</span><span class="o">,</span> <span class="s">&quot;main&quot;</span><span class="o">,</span> <span class="s">&quot;java&quot;</span><span class="o">,</span> <span class="s">&quot;my&quot;</span><span class="o">,</span> <span class="s">&quot;learning&quot;</span><span class="o">,</span> <span class="s">&quot;advanced&quot;</span><span class="o">,</span> <span class="s">&quot;one&quot;</span><span class="o">);</span>
</span><span class='line'><span class="k">try</span><span class="o">(</span> <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="n">Files</span><span class="o">.</span><span class="na">newBufferedReader</span><span class="o">(</span><span class="n">dir</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">&quot;ExceptionDemo.java&quot;</span><span class="o">))</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We only need to move the BufferedReader instatiation into the <code>try()</code> statement.
No additional line is required at all.
The only requirement is that the BufferedReader class has to implement AutoCloseable interface, which it does.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins Plugin Development]]></title>
    <link href="http://tdongsi.github.io/java/blog/2018/02/08/jenkins-plugin-development/"/>
    <updated>2018-02-08T00:07:01-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2018/02/08/jenkins-plugin-development</id>
    <content type="html"><![CDATA[<p>How to create a Jenkins plugin.</p>

<!--more-->




<!-- Photos:
IMG_[1110..1116]
-->


<h3>Basic plugin</h3>

<p>Reference:</p>

<ul>
<li><a href="https://github.com/MarkEWaite/hello-world-plugin/tree/jenkins-world-2017">Tutorial</a></li>
<li><a href="https://www.youtube.com/watch?feature=player_embedded&amp;v=azyv183Ua6U">Video</a></li>
</ul>


<h3>Pipeline plugin</h3>

<p>Reference:</p>

<ul>
<li><a href="https://github.com/jglick/wfdev/tree/pipeline">Tutorial</a></li>
<li><a href="https://github.com/jglick/wfdev/blob/master/preso.pdf">Slides</a></li>
<li><a href="https://github.com/jenkinsci/pipeline-plugin/blob/master/DEVGUIDE.md">Developer&rsquo;s guide</a></li>
</ul>


<h3>Blue Ocean plugin</h3>

<figure class='code'><figcaption><span>Local development of Blue Ocean plugin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># this will build and run the plugin in local Jenkins
</span><span class='line'>mvn install hpi:run
</span><span class='line'># this will recompile js & less while editing
</span><span class='line'>npm run bundle:watch</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Gotcha</em></strong>: extension changes won&rsquo;t update without a Jenkins restart.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy Fundamentals: Part 5: Demos]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-5/"/>
    <updated>2017-12-08T17:17:20-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-5</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy Fundamentals: Part 4: Closures & Operators]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-4/"/>
    <updated>2017-12-08T17:17:09-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-4</id>
    <content type="html"><![CDATA[<p>This post corresponds to &ldquo;Basic Closures&rdquo; and &ldquo;Misc Operators&rdquo; sections of <a href="https://www.safaribooksonline.com/library/view/groovy-programming-fundamentals/9781491926253/">this course</a>.</p>

<!--more-->


<h3>Closures</h3>

<figure class='code'><figcaption><span>Iterating list with closure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">List</span> <span class="n">nums</span> <span class="o">=</span> <span class="o">[</span><span class="mi">9</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="nl">num:</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span> <span class="n">num</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Pro: not much. You don&#39;t have to specify type</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">num</span> <span class="k">in</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// println num</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Idiomatic in Groovy.</span>
</span><span class='line'><span class="n">nums</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">num</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">println</span> <span class="n">num</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">nums</span><span class="o">.</span><span class="na">eachWithIndex</span> <span class="o">{</span> <span class="n">num</span><span class="o">,</span> <span class="n">idx</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">println</span> <span class="s2">&quot;nums[$idx] == $num&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Iterating map with closure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Map</span> <span class="n">m</span> <span class="o">=</span> <span class="o">[</span><span class="nl">a:</span><span class="mi">1</span><span class="o">,</span> <span class="nl">b:</span><span class="mi">2</span><span class="o">,</span> <span class="nl">c:</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Java idiom</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">key</span> <span class="o">:</span> <span class="n">m</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Groovy idiom</span>
</span><span class='line'><span class="c1">// One parameter closure gives Map.Entry</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">e</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">println</span> <span class="s2">&quot;${e.key} ${e.value}&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">// Two parameter closure gives key, value</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">k</span><span class="o">,</span> <span class="n">v</span> <span class="o">-&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>collect method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">println</span> <span class="n">nums</span><span class="o">.</span><span class="na">collect</span> <span class="o">{</span> <span class="n">it</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">}</span> <span class="c1">// map</span>
</span><span class='line'>    <span class="o">.</span><span class="na">findAll</span> <span class="o">{</span> <span class="n">it</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">}</span>    <span class="c1">// filter</span>
</span><span class='line'>    <span class="o">.</span><span class="na">sum</span><span class="o">()</span>                      <span class="c1">// reduce</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">factor</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">println</span> <span class="n">nums</span><span class="o">.</span><span class="na">collect</span> <span class="o">{</span> <span class="n">it</span><span class="o">*</span><span class="n">factor</span> <span class="o">}</span>
</span><span class='line'><span class="c1">// Spread dot operator</span>
</span><span class='line'><span class="n">println</span> <span class="n">nums</span> <span class="o">*.</span> <span class="n">multiply</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'><span class="c1">// Demo</span>
</span><span class='line'><span class="n">String</span> <span class="n">HOMEPAGE</span> <span class="o">=</span> <span class="s1">&#39;http://oreilly.com&#39;</span>
</span><span class='line'><span class="n">println</span> <span class="n">HOMEPAGE</span><span class="o">.</span><span class="na">toURL</span><span class="o">().</span><span class="na">text</span><span class="o">.</span><span class="na">readLines</span><span class="o">()</span> <span class="o">*.</span> <span class="n">size</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Geocoding demo: XML query and parsing</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">String</span> <span class="n">XML_BASE</span> <span class="o">=</span> <span class="s1">&#39;https://maps.googleapis.com/maps/api/geocode/xml?&#39;</span>
</span><span class='line'><span class="n">List</span> <span class="n">address</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;2700 Coast Ave&#39;</span><span class="o">,</span> <span class="s1">&#39;Mountain View&#39;</span><span class="o">,</span> <span class="s1">&#39;CA&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span> <span class="n">encoded</span> <span class="o">=</span> <span class="n">address</span><span class="o">.</span><span class="na">collect</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">URLEncoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">it</span><span class="o">,</span> <span class="s1">&#39;UTF-8&#39;</span><span class="o">)</span>
</span><span class='line'><span class="o">}.</span><span class="na">join</span><span class="o">(</span><span class="s1">&#39;,&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span> <span class="n">queryString</span> <span class="o">=</span> <span class="s2">&quot;address=$encoded&quot;</span>
</span><span class='line'><span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;$XML_BASE$queryString&quot;</span>
</span><span class='line'><span class="c1">// println url.toURL().text</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlSlurper</span><span class="o">().</span><span class="na">parse</span><span class="o">(</span><span class="n">url</span><span class="o">)</span>
</span><span class='line'><span class="kt">def</span> <span class="n">loc</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="na">result</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">geometry</span><span class="o">.</span><span class="na">location</span> <span class="c1">// Navigate DOM using dot</span>
</span><span class='line'><span class="n">println</span> <span class="s2">&quot;Coordinates: ${loc.lat}, ${loc.lng}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ICNDB demo: JSON query and parsing</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">String</span> <span class="n">JSON_BASE</span> <span class="o">=</span> <span class="s1">&#39;http://api.icndb.com/jokes/random?&#39;</span>
</span><span class='line'><span class="c1">// Only the POTUS can claim such hyperbole.</span>
</span><span class='line'><span class="kt">def</span> <span class="n">params</span> <span class="o">=</span> <span class="o">[</span><span class="nl">limitTo:</span><span class="s1">&#39;[nerdy]&#39;</span><span class="o">,</span> <span class="nl">firstName:</span> <span class="s1">&#39;Donald&#39;</span><span class="o">,</span> <span class="nl">lastName:</span> <span class="s1">&#39;Trump&#39;</span><span class="o">]</span>
</span><span class='line'><span class="kt">def</span> <span class="n">qs</span> <span class="o">=</span> <span class="n">params</span><span class="o">.</span><span class="na">collect</span> <span class="o">{</span><span class="n">k</span><span class="o">,</span><span class="n">v</span> <span class="o">-&gt;</span> <span class="s2">&quot;$k=$v&quot;</span><span class="o">}.</span><span class="na">join</span><span class="o">(</span><span class="s1">&#39;&amp;&#39;</span><span class="o">)</span>
</span><span class='line'><span class="n">String</span> <span class="n">jsonTxt</span> <span class="o">=</span> <span class="s2">&quot;$JSON_BASE$qs&quot;</span><span class="o">.</span><span class="na">toURL</span><span class="o">().</span><span class="na">text</span>
</span><span class='line'><span class="c1">// println jsonTxt</span>
</span><span class='line'><span class="kt">def</span> <span class="n">json</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JsonSlurper</span><span class="o">().</span><span class="na">parseText</span><span class="o">(</span><span class="n">jsonTxt</span><span class="o">)</span>
</span><span class='line'><span class="n">println</span> <span class="n">json</span><span class="o">.</span><span class="na">value</span><span class="o">.</span><span class="na">joke</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Operators</h3>

<figure class='code'><figcaption><span>Misc operators in Groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="c1">// Safe navigation ?.</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Department</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Manager</span> <span class="n">boss</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Manager</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">name</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">Department</span> <span class="n">d1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Department</span><span class="o">(</span><span class="nl">boss:</span> <span class="k">new</span> <span class="n">Manager</span><span class="o">(</span><span class="nl">name:</span> <span class="s1">&#39;ABC&#39;</span><span class="o">))</span>
</span><span class='line'><span class="n">Department</span> <span class="n">d2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Department</span><span class="o">()</span>
</span><span class='line'><span class="n">println</span> <span class="n">d1</span> <span class="o">?.</span> <span class="n">boss</span> <span class="o">?.</span> <span class="n">name</span>
</span><span class='line'><span class="c1">// Standard d2.boss.name will throw NPE.</span>
</span><span class='line'><span class="n">println</span> <span class="n">d2</span> <span class="o">?.</span> <span class="n">boss</span> <span class="o">?.</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Spaceship operator: Comparable interface</span>
</span><span class='line'><span class="n">println</span> <span class="mi">1</span> <span class="o">&lt;=&gt;</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// See Groovy truth</span>
</span><span class='line'><span class="c1">// Elvis operator</span>
</span><span class='line'><span class="n">String</span> <span class="n">input</span>
</span><span class='line'><span class="n">String</span> <span class="n">greet</span> <span class="o">=</span> <span class="s1">&#39;Hello &#39;</span> <span class="o">+</span> <span class="o">(</span><span class="n">input</span> <span class="o">?:</span> <span class="s1">&#39;World&#39;</span><span class="o">)</span>
</span><span class='line'><span class="n">println</span> <span class="n">greet</span>
</span></code></pre></td></tr></table></div></figure>


<p>Groovy truth:</p>

<ul>
<li>non-zero numbers</li>
<li>non-null references</li>
<li>non-empty strings</li>
<li>non-empty collections</li>
<li>regex with a match</li>
<li>boolean true</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy Fundamentals: Part 3: POGOs & Collections]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-3/"/>
    <updated>2017-12-08T17:17:05-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-3</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy Fundamentals: Part 2: Numbers & Strings]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-2/"/>
    <updated>2017-12-08T17:16:49-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-2</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>Speak Groovy with Java accent</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="kt">void</span> <span class="nf">healthcheck</span><span class="o">(</span><span class="n">String</span> <span class="n">endpoint</span><span class="o">,</span> <span class="kt">int</span> <span class="n">timeoutInSeconds</span> <span class="o">=</span> <span class="mi">120</span><span class="o">,</span> <span class="kt">int</span> <span class="n">expectedCode</span> <span class="o">=</span> <span class="mi">200</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span> <span class="s2">&quot;Doing health check of &quot;</span> <span class="o">+</span> <span class="n">endpoint</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">code</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">code</span> <span class="o">!=</span> <span class="n">expectedCode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">URL</span> <span class="n">url</span> <span class="o">=</span> <span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="n">endpoint</span><span class="o">)</span>
</span><span class='line'>            <span class="n">HttpURLConnection</span> <span class="n">connection</span> <span class="o">=</span> <span class="o">(</span><span class="n">HttpURLConnection</span><span class="o">)</span> <span class="n">url</span><span class="o">.</span><span class="na">openConnection</span><span class="o">()</span>
</span><span class='line'>            <span class="n">connection</span><span class="o">.</span><span class="na">setRequestMethod</span><span class="o">(</span><span class="s2">&quot;GET&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="n">connection</span><span class="o">.</span><span class="na">connect</span><span class="o">()</span>
</span><span class='line'>            <span class="n">code</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">getResponseCode</span><span class="o">()</span>
</span><span class='line'>            <span class="n">println</span> <span class="s2">&quot;Response code:&quot;</span> <span class="o">+</span> <span class="n">code</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">println</span> <span class="n">e</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">timeoutInSeconds</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s2">&quot;Healthcheck of &quot;</span> <span class="o">+</span> <span class="n">endpoint</span> <span class="o">+</span> <span class="s2">&quot; failed.&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">out</span> <span class="o">=</span> <span class="n">healthcheck</span><span class="o">(</span><span class="s2">&quot;https://my.service.com/&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy Fundamentals: Part 1: Basics]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-1/"/>
    <updated>2017-12-08T17:16:47-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-1</id>
    <content type="html"><![CDATA[<p>This post corresponds to &ldquo;Installing Groovy&rdquo; section of <a href="https://www.safaribooksonline.com/library/view/groovy-programming-fundamentals/9781491926253/">this course</a>.</p>

<!--more-->


<h3>Anatomy of Groovy bytecode</h3>

<p>There is no requirement of filename matching class name like in Java (e.g., Foo.java for Foo class).
However, the convention is that filesnames with lower cases and underscore are used for script (e.g., hello_world.groovy) and filesnames with camel cases are used for Groovy class (e.g., Foo.groovy for Foo class).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tdongsi-ltm4:docs tdongsi$ groovy hello_world.groovy
</span><span class='line'>Hello World
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>tdongsi-ltm4:docs tdongsi$ groovyc hello_world.groovy
</span><span class='line'>tdongsi-ltm4:docs tdongsi$ ls
</span><span class='line'>hello_world.class
</span><span class='line'>hello_world.groovy
</span><span class='line'>tdongsi-ltm4:docs tdongsi$ groovy hello_world
</span><span class='line'>Hello World</span></code></pre></td></tr></table></div></figure>


<p>The above code snippets show that you can run command <code>groovy</code> with source code directly, giving the impression of interpreting language.
However, what actually happens is that it compiles and runs the bytecode but does not save the byte code.
On the other hand, you can compile with <code>groovyc</code> command to obtain the bytecode and run like Java code.</p>

<figure class='code'><figcaption><span>Anatomy of bytecode from Groovy code</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tdongsi-ltm4:docs tdongsi$ java hello_world
</span><span class='line'>Error: Could not find or load main class hello_world
</span><span class='line'>
</span><span class='line'>tdongsi-ltm4:docs tdongsi$ javap hello_world
</span><span class='line'>Compiled from "hello_world.groovy"
</span><span class='line'>public class hello_world extends groovy.lang.Script {
</span><span class='line'>  public static transient boolean __$stMC;
</span><span class='line'>  public hello_world();
</span><span class='line'>  public hello_world(groovy.lang.Binding);
</span><span class='line'>  public static void main(java.lang.String...);
</span><span class='line'>  public java.lang.Object run();
</span><span class='line'>  protected groovy.lang.MetaClass $getStaticMetaClass();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The above code snippets show that <code>hello_world.class</code> is also JVM bytecode.
Although, we cannot execute <code>java hello_world</code> directly, the <code>javap</code> command confirms that it is Java bytecode.
With the right class dependencies, provided in <code>groovy-all-2.4.8.jar</code> in <code>GROOVY_HOME</code>, we can execute the bytecode compiled from Groovy code using <code>java</code> code, as shown below.</p>

<figure class='code'><figcaption><span>Exceute Groovy code with Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tdongsi-ltm4:docs tdongsi$ which groovyc
</span><span class='line'>/usr/local/bin/groovyc
</span><span class='line'>tdongsi-ltm4:docs tdongsi$ ls -l /usr/local/bin/groovyc
</span><span class='line'>lrwxr-xr-x  1 tdongsi  staff  34 Feb 10  2017 /usr/local/bin/groovyc -&gt; ../Cellar/groovy/2.4.8/bin/groovyc
</span><span class='line'>
</span><span class='line'>tdongsi-ltm4:docs tdongsi$ java -cp /usr/local/Cellar/groovy/2.4.8/libexec/embeddable/groovy-all-2.4.8.jar:. hello_world
</span><span class='line'>Hello World</span></code></pre></td></tr></table></div></figure>


<p>The implication is that, in any production system or development environment, you can add/execute any Groovy code by simply adding a single jar file.
For example, in Maven projects, all you need to do is to add this into the pom.xml file:</p>

<figure class='code'><figcaption><span>Groovy dependencies</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.codehaus.groovy<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>groovy-all<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>2.4.13<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After that, you can start adding package and Groovy file, e.g., HelloWorld.groovy, into &ldquo;src/main/groovy&rdquo; folder.
See <a href="https://github.com/tdongsi/java/commit/3ce5202f9c575f735f14f095ea26759224316576">example commit</a>.</p>

<h3>Default imports</h3>

<p>In Groovy, if you don&rsquo;t add any <code>import</code> statements, you get the following package by default:</p>

<ul>
<li>java.lang.*</li>
<li>java.util.*</li>
<li>java.net.*</li>
<li>java.io.*</li>
<li>java.math.BigInteger</li>
<li>java.math.BigDecimal</li>
<li>groovy.lang.*</li>
<li>groovy.util.*</li>
</ul>


<h3><code>def</code> keyword</h3>

<p>In Groovy, a variable can be dynamic type, using <code>def</code> keyword, or static type (Java-style).</p>

<figure class='code'><figcaption><span>Dynamic and weak typing</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">println</span> <span class="n">x</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">name</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="s1">&#39;abc&#39;</span>
</span><span class='line'><span class="n">println</span> <span class="n">x</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">name</span>
</span></code></pre></td></tr></table></div></figure>


<p>The best practice is to use static typing when you know what type a variable is at the time of writing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 9]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/12/06/java-9/"/>
    <updated>2017-12-06T12:11:16-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/12/06/java-9</id>
    <content type="html"><![CDATA[<p>JDK 9 was released in September and includes many changes to the Java platform.
The biggest is the Java Platform Module System (often referred to as Project Jigsaw).</p>

<!--more-->


<p>This new JPMS breaks up the existing rt.jar file into 97 modules (28 of them are SE) but also encapsulates internal APIs, such as sun.misc.Unsafe that have previously been available to developers.
This note summarizes some intersting points from a guest speaker about the new JDK 9 and other intersting changes in Java Community.</p>

<h3>JDK 9 Features</h3>

<p>Java Platform Module System</p>

<ul>
<li>Initially, leave everything on the classpath.</li>
<li>Anything on the classpath is in the unamed module

<ul>
<li>All packages are exported</li>
<li>The unamed module depends on all modules</li>
</ul>
</li>
<li>Migrate to modules as required</li>
</ul>


<p><code>--illegal-access</code> option is the Kill Switch to turn off encapsulation:</p>

<ul>
<li>permit: Warning for first use of an encapsulated API</li>
<li>warn: Warning for every use</li>
<li>debug: Warning and stack trace for every use</li>
<li>deny: No access.</li>
</ul>


<p><code>--add-exports</code> option allows direct access to encapsulated APIs.
<code>--add-opens</code> option allows reflective access to encapulated APIs.</p>

<p><code>jlink</code>: The Java Linker (JEP 282).
The implication of <code>jlink</code> is that the slogan &ldquo;Write once, run anywhere&rdquo; might not be true anymore.
<code>jlink</code> generated runtime may not include all Java SE modules.
It is still a conformant Java implementation.</p>

<p><a href="https://www.journaldev.com/13121/java-9-features-with-examples"><strong>REFERENCE</strong></a> with examples.</p>

<h3>Java Development Changes</h3>

<p>OpenJDK have a new release model: more agile, every six months.
Features are included when ready instead of targeted for specific release when started.</p>

<p>JDK Version Numbering: new scheme introduced (JEP 223).</p>

<ul>
<li>JDK MAJOR.MINOR.SECURITY</li>
<li>Semantic versioning</li>
</ul>


<p>However, there is a new scheme proposed in JEP 322: FEATURE.INTERIM.UPDATE.PATCH.</p>

<p>Availability of JDK updates: Oracle is switching to LTS model.</p>

<ul>
<li>JDK 8 is a LTS release.

<ul>
<li>It will have updates for more than 3 years.</li>
</ul>
</li>
<li>JDK 9 is a feature release.

<ul>
<li>Public updates are only available until next feature release.</li>
</ul>
</li>
</ul>


<h3>Deprecated features in JDK 9</h3>

<ul>
<li>Applets as a deployment mechanism</li>
<li>CMS garbage collector</li>
<li>Java policy tool, jconsole, Doclet API</li>
<li>No more 32-bit Oracle JDK binaries. No more ARM binaries.

<ul>
<li>Only Mac, Windows, Linux, SPARC supported. All 64-bit.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XML Processing in Groovy]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/06/14/xml-processing-in-groovy/"/>
    <updated>2017-06-14T09:57:51-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/06/14/xml-processing-in-groovy</id>
    <content type="html"><![CDATA[<p>This post discusses XML processing in Groovy.</p>

<!--more-->


<h3>Parsing: XmlParser vs XmlSlurper</h3>

<p>Both are in <code>groovy.util</code> packages and both have the same approach to parse an xml: both are based on <code>SAX</code> (low memory footprint) and both can update/transform the XML.</p>

<p>Based on this <a href="https://stackoverflow.com/questions/7558019/groovy-xmlslurper-vs-xmlparser">StackOverflow answer</a>, when to use <code>XmlParser</code> versus <code>XmlSlurper</code> is as follows:</p>

<ul>
<li><code>XmlSlurper</code>: when you want to transform an existing XML document to another.</li>
<li><code>XmlSlurper</code>: when you just want to read a few nodes since <code>XmlSlurper</code> evaluates the structure lazily.</li>
<li><code>XmlParser</code>: when you want to update and read at the same time.</li>
</ul>


<h4>Example usage:</h4>

<figure class='code'><figcaption><span>XmlSlurper</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;</span>
</span><span class='line'><span class="s1">    &lt;list&gt;</span>
</span><span class='line'><span class="s1">        &lt;technology&gt;</span>
</span><span class='line'><span class="s1">            &lt;name&gt;Groovy&lt;/name&gt;</span>
</span><span class='line'><span class="s1">        &lt;/technology&gt;</span>
</span><span class='line'><span class="s1">    &lt;/list&gt;</span>
</span><span class='line'><span class="s1">&#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlSlurper</span><span class="o">().</span><span class="na">parseText</span><span class="o">(</span><span class="n">text</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">list</span> <span class="k">instanceof</span> <span class="n">groovy</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">slurpersupport</span><span class="o">.</span><span class="na">GPathResult</span>
</span><span class='line'><span class="k">assert</span> <span class="n">list</span><span class="o">.</span><span class="na">technology</span><span class="o">.</span><span class="na">name</span> <span class="o">==</span> <span class="s1">&#39;Groovy&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>XmlParser</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlParser</span><span class="o">().</span><span class="na">parseText</span><span class="o">(</span><span class="n">text</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">list</span> <span class="k">instanceof</span> <span class="n">groovy</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Node</span>
</span><span class='line'><span class="k">assert</span> <span class="n">list</span><span class="o">.</span><span class="na">technology</span><span class="o">.</span><span class="na">name</span><span class="o">.</span><span class="na">text</span><span class="o">()</span> <span class="o">==</span> <span class="s1">&#39;Groovy&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another option is DOMCategory:</p>

<figure class='code'><figcaption><span>DOMCateogry</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringReader</span><span class="o">(</span><span class="n">CAR_RECORDS</span><span class="o">)</span>
</span><span class='line'><span class="kt">def</span> <span class="n">doc</span> <span class="o">=</span> <span class="n">DOMBuilder</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">reader</span><span class="o">)</span>
</span><span class='line'><span class="kt">def</span> <span class="n">records</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="na">documentElement</span>
</span><span class='line'>
</span><span class='line'><span class="n">use</span><span class="o">(</span><span class="n">DOMCategory</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">assert</span> <span class="n">records</span><span class="o">.</span><span class="na">car</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Navigation with GPath</h3>

<p>From <a href="http://groovy-lang.org/processing-xml.html">here</a>:</p>

<figure class='code'><figcaption><span>GPath example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">books</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;</span>
</span><span class='line'><span class="s1">    &lt;response version-api=&quot;2.0&quot;&gt;</span>
</span><span class='line'><span class="s1">        &lt;value&gt;</span>
</span><span class='line'><span class="s1">            &lt;books&gt;</span>
</span><span class='line'><span class="s1">                &lt;book available=&quot;20&quot; id=&quot;1&quot;&gt;</span>
</span><span class='line'><span class="s1">                    &lt;title&gt;Don Xijote&lt;/title&gt;</span>
</span><span class='line'><span class="s1">                    &lt;author id=&quot;1&quot;&gt;Manuel De Cervantes&lt;/author&gt;</span>
</span><span class='line'><span class="s1">                &lt;/book&gt;</span>
</span><span class='line'><span class="s1">                &lt;book available=&quot;14&quot; id=&quot;2&quot;&gt;</span>
</span><span class='line'><span class="s1">                    &lt;title&gt;Catcher in the Rye&lt;/title&gt;</span>
</span><span class='line'><span class="s1">                   &lt;author id=&quot;2&quot;&gt;JD Salinger&lt;/author&gt;</span>
</span><span class='line'><span class="s1">               &lt;/book&gt;</span>
</span><span class='line'><span class="s1">               &lt;book available=&quot;13&quot; id=&quot;3&quot;&gt;</span>
</span><span class='line'><span class="s1">                   &lt;title&gt;Alice in Wonderland&lt;/title&gt;</span>
</span><span class='line'><span class="s1">                   &lt;author id=&quot;3&quot;&gt;Lewis Carroll&lt;/author&gt;</span>
</span><span class='line'><span class="s1">               &lt;/book&gt;</span>
</span><span class='line'><span class="s1">               &lt;book available=&quot;5&quot; id=&quot;4&quot;&gt;</span>
</span><span class='line'><span class="s1">                   &lt;title&gt;Don Xijote&lt;/title&gt;</span>
</span><span class='line'><span class="s1">                   &lt;author id=&quot;4&quot;&gt;Manuel De Cervantes&lt;/author&gt;</span>
</span><span class='line'><span class="s1">               &lt;/book&gt;</span>
</span><span class='line'><span class="s1">           &lt;/books&gt;</span>
</span><span class='line'><span class="s1">       &lt;/value&gt;</span>
</span><span class='line'><span class="s1">    &lt;/response&gt;</span>
</span><span class='line'><span class="s1">&#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlSlurper</span><span class="o">().</span><span class="na">parseText</span><span class="o">(</span><span class="n">books</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">book</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">value</span><span class="o">.</span><span class="na">books</span><span class="o">.</span><span class="na">book</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="kt">def</span> <span class="n">bookAuthorId1</span> <span class="o">=</span> <span class="n">book</span><span class="o">.</span><span class="nd">@id</span>
</span><span class='line'><span class="kt">def</span> <span class="n">bookAuthorId2</span> <span class="o">=</span> <span class="n">book</span><span class="o">[</span><span class="s1">&#39;@id&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">bookAuthorId1</span> <span class="o">==</span> <span class="s1">&#39;1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// .&#39;*&#39; could be replaced by .children()</span>
</span><span class='line'><span class="kt">def</span> <span class="n">catcherInTheRye</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">value</span><span class="o">.</span><span class="na">books</span><span class="o">.</span><span class="s1">&#39;*&#39;</span><span class="o">.</span><span class="na">find</span> <span class="o">{</span> <span class="n">node</span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="c1">// node.@id == 2 could be expressed as node[&#39;@id&#39;] == 2</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="na">name</span><span class="o">()</span> <span class="o">==</span> <span class="s1">&#39;book&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">node</span><span class="o">.</span><span class="nd">@id</span> <span class="o">==</span> <span class="s1">&#39;2&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">catcherInTheRye</span><span class="o">.</span><span class="na">title</span><span class="o">.</span><span class="na">text</span><span class="o">()</span> <span class="o">==</span> <span class="s1">&#39;Catcher in the Rye&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// .&#39;**&#39; could be replaced by .depthFirst()</span>
</span><span class='line'><span class="kt">def</span> <span class="n">bookId</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="s1">&#39;**&#39;</span><span class="o">.</span><span class="na">find</span> <span class="o">{</span> <span class="n">book</span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">book</span><span class="o">.</span><span class="na">author</span><span class="o">.</span><span class="na">text</span><span class="o">()</span> <span class="o">==</span> <span class="s1">&#39;Lewis Carroll&#39;</span>
</span><span class='line'><span class="o">}.</span><span class="nd">@id</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">bookId</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// find(Closure cl) finds just the first occurrence. To find all titles:</span>
</span><span class='line'><span class="kt">def</span> <span class="n">titles</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="s1">&#39;**&#39;</span><span class="o">.</span><span class="na">findAll</span><span class="o">{</span> <span class="n">node</span><span class="o">-&gt;</span> <span class="n">node</span><span class="o">.</span><span class="na">name</span><span class="o">()</span> <span class="o">==</span> <span class="s1">&#39;title&#39;</span> <span class="o">}*.</span><span class="na">text</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">titles</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see there are two types of notations to get attributes, the</p>

<ul>
<li>direct notation with <code>@nameoftheattribute</code></li>
<li>map notation using <code>['@nameoftheattribute']</code></li>
</ul>


<h3>Writing XML</h3>

<figure class='code'><figcaption><span>Standard usage of MarkupBuilder</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="o">()</span>
</span><span class='line'><span class="kt">def</span> <span class="n">xml</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MarkupBuilder</span><span class="o">(</span><span class="n">writer</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">xml</span><span class="o">.</span><span class="na">records</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">car</span><span class="o">(</span><span class="nl">name:</span><span class="s1">&#39;HSV Maloo&#39;</span><span class="o">,</span> <span class="nl">make:</span><span class="s1">&#39;Holden&#39;</span><span class="o">,</span> <span class="nl">year:</span><span class="mi">2006</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">country</span><span class="o">(</span><span class="s1">&#39;Australia&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">record</span><span class="o">(</span><span class="nl">type:</span><span class="s1">&#39;speed&#39;</span><span class="o">,</span> <span class="s1">&#39;Production Pickup Truck with speed of 271kph&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">car</span><span class="o">(</span><span class="nl">name:</span><span class="s1">&#39;Royale&#39;</span><span class="o">,</span> <span class="nl">make:</span><span class="s1">&#39;Bugatti&#39;</span><span class="o">,</span> <span class="nl">year:</span><span class="mi">1931</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">country</span><span class="o">(</span><span class="s1">&#39;France&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">record</span><span class="o">(</span><span class="nl">type:</span><span class="s1">&#39;price&#39;</span><span class="o">,</span> <span class="s1">&#39;Most Valuable Car at $15 million&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">records</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlSlurper</span><span class="o">().</span><span class="na">parseText</span><span class="o">(</span><span class="n">writer</span><span class="o">.</span><span class="na">toString</span><span class="o">())</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">records</span><span class="o">.</span><span class="na">car</span><span class="o">.</span><span class="na">first</span><span class="o">().</span><span class="na">name</span><span class="o">.</span><span class="na">text</span><span class="o">()</span> <span class="o">==</span> <span class="s1">&#39;HSV Maloo&#39;</span>
</span><span class='line'><span class="k">assert</span> <span class="n">records</span><span class="o">.</span><span class="na">car</span><span class="o">.</span><span class="na">last</span><span class="o">().</span><span class="na">name</span><span class="o">.</span><span class="na">text</span><span class="o">()</span> <span class="o">==</span> <span class="s1">&#39;Royale&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>See documentation for the following use cases:</p>

<ul>
<li>Namespace aware</li>
<li>Generate elements inside XML document.</li>
</ul>


<p>Using <code>StreamingMarkupBuilder</code> is very similar to using <code>MarkupBuilder</code>.
The <code>bind</code> method returns a <code>Writable</code> instance that can be used to stream the markup.</p>

<figure class='code'><figcaption><span>Standard usage of StreamingMarkupBuilder</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">xml</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StreamingMarkupBuilder</span><span class="o">().</span><span class="na">bind</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">records</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">car</span><span class="o">(</span><span class="nl">name:</span><span class="s1">&#39;HSV Maloo&#39;</span><span class="o">,</span> <span class="nl">make:</span><span class="s1">&#39;Holden&#39;</span><span class="o">,</span> <span class="nl">year:</span><span class="mi">2006</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">country</span><span class="o">(</span><span class="s1">&#39;Australia&#39;</span><span class="o">)</span>
</span><span class='line'>            <span class="n">record</span><span class="o">(</span><span class="nl">type:</span><span class="s1">&#39;speed&#39;</span><span class="o">,</span> <span class="s1">&#39;Production Pickup Truck with speed of 271kph&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">car</span><span class="o">(</span><span class="nl">name:</span><span class="s1">&#39;P50&#39;</span><span class="o">,</span> <span class="nl">make:</span><span class="s1">&#39;Peel&#39;</span><span class="o">,</span> <span class="nl">year:</span><span class="mi">1962</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">country</span><span class="o">(</span><span class="s1">&#39;Isle of Man&#39;</span><span class="o">)</span>
</span><span class='line'>            <span class="n">record</span><span class="o">(</span><span class="nl">type:</span><span class="s1">&#39;size&#39;</span><span class="o">,</span> <span class="s1">&#39;Smallest Street-Legal Car at 99cm wide and 59 kg in weight&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">car</span><span class="o">(</span><span class="nl">name:</span><span class="s1">&#39;Royale&#39;</span><span class="o">,</span> <span class="nl">make:</span><span class="s1">&#39;Bugatti&#39;</span><span class="o">,</span> <span class="nl">year:</span><span class="mi">1931</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">country</span><span class="o">(</span><span class="s1">&#39;France&#39;</span><span class="o">)</span>
</span><span class='line'>            <span class="n">record</span><span class="o">(</span><span class="nl">type:</span><span class="s1">&#39;price&#39;</span><span class="o">,</span> <span class="s1">&#39;Most Valuable Car at $15 million&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">records</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlSlurper</span><span class="o">().</span><span class="na">parseText</span><span class="o">(</span><span class="n">xml</span><span class="o">.</span><span class="na">toString</span><span class="o">())</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">records</span><span class="o">.</span><span class="na">car</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'><span class="k">assert</span> <span class="n">records</span><span class="o">.</span><span class="na">car</span><span class="o">.</span><span class="na">find</span> <span class="o">{</span> <span class="n">it</span><span class="o">.</span><span class="nd">@name</span> <span class="o">==</span> <span class="s1">&#39;P50&#39;</span> <span class="o">}.</span><span class="na">country</span><span class="o">.</span><span class="na">text</span><span class="o">()</span> <span class="o">==</span> <span class="s1">&#39;Isle of Man&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>MarkupBuilderHelper</h4>

<p>This helper normally can be accessed from within an instance of class MarkupBuilder or an instance of StreamingMarkupBuilder as <code>mkp</code> property.</p>

<figure class='code'><figcaption><span>Using mkp for comments and escape in XML</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">xmlWriter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="o">()</span>
</span><span class='line'><span class="kt">def</span> <span class="n">xmlMarkup</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MarkupBuilder</span><span class="o">(</span><span class="n">xmlWriter</span><span class="o">).</span><span class="na">rules</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mkp</span><span class="o">.</span><span class="na">comment</span><span class="o">(</span><span class="s1">&#39;THIS IS THE MAIN RULE&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">rule</span><span class="o">(</span><span class="nl">sentence:</span> <span class="n">mkp</span><span class="o">.</span><span class="na">yield</span><span class="o">(</span><span class="s1">&#39;3 &gt; n&#39;</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">xmlWriter</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="s1">&#39;3 &amp;gt; n&#39;</span><span class="o">)</span>
</span><span class='line'><span class="k">assert</span> <span class="n">xmlWriter</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="s1">&#39;&lt;!-- THIS IS THE MAIN RULE --&gt;&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Code recipes</h3>

<p>The input XML file is based on typical Maven &ldquo;settings.xml&rdquo; file.</p>

<p><strong>Recipe 1</strong>: Read, transform, and write to file. Based on <a href="https://stackoverflow.com/questions/2245641/load-modify-and-write-an-xml-document-in-groovy">this</a>.</p>

<figure class='code'><figcaption><span>XML transform to file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">groovy.xml.StreamingMarkupBuilder</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">groovy.xml.XmlUtil</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="nf">transformXml</span><span class="o">(</span><span class="n">String</span> <span class="n">filePath</span><span class="o">,</span> <span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">TMP_PATH</span> <span class="o">=</span> <span class="s1">&#39;/tmp/temp.xml&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="n">inFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span> <span class="n">filePath</span> <span class="o">)</span>
</span><span class='line'>  <span class="kt">def</span> <span class="n">outFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span> <span class="n">TMP_PATH</span> <span class="o">)</span>
</span><span class='line'>  <span class="kt">def</span> <span class="n">xml</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlSlurper</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">).</span><span class="na">parse</span><span class="o">(</span><span class="n">inFile</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">xml</span><span class="o">.</span><span class="na">servers</span><span class="o">.</span><span class="na">server</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">node</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="n">outBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StreamingMarkupBuilder</span><span class="o">()</span>
</span><span class='line'>  <span class="kt">def</span> <span class="n">outWriter</span> <span class="o">=</span> <span class="n">outFile</span><span class="o">.</span><span class="na">newWriter</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Option 1: Write XML to one line</span>
</span><span class='line'>  <span class="n">outWriter</span> <span class="o">&lt;&lt;</span> <span class="n">outBuilder</span><span class="o">.</span><span class="na">bind</span><span class="o">{</span> <span class="n">mkp</span><span class="o">.</span><span class="na">yield</span> <span class="n">xml</span> <span class="o">}</span>
</span><span class='line'>  <span class="c1">// Option 2: Pretty print XML</span>
</span><span class='line'>  <span class="n">XmlUtil</span><span class="o">.</span><span class="na">serialize</span><span class="o">(</span> <span class="n">xml</span><span class="o">,</span> <span class="n">outWriter</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">TMP_PATH</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For overwriting the original file (based on <a href="https://stackoverflow.com/questions/18385062/writing-updated-xml-to-originally-parsed-file">this</a>):</p>

<figure class='code'><figcaption><span>Write the transformed XML to original file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">inFile</span><span class="o">.</span><span class="na">withWriter</span> <span class="o">{</span> <span class="n">outWriter</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">XmlUtil</span><span class="o">.</span><span class="na">serialize</span><span class="o">(</span> <span class="k">new</span> <span class="n">StreamingMarkupBuilder</span><span class="o">().</span><span class="na">bind</span><span class="o">{</span> <span class="n">mkp</span><span class="o">.</span><span class="na">yield</span> <span class="n">xml</span> <span class="o">},</span> <span class="n">outWriter</span> <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Recipe 2</strong>: Read, transform, and write to string.</p>

<figure class='code'><figcaption><span>XML transform to String</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">groovy.xml.XmlUtil</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@NonCPS</span>
</span><span class='line'><span class="kt">def</span> <span class="nf">transformXml</span><span class="o">(</span><span class="n">String</span> <span class="n">xmlContent</span><span class="o">,</span> <span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">def</span> <span class="n">xml</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlSlurper</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">).</span><span class="na">parseText</span><span class="o">(</span><span class="n">xmlContent</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">echo</span> <span class="s1">&#39;Start tranforming XML&#39;</span>
</span><span class='line'>  <span class="n">xml</span><span class="o">.</span><span class="na">servers</span><span class="o">.</span><span class="na">server</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">node</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="n">outWriter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="o">()</span>
</span><span class='line'>  <span class="n">XmlUtil</span><span class="o">.</span><span class="na">serialize</span><span class="o">(</span> <span class="n">xml</span><span class="o">,</span> <span class="n">outWriter</span> <span class="o">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">outWriter</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Tips</h3>

<ul>
<li><code>XmlSlurper(false, false)</code> is used due to <a href="https://stackoverflow.com/questions/9197588/tag0-namespace-added-for-elements-in-default-namespace">this</a></li>
</ul>


<h3>References</h3>

<ul>
<li><a href="http://groovy-lang.org/processing-xml.html">Processing XML</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle Cookbook]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/05/11/gradle-cookbook/"/>
    <updated>2017-05-11T10:20:39-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/05/11/gradle-cookbook</id>
    <content type="html"><![CDATA[<p>This post goes over simple (but beyond the very basic) recipes for getting started with Gradle.</p>

<!--more-->


<h3>Basic tasks</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./gradlew dependencies
</span><span class='line'>
</span><span class='line'># Subproject
</span><span class='line'>./gradlew :subprojectName:dependencies
</span><span class='line'>
</span><span class='line'># Configuration
</span><span class='line'>./gradlew dependencies --configuration testCompile</span></code></pre></td></tr></table></div></figure>


<p>In the second command based on <a href="http://stackoverflow.com/questions/27763472/how-to-check-dependency-list-at-runtime-gradle">this example</a>, the root project might not have dependencies and you want to list dependencies on one of the subprojects.</p>

<p>In the third command based on <a href="https://discuss.gradle.org/t/how-to-find-which-dependency-is-fetching-a-certain-jar/7319/10">this example</a>, you want to see which task will fetch a certain JAR (e.g., velocity).</p>

<h3>Sample <code>build.gradle</code> file</h3>

<p>Most of the tutorials show a very simplistic <code>build.gradle</code> file to illustrate the basics.
However, starting from those simple build files will often lead to frequent major changes, coming from frequent Google and StackOverflow searches for how to do something (e.g., Nexus authentication).
This section shows how a <code>build.gradle</code> file looks like for a medium-size team working in industry.</p>

<figure class='code'><figcaption><span>Sample build file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">buildscript</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">credentials</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">username</span> <span class="n">nexusUsername</span>
</span><span class='line'>                <span class="n">password</span> <span class="n">nexusPassword</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">url</span> <span class="o">{</span> <span class="n">nexusPublic</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="s1">&#39;com.h2database:h2:1.3.170&#39;</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="s1">&#39;org.postgresql:postgresql:9.4-1201-jdbc41&#39;</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="s1">&#39;com.example.plugins:some-gradle-plugin:1.1.6&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;com.example.plugins&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">subprojects</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">credentials</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">username</span> <span class="n">nexusUsername</span>
</span><span class='line'>                <span class="n">password</span> <span class="n">nexusPassword</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">url</span> <span class="o">{</span> <span class="n">nexusPublic</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;groovy&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">group</span> <span class="o">=</span> <span class="s1">&#39;com.example.app&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Core</span>
</span><span class='line'>        <span class="n">compile</span> <span class="o">(</span><span class="s1">&#39;org.apache.kafka:kafka_2.11:0.8.2.0&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">exclude</span> <span class="nl">module:</span> <span class="s1">&#39;jms&#39;</span>
</span><span class='line'>            <span class="n">exclude</span> <span class="nl">module:</span> <span class="s1">&#39;jmxtools&#39;</span>
</span><span class='line'>            <span class="n">exclude</span> <span class="nl">module:</span> <span class="s1">&#39;jmxri&#39;</span>
</span><span class='line'>            <span class="n">exclude</span> <span class="nl">group:</span> <span class="s1">&#39;org.slf4j&#39;</span>
</span><span class='line'>            <span class="n">exclude</span> <span class="nl">module:</span> <span class="s1">&#39;junit&#39;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">compile</span> <span class="s1">&#39;com.amazonaws:aws-java-sdk:1.9.24&#39;</span>
</span><span class='line'>        <span class="n">compile</span> <span class="s1">&#39;io.swagger:swagger-core:1.5.10&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * junit is excluded in multiple places, because org.apache.cassandra.cassandra-all:2.1.9</span>
</span><span class='line'><span class="cm">         * includes JUnit 4.8.1 as a compile dependency, and our test framework needing 4.12</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="c1">// Support</span>
</span><span class='line'>        <span class="n">compile</span> <span class="o">(</span><span class="s2">&quot;org.apache.cassandra.cassandra-all:2.1.9&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">exclude</span> <span class="nl">module:</span> <span class="s1">&#39;junit&#39;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">compile</span> <span class="o">(</span><span class="s2">&quot;com.example.app:common:${commons_version}&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">exclude</span> <span class="nl">module:</span> <span class="s1">&#39;junit&#39;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">compile</span> <span class="s2">&quot;org.flywaydb:flyway-core:3.2.1&quot;</span>
</span><span class='line'>        <span class="n">testCompile</span> <span class="s1">&#39;org.hsqldb:hsqldb:2.3.2&#39;</span>
</span><span class='line'>        <span class="n">compile</span> <span class="s1">&#39;com.google.code.findbugs:findbugs:3.0.1&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// CassandraSetupTest-based tests fail for newer versions of Guava.</span>
</span><span class='line'>    <span class="n">configurations</span><span class="o">.</span><span class="na">all</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">resolutionStrategy</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">force</span> <span class="s1">&#39;com.google.guava:guava:18.0&#39;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">jacocoCoverage</span><span class="o">.</span><span class="na">limits</span> <span class="o">=</span>  <span class="o">[</span>
</span><span class='line'>    <span class="s1">&#39;instruction&#39;</span><span class="o">:</span> <span class="mi">40</span><span class="o">,</span>
</span><span class='line'>    <span class="s1">&#39;line&#39;</span>       <span class="o">:</span> <span class="mi">48</span><span class="o">,</span>
</span><span class='line'>    <span class="s1">&#39;complexity&#39;</span> <span class="o">:</span> <span class="mi">30</span><span class="o">,</span>
</span><span class='line'>    <span class="s1">&#39;method&#39;</span>     <span class="o">:</span> <span class="mi">55</span><span class="o">,</span>
</span><span class='line'>    <span class="s1">&#39;class&#39;</span>      <span class="o">:</span> <span class="mi">70</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">project</span><span class="o">(</span><span class="s1">&#39;:server&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mainClassName</span> <span class="o">=</span> <span class="s1">&#39;com.example.app.ApiApplication&#39;</span>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">compile</span> <span class="s1">&#39;com.exacttarget:partner-api:1.0.3&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">testCompile</span> <span class="s1">&#39;com.squareup.okhttp3:mockwebserver:3.2.0&#39;</span>
</span><span class='line'>        <span class="n">testCompile</span> <span class="s1">&#39;org.apache.lucene:lucene-test-framework:5.3.1&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">test</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">exclude</span> <span class="s1">&#39;**/SomeClass.class&#39;</span>
</span><span class='line'>        <span class="n">exclude</span> <span class="s1">&#39;**/*IntegrationTest.*&#39;</span>
</span><span class='line'>      <span class="n">exclude</span> <span class="s1">&#39;**/schema/model/*MoreWildcard.class&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// generateSwagger is not a Test but depends on the testing framework</span>
</span><span class='line'>    <span class="n">task</span> <span class="nf">generateSwagger</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Test</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="n">testClasses</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">include</span> <span class="s1">&#39;**/util/SwaggerFileGenerator.class&#39;</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">swaggerPath</span> <span class="o">=</span> <span class="s1">&#39;build/swagger-test.yaml&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Not considered &quot;UP-TO-DATE&quot; if the output file does not exist</span>
</span><span class='line'>        <span class="n">outputs</span><span class="o">.</span><span class="na">upToDateWhen</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">file</span><span class="o">(</span><span class="s1">&#39;server/&#39;</span> <span class="o">+</span> <span class="n">swaggerPath</span><span class="o">).</span><span class="na">exists</span><span class="o">()</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">systemProperty</span> <span class="s1">&#39;test.swagger.outfile&#39;</span><span class="o">,</span> <span class="n">file</span><span class="o">(</span><span class="n">swaggerPath</span><span class="o">)</span>
</span><span class='line'>        <span class="n">doLast</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">println</span> <span class="s2">&quot;\n\nSwagger documentation can be found in api/server/${swaggerPath}\n\n&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">checkstyle</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">checkstyleMain</span><span class="o">.</span><span class="na">exclude</span> <span class="s1">&#39;**/db/migration/*.java&#39;</span> <span class="c1">// Exclude flywaydb migrations: they violate type name checks</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">jacocoCoverage</span><span class="o">.</span><span class="na">limits</span> <span class="o">=</span>  <span class="o">[</span>
</span><span class='line'>        <span class="s1">&#39;instruction&#39;</span><span class="o">:</span> <span class="mi">40</span><span class="o">,</span>
</span><span class='line'>        <span class="s1">&#39;line&#39;</span>       <span class="o">:</span> <span class="mi">48</span><span class="o">,</span>
</span><span class='line'>        <span class="s1">&#39;complexity&#39;</span> <span class="o">:</span> <span class="mi">30</span><span class="o">,</span>
</span><span class='line'>        <span class="s1">&#39;method&#39;</span>     <span class="o">:</span> <span class="mi">55</span><span class="o">,</span>
</span><span class='line'>        <span class="s1">&#39;class&#39;</span>      <span class="o">:</span> <span class="mi">70</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Maven/Nexus authentication</h4>

<p>In Gradle, Nexus authentication can be specified in both <code>build.gradle</code> and <code>gradle.properties</code> file, where <code>build.gradle</code> should be checked into VCS (e.g., git) while <code>gradle.properties</code> contains sensitive credentials information.</p>

<figure class='code'><figcaption><span>Example build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">credentials</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">username</span> <span class="n">nexusUsername</span>
</span><span class='line'>            <span class="n">password</span> <span class="n">nexusPassword</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">url</span> <span class="o">{</span> <span class="n">nexusPublic</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Example gradle.properties</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">nexusUsername</span><span class="o">=</span><span class="s">myUsername</span>
</span><span class='line'><span class="na">nexusPassword</span><span class="o">=</span><span class="s">password123</span>
</span><span class='line'><span class="na">nexusPublic</span><span class="o">=</span><span class="s">https://nexus.example.com/nexus/content/groups/public/</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Jenkins, to securely passing Nexus credentials, <code>properties</code> file is not recommended.
Instead, use <code>withCredentials</code> for passing credentials as shown in <a href="http://tdongsi.github.io/blog/2017/05/20/gradle-settings-in-jenkinsfile/">this blog post</a>.</p>

<h4><code>buildscript</code> block</h4>

<p>From <a href="https://discuss.gradle.org/t/what-is-difference-between-buildscript-classpath-and-dependencies-compile/4290/2">here</a>,
the <code>buildscript</code> block only controls dependencies for the buildscript process itself, not for the application code, which the top-level <code>dependencies</code> block controls.
For instance, you could define dependencies in &ldquo;buildscript/classpath&rdquo; that represent Gradle plugins used in the build process.
Those plugins would not be referenced as dependencies for the application code.
Read the Gradle User Guide for more information (the PDF is easy to search).</p>

<h4>Proxy</h4>

<p>Use <code>http.proxyHost</code> and <code>https.proxyHost</code> accordingly for setting up proxy.</p>

<figure class='code'><figcaption><span>Example HTTP proxy in Jenkinsfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>        <span class="n">echo</span> <span class="s2">&quot;Running with proxy ${env.https_proxy} and ${env.http_proxy}&quot;</span>
</span><span class='line'>        <span class="n">PROXY_OPTIONS</span> <span class="o">=</span> <span class="s1">&#39;-Dhttps.proxyHost=public0-proxy1.data.example.net -Dhttps.proxyPort=8080&#39;</span>
</span><span class='line'>        <span class="n">sh</span> <span class="s2">&quot;./gradlew ${PROXY_OPTIONS} run --stacktrace --info&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Quick-start for Groovy Programming Test]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/05/10/tutorial-quick-start-for-groovy-programming-test/"/>
    <updated>2017-05-10T00:07:18-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/05/10/tutorial-quick-start-for-groovy-programming-test</id>
    <content type="html"><![CDATA[<p>This post lists out steps to get started quickly for a <strong>Groovy</strong> programming test, using Eclipse and Maven.</p>

<!--more-->


<h3>Maven-based Java project</h3>

<p>The simplest way is to generate a Maven-based Java project and add Groovy codes and dependencies to it.
In IntelliJ IDEA, all you need to do is to add this into the pom.xml file:</p>

<figure class='code'><figcaption><span>Groovy dependencies</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.codehaus.groovy<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>groovy-all<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>2.4.13<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, you can start adding package and Groovy file, e.g., HelloWorld.groovy, into &ldquo;src/main/groovy&rdquo; folder.
See <a href="https://github.com/tdongsi/java/commit/3ce5202f9c575f735f14f095ea26759224316576">example commit</a>.</p>

<p>In Eclipse, according to <a href="http://www.s0hel.com/blog/523/compile-groovy-files-with-maven-in-your-java-project/">this blog</a>, you might need the following plugins:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;build&gt;</span>
</span><span class='line'>...
</span><span class='line'><span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>  <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>3.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>      <span class="nt">&lt;compilerId&gt;</span>groovy-eclipse-compiler<span class="nt">&lt;/compilerId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>org.codehaus.groovy<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>groovy-eclipse-compiler<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;version&gt;</span>2.8.0-01<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>org.codehaus.groovy<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>groovy-eclipse-batch<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;version&gt;</span>2.4.13<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>  ...
</span><span class='line'><span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'><span class="nt">&lt;/build&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the versions must match between <code>groovy-eclipse-batch</code> and <code>groovy-all</code>.</p>

<h3>Pure Groovy project</h3>

<p>Alternatively, you can create pure Groovy project in IntelliJ IDEA.</p>

<h3>Reference</h3>

<ul>
<li><a href="http://www.s0hel.com/blog/523/compile-groovy-files-with-maven-in-your-java-project/">Compiling Groovy in Eclipse</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Date and Time in Java 7 vs Java 8]]></title>
    <link href="http://tdongsi.github.io/java/blog/2016/12/27/date-and-time-in-java-7-vs-java-8/"/>
    <updated>2016-12-27T18:50:15-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2016/12/27/date-and-time-in-java-7-vs-java-8</id>
    <content type="html"><![CDATA[<p>This post discuss how you handle date and time data in Java 8 and compare it with Java 7.</p>

<!--more-->


<h3>Date and Time in Java 8</h3>

<p><code>java.time</code> is the new package in Java 8 for handling date and time.
It is heavily based on <code>joda-time</code> package which is the de facto standard Java package for handling date &amp; time before Java 8.
This hopefully will put an end to the messy Date &amp; Time classes in <code>java.util</code> package.</p>

<figure class='code'><figcaption><span>java.time demos</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Instant</span>
</span><span class='line'><span class="n">Instant</span> <span class="n">now</span> <span class="o">=</span> <span class="n">Instant</span><span class="o">.</span><span class="na">now</span><span class="o">();</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;Instant.now(): %s%n&quot;</span><span class="o">,</span> <span class="n">now</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Duration</span>
</span><span class='line'><span class="n">Instant</span> <span class="n">then</span> <span class="o">=</span> <span class="n">now</span><span class="o">.</span><span class="na">plus</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">ChronoUnit</span><span class="o">.</span><span class="na">DAYS</span><span class="o">);</span>
</span><span class='line'><span class="n">Duration</span> <span class="n">elapsed</span> <span class="o">=</span> <span class="n">Duration</span><span class="o">.</span><span class="na">between</span><span class="o">(</span><span class="n">now</span><span class="o">,</span> <span class="n">then</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;Duration: %s%n&quot;</span><span class="o">,</span> <span class="n">elapsed</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;Duration in hours: %d hours %n&quot;</span><span class="o">,</span> <span class="n">elapsed</span><span class="o">.</span><span class="na">toHours</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">then</span> <span class="o">=</span> <span class="n">now</span><span class="o">.</span><span class="na">plus</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">ChronoUnit</span><span class="o">.</span><span class="na">DAYS</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">plus</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">ChronoUnit</span><span class="o">.</span><span class="na">HALF_DAYS</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">plus</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">ChronoUnit</span><span class="o">.</span><span class="na">HOURS</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">plus</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="n">ChronoUnit</span><span class="o">.</span><span class="na">MINUTES</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">plusSeconds</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;Then: %s %n&quot;</span><span class="o">,</span> <span class="n">then</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// LocalDate</span>
</span><span class='line'><span class="n">LocalDate</span> <span class="n">localNow</span> <span class="o">=</span> <span class="n">LocalDate</span><span class="o">.</span><span class="na">now</span><span class="o">();</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;LocalDate.now(): %s%n&quot;</span><span class="o">,</span> <span class="n">localNow</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Factory method</span>
</span><span class='line'><span class="n">LocalDate</span> <span class="n">firstDayOfSpring</span> <span class="o">=</span> <span class="n">LocalDate</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2017</span><span class="o">,</span> <span class="n">Month</span><span class="o">.</span><span class="na">MARCH</span><span class="o">,</span> <span class="mi">20</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;First day of spring %s falls on %s%n&quot;</span><span class="o">,</span> <span class="n">firstDayOfSpring</span><span class="o">,</span> <span class="n">firstDayOfSpring</span><span class="o">.</span><span class="na">getDayOfWeek</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Time zones</span>
</span><span class='line'><span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">allTimeZones</span> <span class="o">=</span> <span class="n">ZoneId</span><span class="o">.</span><span class="na">getAvailableZoneIds</span><span class="o">();</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;Total number of time zones: %d%n&quot;</span><span class="o">,</span> <span class="n">allTimeZones</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'><span class="n">allTimeZones</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">name</span> <span class="o">-&gt;</span> <span class="n">name</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;America&quot;</span><span class="o">)).</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ZonedDateTime</span>
</span><span class='line'><span class="n">ZonedDateTime</span> <span class="n">missing</span> <span class="o">=</span> <span class="n">ZonedDateTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
</span><span class='line'>    <span class="n">LocalDate</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2016</span><span class="o">,</span> <span class="n">Month</span><span class="o">.</span><span class="na">MARCH</span><span class="o">,</span> <span class="mi">13</span><span class="o">),</span>
</span><span class='line'>    <span class="n">LocalTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">30</span><span class="o">),</span>
</span><span class='line'>    <span class="n">ZoneId</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&quot;America/New_York&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">missing</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// DateTimeFormatter</span>
</span><span class='line'><span class="n">DateTimeFormatter</span> <span class="n">formatter</span> <span class="o">=</span> <span class="n">DateTimeFormatter</span><span class="o">.</span><span class="na">ofLocalizedDateTime</span><span class="o">(</span><span class="n">FormatStyle</span><span class="o">.</span><span class="na">LONG</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">withLocale</span><span class="o">(</span><span class="n">Locale</span><span class="o">.</span><span class="na">FRANCE</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">formatter</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">missing</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// From Javadoc</span>
</span><span class='line'><span class="n">LocalDate</span> <span class="n">customerBirthday</span> <span class="o">=</span> <span class="n">firstDayOfSpring</span><span class="o">;</span>
</span><span class='line'><span class="n">LocalDate</span> <span class="n">today</span> <span class="o">=</span> <span class="n">LocalDate</span><span class="o">.</span><span class="na">now</span><span class="o">();</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">customerBirthday</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">today</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'><span class="n">LocalDate</span> <span class="n">specialOfferExpiryDate</span> <span class="o">=</span> <span class="n">today</span><span class="o">.</span><span class="na">plusWeeks</span><span class="o">(</span><span class="mi">2</span><span class="o">).</span><span class="na">with</span><span class="o">(</span><span class="n">TemporalAdjusters</span><span class="o">.</span><span class="na">next</span><span class="o">(</span><span class="n">DayOfWeek</span><span class="o">.</span><span class="na">FRIDAY</span><span class="o">));</span>
</span><span class='line'><span class="c1">// customer.sendBirthdaySpecialOffer(specialOfferExpiryDate);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Compared with Java 7</h3>

<p>Handling date time data in Java 8 seems more elegant although not obvious.
As an example, the code for solving the same date time problem (<a href="https://projecteuler.net/problem=19">Project Euler number 19</a>) in Java 7 and 8 are shown below:</p>

<figure class='code'><figcaption><span>Solving Project Euler 19 in Java 8</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">long</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">year</span> <span class="o">=</span> <span class="mi">1901</span><span class="o">;</span> <span class="n">year</span> <span class="o">&lt;=</span> <span class="mi">2000</span><span class="o">;</span> <span class="n">year</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">Month</span> <span class="nl">month:</span> <span class="n">Month</span><span class="o">.</span><span class="na">values</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">LocalDate</span> <span class="n">date</span> <span class="o">=</span> <span class="n">LocalDate</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">year</span><span class="o">,</span> <span class="n">month</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">date</span><span class="o">.</span><span class="na">getDayOfWeek</span><span class="o">()</span> <span class="o">==</span> <span class="n">DayOfWeek</span><span class="o">.</span><span class="na">SUNDAY</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">count</span><span class="o">++;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Solving Proiect Euler 19 in Java 7</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="n">Calendar</span> <span class="n">calendar</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">GregorianCalendar</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// From year 1901 to 2000.</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span> <span class="kt">int</span> <span class="n">year</span><span class="o">=</span><span class="mi">1901</span><span class="o">;</span> <span class="n">year</span> <span class="o">&lt;=</span> <span class="mi">2000</span><span class="o">;</span> <span class="n">year</span><span class="o">++</span> <span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="c1">// From month January to December</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span> <span class="kt">int</span> <span class="n">month</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">month</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="o">;</span> <span class="n">month</span><span class="o">++</span> <span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Set to the first day of the month</span>
</span><span class='line'>        <span class="n">calendar</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">year</span><span class="o">,</span> <span class="n">month</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// If the date is Sunday</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span> <span class="n">calendar</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">Calendar</span><span class="o">.</span><span class="na">DAY_OF_WEEK</span><span class="o">)</span> <span class="o">==</span> <span class="n">Calendar</span><span class="o">.</span><span class="na">SUNDAY</span> <span class="o">)</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="n">count</span><span class="o">++;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the code is pretty much similar although the Java 8 code seems more elegant IMO (no mutable object).
Although it is not obvious in the examples above, the Java 7 date and time can be awkward with some subtle pitfalls.
For example, the MONTH field of the Calendar class does not go from 1 to 12 like they do when we write dates otherwise.
Instead the months run from 0 to 11, where 0 is January and 11 is December, as seen in <code>calendar.set(year, month, 1)</code> above.
Further more, the day of week runs from 1 to 7 but Sunday, not Monday, is the first day of the week.
These can cause subtle bugs if you are not aware and apply precaution.</p>

<h3>Reference</h3>

<ul>
<li><a href="http://tutorials.jenkov.com/java-date-time/java-util-calendar.html">Java 7 examples</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 8]]></title>
    <link href="http://tdongsi.github.io/java/blog/2016/12/17/java-8/"/>
    <updated>2016-12-17T22:37:46-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2016/12/17/java-8</id>
    <content type="html"><![CDATA[<p>This post discusses various new features in Java 8.
Java 8 is considered the latest Long-Term Support (LTS) release in new Java release schedule.</p>

<!--more-->


<h3>Lambdas</h3>

<figure class='code'><figcaption><span>Different forms</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="kt">int</span> <span class="n">MULTIPLIER</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'><span class="c1">// &quot;local variables referenced from a lambda expression/inner class must be final or effectively final&quot;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">aMultiplier</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Simplest lambda form</span>
</span><span class='line'><span class="n">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">9</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">n</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Full lambda form</span>
</span><span class='line'><span class="n">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">9</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">forEach</span><span class="o">((</span><span class="n">Integer</span> <span class="n">n</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">n</span> <span class="o">*</span> <span class="n">MULTIPLIER</span><span class="o">);</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Classic equivalent: anonymous inner class</span>
</span><span class='line'><span class="n">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">9</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="k">new</span> <span class="n">Consumer</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">Integer</span> <span class="n">integer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Second: &quot;</span> <span class="o">+</span> <span class="n">integer</span> <span class="o">*</span> <span class="n">aMultiplier</span> <span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Streams</h3>

<p>There are many ways to produce streams.</p>

<ul>
<li>Stream.of()</li>
<li>Stream.iterate()</li>
<li>Stream.generate()</li>
<li>Special methods in classes. E.g.:

<ul>
<li>Collections.stream()</li>
<li>Random.doubles()</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Common Interview Questions]]></title>
    <link href="http://tdongsi.github.io/java/blog/2016/09/09/common-interview-questions/"/>
    <updated>2016-09-09T00:50:08-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2016/09/09/common-interview-questions</id>
    <content type="html"><![CDATA[<p>Common interview questions that are specific to Java language.</p>

<!--more-->


<h3>Trivia Questions</h3>

<p>The full list is <a href="http://javarevisited.blogspot.sg/2015/10/133-java-interview-questions-answers-from-last-5-years.html">here</a>.</p>

<ol>
<li>Why constructors dont return any value. What problem did Java face in returning a value from Constructors?

<ul>
<li>So the reason the constructor doesn&rsquo;t return a value is because it&rsquo;s not called directly by your code, it&rsquo;s called by the memory allocation and object initialization code in the runtime.
Its return value (if it actually has one when compiled down to machine code) is opaque to the user - therefore, you can&rsquo;t specify it.</li>
</ul>
</li>
<li>Difference between abstract class and interface?

<ul>
<li>The question is lame. However, it comes up so often that you have to get ready for it.
Failing to give the expected answer can make you fail in the phone screen.</li>
<li>Answer <a href="http://javarevisited.blogspot.com/2013/05/difference-between-abstract-class-vs-interface-java-when-prefer-over-design-oops.html">here</a>.</li>
</ul>
</li>
<li>What is string immutable? What is intern() method on String?</li>
<li>What is the difference between StringBuilder vs. StringBuffer? Vector and ArrayList?</li>
<li>Generics: is there any way to get the generic type in your program? (Answer: no due to type erasure)</li>
<li>Design pattern: what do you know? Which one do you use most? In what situation?</li>
<li>What is the <code>finalize()</code> method?

<ul>
<li>Finalizers are unpredictable, often dangerous, and generally unnecessary.
Only use it when you need a safety-net, a reminder to call explicit termination method OR you work with native methods and objects.</li>
</ul>
</li>
</ol>


<p>Java:</p>

<ul>
<li>Methods of Object class (relation between hashCode() and equals(), give a simple algorithm to do hashCode(), when to use finalize()). See chapter in Effective Java (see wiki)

<ul>
<li>equals() compare the hash code that is generated by hashCode(), usually different for different instances. If the two different objects, such as String, have equals() as true, the equals() function must be overridden.</li>
<li>Simple hashCode: use the time of creation.</li>
</ul>
</li>
<li>Collections framework (when to use Map, List, Set; implementations of those). See wiki</li>
<li>Some details about frequently used classes: String class (e.g., what intern() method does), StringBuilder vs. StringBuffer</li>
<li>Java I/O: using Scanner, printf, InputStream</li>
<li>Java generics: erasure, Java generics vs. C++ template</li>
<li>It&rsquo;s very impressive if you know about Java concurrency: e.g., what is volatile? when to use it? synchronize?</li>
</ul>


<p>20) From this book, which methods are invoked? Classes are extended as Dessert &lt;- Cake &lt;- ChocolateCake, and Dessert &lt;- Scone &lt;- ButteredScone.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Overloaded method forms</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">more</span><span class="o">(</span> <span class="n">Dessert</span> <span class="n">d</span><span class="o">,</span> <span class="n">Scone</span> <span class="n">s</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">more</span><span class="o">(</span> <span class="n">Cake</span> <span class="n">c</span><span class="o">,</span> <span class="n">Dessert</span> <span class="n">d</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">more</span><span class="o">(</span> <span class="n">Chocolatecake</span> <span class="n">cc</span><span class="o">,</span> <span class="n">Scone</span> <span class="n">s</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">more</span><span class="o">(</span> <span class="n">Dessert</span><span class="o">...</span> <span class="n">desserts</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Method invocations</span>
</span><span class='line'><span class="n">more</span><span class="o">(</span> <span class="n">dessertRef</span><span class="o">,</span> <span class="n">sconeRef</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="n">more</span><span class="o">(</span> <span class="n">chocolateCakeRef</span><span class="o">,</span> <span class="n">dessertRef</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="n">more</span><span class="o">(</span> <span class="n">chocolateCakeRef</span><span class="o">,</span> <span class="n">butteredSconeRef</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="n">more</span><span class="o">(</span> <span class="n">cakeRef</span><span class="o">,</span> <span class="n">sconeRef</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="n">more</span><span class="o">(</span> <span class="n">sconeRef</span><span class="o">,</span> <span class="n">cakeRef</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Singleton design pattern</h3>

<p>See <a href="http://tdongsi.github.io/SqlTests/blog/2011/01/21/classic-interview-questions/">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Quick-start for Java Programming Test]]></title>
    <link href="http://tdongsi.github.io/java/blog/2016/08/29/tutorial-timed-programming-test/"/>
    <updated>2016-08-29T01:38:40-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2016/08/29/tutorial-timed-programming-test</id>
    <content type="html"><![CDATA[<p>For <strong>timed</strong> programming tests, new test-takers usually underestimate how short two and a half hours can be.
Remember that 30 minutes of that will go into reading the problem instructions and another 10 to 30 minutes go into setting up before you can start writing the first line of code.
And if you are unlucky, you need another 15-30 minutes to debug any issue that comes up.
That leaves you only about one hour for actually solving the problem.
Most of the test takers are experienced and skilled programmers, but they tend to forget that many of those steps above are not needed in their everyday tasks, in their daily environments and routines.</p>

<p>This post lists out steps to get started quickly for a <strong>Java</strong> programming test, using Eclipse and Maven.</p>

<!--more-->


<p>(0) The following steps assume computers with no previous setup.
For work computers, they usually have corporate <code>settings.xml</code> already set up.
You might have to override such corporate settings with standard Maven settings by using <a href="http://tdongsi.github.io/java/blog/2015/06/19/maven-cookbook/">minimal <code>settings.xml</code></a>.</p>

<p>(1) Use this command to setup an Eclipse empty project.</p>

<figure class='code'><figcaption><span>Create an Eclipse project</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn archetype:generate -DgroupId=my.interview -DartifactId=CompanyName -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false</span></code></pre></td></tr></table></div></figure>


<p>(2a) In Eclipse, go to File > Import > Existing Maven Project. Import the Eclipse project created above.</p>

<p>(2b) In IntellJ, Import Project > select the <code>pom.xml</code>.
On work computer, you might want to go to Environment Settings > Override <code>settings.xml</code>.</p>

<p>(3) Update pom.xml for &ldquo;Executable jar file&rdquo; + &ldquo;specified Java version&rdquo;. Replace <code>my.interview.CompanyName</code> with the correct name of your main class.</p>

<figure class='code'><figcaption><span>Add this into pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;build&gt;</span>
</span><span class='line'>    <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>        <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>maven-assembly-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>                <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;goal&gt;</span>attached<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;phase&gt;</span>package<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;descriptorRefs&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;descriptorRef&gt;</span>jar-with-dependencies<span class="nt">&lt;/descriptorRef&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/descriptorRefs&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;archive&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;manifest&gt;</span>
</span><span class='line'>                                <span class="nt">&lt;mainClass&gt;</span>my.interview.CompanyName<span class="nt">&lt;/mainClass&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;/manifest&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/archive&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>        <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>3.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;source&gt;</span>1.8<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>                <span class="nt">&lt;target&gt;</span>1.8<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'><span class="nt">&lt;/build&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>(4) Add logging. Ability to use logging frameworks shows off your skill and experience.
More importantly, it allows you to liberally print lots of information needed for debugging without worrying about cleaning up console output later.</p>

<ul>
<li>Create <code>resources</code> source folder in <code>src/main</code>.</li>
<li>Add <code>log4j.properties</code>. For simplicity, only log information to console.

<ul>
<li>Use <code>logger.debug</code> for printing debug information and turn on/off logging by setting <code>rootLogger</code> to <code>DEBUG</code>/<code>INFO</code>.</li>
</ul>
</li>
<li>You need to add into <code>pom.xml</code> dependencies for the three followings: <code>slf4j-api</code> (interface), <code>slf4j-log4j12</code> (route slf4j calls to log4j), <code>log4j</code> (logging backend).</li>
</ul>


<p>Use the following content for <code>log4j.properties</code>, modified from <a href="https://logging.apache.org/log4j/1.2/manual.html">this example</a>.</p>

<figure class='code'><figcaption><span>log4j.properties file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">#</span> <span class="n">Set</span> <span class="n">root</span> <span class="n">logger</span> <span class="n">level</span> <span class="n">to</span> <span class="n">DEBUG</span> <span class="n">and</span> <span class="n">its</span> <span class="n">only</span> <span class="n">appender</span> <span class="n">to</span> <span class="n">A1</span><span class="o">.</span>
</span><span class='line'><span class="n">log4j</span><span class="o">.</span><span class="na">rootLogger</span><span class="o">=</span> <span class="n">INFO</span><span class="o">,</span> <span class="n">A1</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="n">A1</span> <span class="n">is</span> <span class="n">set</span> <span class="n">to</span> <span class="n">be</span> <span class="n">a</span> <span class="n">ConsoleAppender</span><span class="o">.</span>
</span><span class='line'><span class="n">log4j</span><span class="o">.</span><span class="na">appender</span><span class="o">.</span><span class="na">A1</span><span class="o">=</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">log4j</span><span class="o">.</span><span class="na">ConsoleAppender</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="n">A1</span> <span class="n">uses</span> <span class="n">PatternLayout</span><span class="o">.</span>
</span><span class='line'><span class="n">log4j</span><span class="o">.</span><span class="na">appender</span><span class="o">.</span><span class="na">A1</span><span class="o">.</span><span class="na">layout</span><span class="o">=</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">log4j</span><span class="o">.</span><span class="na">PatternLayout</span>
</span><span class='line'><span class="n">log4j</span><span class="o">.</span><span class="na">appender</span><span class="o">.</span><span class="na">A1</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">ConversionPattern</span><span class="o">=</span> <span class="o">[%</span><span class="n">t</span><span class="o">][%-</span><span class="mi">5</span><span class="n">p</span><span class="o">][%</span><span class="n">c</span><span class="o">]</span> <span class="o">-</span> <span class="o">%</span><span class="n">m</span><span class="o">%</span><span class="n">n</span>
</span></code></pre></td></tr></table></div></figure>


<p>(5) At the end, your <code>pom.xml</code> shoulld looks like <a href="https://github.com/tdongsi/bart-parking/blob/f8511604bafa4564c468f952ca2fce1452f6a097/java/bart/pom.xml">this</a>. Check setup.</p>

<figure class='code'><figcaption><span>Check running</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn clean package
</span><span class='line'>java -jar target/xxx-jar-with-dependencies.jar</span></code></pre></td></tr></table></div></figure>


<p>(6) Use <code>StreamEditor</code> interface for easy testing in Eclipse and CLI.</p>

<figure class='code'><figcaption><span>StreamEditor interface</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">StreamEditor</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">InputStream</span> <span class="n">in</span><span class="o">,</span> <span class="n">PrintStream</span> <span class="n">out</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Main class calling Solver that implements StreamEditor interface</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">InputStream</span> <span class="n">in</span><span class="o">;</span>
</span><span class='line'>      <span class="n">PrintStream</span> <span class="n">out</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">FileInputStream</span><span class="o">(</span><span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
</span><span class='line'>              <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">PrintStream</span><span class="o">(</span><span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]));</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Could not find file&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="k">return</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">in</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">;</span>
</span><span class='line'>          <span class="n">out</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">Solver</span> <span class="n">solver</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Solver</span><span class="o">();</span>
</span><span class='line'>      <span class="n">solver</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">in</span><span class="o">,</span> <span class="n">out</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the test requires specific input from/output to console or file, it&rsquo;s easy to do it either way.</p>

<figure class='code'><figcaption><span>Commands to run when using StreamEditor interface</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>For console input/output:
</span><span class='line'>java -jar target\xxx-jar-with-dependencies.jar &lt; data\in.txt
</span><span class='line'>
</span><span class='line'>For file input/output:
</span><span class='line'>java -jar target\Salesforce-1.0-SNAPSHOT-jar-with-dependencies.jar data/in.txt data/out.txt</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Process Synchronization (Pt. 2): Race Condition]]></title>
    <link href="http://tdongsi.github.io/java/blog/2015/11/26/concurrency-race-condition/"/>
    <updated>2015-11-26T18:13:05-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2015/11/26/concurrency-race-condition</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
