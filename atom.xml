<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Personal Interview Notes]]></title>
  <link href="http://tdongsi.github.io/java/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/java/"/>
  <updated>2017-09-16T00:36:01-07:00</updated>
  <id>http://tdongsi.github.io/java/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Advanced Jenkinsfile Cookbook]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/06/19/jenkinsfile-cookbook/"/>
    <updated>2017-06-19T14:23:01-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/06/19/jenkinsfile-cookbook</id>
    <content type="html"><![CDATA[<p>This post details some of the more advanced Jenkins pipelines using Jenkinsfile.</p>

<!--more-->


<h3>Nexus authentication in Maven</h3>

<p>More detailed discussion is in <a href="http://tdongsi.github.io/java/blog/2017/06/17/groovy-in-jenkinsfile/">here</a>.</p>

<figure class='code'><figcaption><span>Jenkinsfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">myScript</span>
</span><span class='line'>
</span><span class='line'><span class="n">pipeline</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">agent</span> <span class="o">{</span> <span class="n">node</span> <span class="o">{</span> <span class="n">label</span> <span class="s1">&#39;test-agent&#39;</span> <span class="o">}</span> <span class="o">}</span>
</span><span class='line'>   <span class="n">stages</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">stage</span><span class="o">(</span><span class="s2">&quot;compile&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">steps</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">checkout</span> <span class="n">scm</span>
</span><span class='line'>               <span class="nf">withCredentials</span><span class="o">([</span>
</span><span class='line'>                 <span class="o">[</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;StringBinding&#39;</span><span class="o">,</span> <span class="nl">credentialsId:</span> <span class="s1">&#39;nexusUsername&#39;</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">&#39;nexusUsername&#39;</span><span class="o">],</span>
</span><span class='line'>                 <span class="o">[</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;StringBinding&#39;</span><span class="o">,</span> <span class="nl">credentialsId:</span> <span class="s1">&#39;nexusPassword&#39;</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">&#39;nexusPassword&#39;</span><span class="o">]</span>
</span><span class='line'>               <span class="o">])</span> <span class="o">{</span>
</span><span class='line'>                   <span class="n">script</span> <span class="o">{</span>
</span><span class='line'>                       <span class="n">myScript</span> <span class="o">=</span> <span class="n">load</span> <span class="s1">&#39;jenkins/xml.groovy&#39;</span>
</span><span class='line'>                       <span class="kt">def</span> <span class="n">xmlTemplate</span> <span class="o">=</span> <span class="n">readFile</span><span class="o">(</span> <span class="s1">&#39;jenkins/settings.xml&#39;</span> <span class="o">)</span>
</span><span class='line'>                       <span class="n">String</span> <span class="n">xmlFile</span> <span class="o">=</span> <span class="n">myScript</span><span class="o">.</span><span class="na">transformXml</span><span class="o">(</span><span class="n">xmlTemplate</span><span class="o">,</span> <span class="n">env</span><span class="o">.</span><span class="na">nexusUsername</span><span class="o">,</span> <span class="n">env</span><span class="o">.</span><span class="na">nexusPassword</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>                       <span class="n">String</span> <span class="n">myPath</span> <span class="o">=</span> <span class="s1">&#39;temp.xml&#39;</span>
</span><span class='line'>                       <span class="n">writeFile</span> <span class="nl">file:</span> <span class="n">myPath</span><span class="o">,</span> <span class="nl">text:</span> <span class="n">xmlFile</span>
</span><span class='line'>
</span><span class='line'>                       <span class="n">sh</span> <span class="s2">&quot;mvn -B clean compile -s ${myPath}&quot;</span>
</span><span class='line'>
</span><span class='line'>                       <span class="n">sh</span> <span class="s2">&quot;rm ${myPath}&quot;</span>
</span><span class='line'>                   <span class="o">}</span>
</span><span class='line'>               <span class="o">}</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>           <span class="n">post</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">failure</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">echo</span> <span class="s2">&quot;Sending email for compile failed (TBD)&quot;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>xml.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">groovy.xml.StreamingMarkupBuilder</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">groovy.xml.XmlUtil</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@NonCPS</span>
</span><span class='line'><span class="kt">def</span> <span class="nf">transformXml</span><span class="o">(</span><span class="n">String</span> <span class="n">xmlContent</span><span class="o">,</span> <span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">def</span> <span class="n">xml</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlSlurper</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">).</span><span class="na">parseText</span><span class="o">(</span><span class="n">xmlContent</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">echo</span> <span class="s1">&#39;Start tranforming XML&#39;</span>
</span><span class='line'>  <span class="n">xml</span><span class="o">.</span><span class="na">servers</span><span class="o">.</span><span class="na">server</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">node</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="n">outWriter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="o">()</span>
</span><span class='line'>  <span class="n">XmlUtil</span><span class="o">.</span><span class="na">serialize</span><span class="o">(</span> <span class="n">xml</span><span class="o">,</span> <span class="n">outWriter</span> <span class="o">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">outWriter</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="k">this</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Running test suite in parallel</h3>

<figure class='code'><figcaption><span>Jenkinsfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">node</span><span class="o">(</span><span class="s1">&#39;remote&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">git</span> <span class="s1">&#39;https://github.com/jenkinsci/parallel-test-executor-plugin-sample.git&#39;</span>
</span><span class='line'>  <span class="n">stash</span> <span class="nl">name:</span> <span class="s1">&#39;sources&#39;</span><span class="o">,</span> <span class="nl">includes:</span> <span class="s1">&#39;pom.xml,src/&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kt">def</span> <span class="n">splits</span> <span class="o">=</span> <span class="n">splitTests</span> <span class="n">count</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'><span class="kt">def</span> <span class="n">branches</span> <span class="o">=</span> <span class="o">[:]</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">splits</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">def</span> <span class="n">index</span> <span class="o">=</span> <span class="n">i</span> <span class="c1">// fresh variable per iteration; i will be mutated</span>
</span><span class='line'>  <span class="n">branches</span><span class="o">[</span><span class="s2">&quot;split${i}&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">node</span><span class="o">(</span><span class="s1">&#39;remote&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">deleteDir</span><span class="o">()</span>
</span><span class='line'>      <span class="n">unstash</span> <span class="s1">&#39;sources&#39;</span>
</span><span class='line'>      <span class="kt">def</span> <span class="n">exclusions</span> <span class="o">=</span> <span class="n">splits</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class='line'>      <span class="n">writeFile</span> <span class="nl">file:</span> <span class="s1">&#39;exclusions.txt&#39;</span><span class="o">,</span> <span class="nl">text:</span> <span class="n">exclusions</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="s2">&quot;\n&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="n">sh</span> <span class="s2">&quot;${tool &#39;M3&#39;}/bin/mvn -B -Dmaven.test.failure.ignore test&quot;</span>
</span><span class='line'>      <span class="n">junit</span> <span class="s1">&#39;target/surefire-reports/*.xml&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">parallel</span> <span class="n">branches</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you run this Pipeline for the first time, it will check out a project and run all of its tests in sequence.
The second and subsequent times you run it, the <code>splitTests</code> task will partition your tests into two sets of roughly equal runtime.
The rest of the Pipeline then runs these in parallel — so if you look at <strong>trend</strong> (in the <strong>Build History</strong> widget) you will see the second and subsequent builds taking roughly half the time of the first.
If you only have the one agent configured with its two executors, this won&rsquo;t save as much time, but you may have multiple agents on different hardware matching the same label expression.</p>

<p>This script is more complex than the previous ones so it bears some examination.
You start by grabbing an agent, checking out sources, and making a copy of them using the <code>stash</code> step:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">stash</span> <span class="nl">name:</span> <span class="s1">&#39;sources&#39;</span><span class="o">,</span> <span class="nl">includes:</span> <span class="s1">&#39;pom.xml,src/&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Later, you <code>unstash</code> these same files back into <strong>other</strong> workspaces.
You could have just run <code>git</code> anew in each agent&rsquo;s workspace, but this would result in duplicated changelog entries, as well as contacting the Git server twice.
* A Pipeline build is permitted to run as many SCM checkouts as it needs to, which is useful for projects working with multiple repositories, but not what we want here.
* More importantly, if anyone pushes a new Git commit at  the wrong time, you might be testing different sources in some branches - which is prevented when you do the checkout just once and distribute sources to agents yourself.</p>

<p>The command <code>splitTests</code> returns a list of lists of strings.
From each (list) entry, you construct one branch to run; the label (map key) is akin to a thread name, and will appear in the build log.
The Maven project is set up to expect a file <code>exclusions.txt</code> at its root, and it will run all tests <em>not</em> mentioned there, which we set up via the <code>writeFile</code> step.
When you run the <code>parallel</code> step, each branch is started at the same time, and the overall step completes when all the branches finish: “fork &amp; join”.</p>

<p>There are several new ideas at work here:
* A single Pipeline build allocates several executors, potentially on different agents, at the same time.
You can see these starting and finishing in the Jenkins executor widget on the main screen.</p>

<ul>
<li>Each call to <code>node</code> gets its own workspace.
This kind of flexibility is impossible in a freestyle project, each build of which is tied to exactly one workspace.The Parallel Test Executor plugin works around that for its freestyle build step by triggering multiple builds of the project, making the history hard to follow.</li>
</ul>


<p>Do not use <code>env</code> in this case:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">env</span><span class="o">.</span><span class="na">PATH</span> <span class="o">=</span> <span class="s2">&quot;${mvnHome}/bin:${env.PATH}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>because environment variable overrides are  limited to being global to a pipeline run, not local to the current thread (and thus agent).
You could, however, use the <code>withEnv</code> step as noted above.</p>

<p>You may also have noticed that you are running <code>JUnitResultArchiver</code> several times, something that is not possible in a freestyle project.
The test results recorded in the build are cumulative.</p>

<p>When you view the log for a build with multiple branches, the output from each will be intermixed.
It can be useful to click on the <em>Pipeline Steps</em> link on the build’s sidebar.
This will display a tree-table view of all the steps run so far in the build, grouped by logical block, for example <code>parallel</code> branch.
You can click on individual steps and get more details, such as the log output for that step in isolation, the workspace associated with a <code>node</code> step, and so on.</p>

<h4>Reference</h4>

<ul>
<li><a href="https://github.com/jenkinsci/pipeline-plugin/blob/master/TUTORIAL.md">TUTORIAL</a></li>
<li><a href="https://jenkins.io/blog/2016/06/16/parallel-test-executor-plugin/">More in Blog post</a></li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Parallel+Test+Executor+Plugin">Plugin page</a>: <code>splitTests</code> defined by this plugin.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic Jenkinsfile Cookbook]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/06/18/basic-jenkinsfile-cookbook/"/>
    <updated>2017-06-18T11:20:20-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/06/18/basic-jenkinsfile-cookbook</id>
    <content type="html"><![CDATA[<p>This post shows how to customize standard Pipeline &ldquo;steps&rdquo; in Jenkinsfile (excluding their common usage).</p>

<!--more-->


<h3><code>checkout</code>/<code>git</code> step</h3>

<p><code>scm</code> is the global variable for the current commit AND branch AND repository of Jenkinsfile.
<code>checkout scm</code> means checking out all other files with same version as the Jenkinsfile associated with running pipeline.
To check out another repository, you need to specify the paremeters to <code>checkout</code> step.</p>

<figure class='code'><figcaption><span>Checkout from another Git repo</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">checkout</span><span class="o">([</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;GitSCM&#39;</span><span class="o">,</span> <span class="nl">branches:</span> <span class="o">[[</span><span class="nl">name:</span> <span class="s1">&#39;*/master&#39;</span><span class="o">]],</span>
</span><span class='line'>     <span class="nl">userRemoteConfigs:</span> <span class="o">[[</span><span class="nl">url:</span> <span class="s1">&#39;http://git-server/user/repository.git&#39;</span><span class="o">]]])</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// From README file.</span>
</span><span class='line'><span class="n">checkout</span> <span class="nl">scm:</span> <span class="o">[</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;MercurialSCM&#39;</span><span class="o">,</span> <span class="nl">source:</span> <span class="s1">&#39;ssh://hg@bitbucket.org/user/repo&#39;</span><span class="o">,</span> <span class="nl">clean:</span> <span class="kc">true</span><span class="o">,</span> <span class="nl">credentialsId:</span> <span class="s1">&#39;1234-5678-abcd&#39;</span><span class="o">],</span> <span class="nl">poll:</span> <span class="kc">false</span>
</span><span class='line'><span class="c1">// If scm is the only parameter, you can omit its name, but Groovy syntax then requires parentheses around the value:</span>
</span><span class='line'><span class="n">checkout</span><span class="o">([</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;MercurialSCM&#39;</span><span class="o">,</span> <span class="nl">source:</span> <span class="s1">&#39;ssh://hg@bitbucket.org/user/repo&#39;</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Short hand form for Git</span>
</span><span class='line'><span class="n">git</span> <span class="nl">branch:</span> <span class="s1">&#39;develop&#39;</span><span class="o">,</span> <span class="nl">url:</span> <span class="s1">&#39;https://github.com/WtfJoke/Any.git&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Reference:</p>

<ul>
<li><a href="https://jenkins.io/doc/pipeline/steps/git/#git-git"><code>git</code> step</a></li>
<li><a href="https://stackoverflow.com/questions/14843696/checkout-multiple-git-repos-into-same-jenkins-workspace"><code>git</code> example</a></li>
<li><a href="https://jenkins.io/doc/pipeline/steps/workflow-scm-step/#checkout-general-scm"><code>checkout</code> step</a></li>
<li><a href="https://github.com/jenkinsci/workflow-scm-step-plugin/blob/master/README.md"><code>checkout</code> README</a></li>
</ul>


<h3><code>findFiles</code> step</h3>

<p>Doing in Bash:</p>

<figure class='code'><figcaption><span>Doing in Bash</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">sh</span> <span class="s1">&#39;&#39;&#39;</span>
</span><span class='line'><span class="s1">for file in target/surefire-reports/*.txt;</span>
</span><span class='line'><span class="s1">do</span>
</span><span class='line'><span class="s1">    echo $file &gt;&gt; testresult</span>
</span><span class='line'><span class="s1">done</span>
</span><span class='line'><span class="s1">cat testresult</span>
</span><span class='line'><span class="s1">&#39;&#39;&#39;</span>
</span><span class='line'><span class="kt">def</span> <span class="n">result</span> <span class="o">=</span> <span class="n">readFile</span> <span class="s2">&quot;testresult&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Doing in Groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">files</span> <span class="o">=</span> <span class="n">findFiles</span><span class="o">(</span><span class="nl">glob:</span> <span class="s1">&#39;target/surefire-reports/*.txt&#39;</span><span class="o">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">file</span> <span class="k">in</span> <span class="nl">files:</span>
</span><span class='line'>  <span class="n">echo</span> <span class="s2">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s2">  ${files[0].name} ${files[0].path} ${files[0].directory} </span>
</span><span class='line'><span class="s2">  ${files[0].length} ${files[0].lastModified}</span>
</span><span class='line'><span class="s2">  &quot;&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Reference:</p>

<ul>
<li><a href="https://jenkins.io/doc/pipeline/steps/pipeline-utility-steps/"><code>findFiles</code> step</a></li>
<li>Related: <code>readFile</code>, <code>writeFile</code>.</li>
</ul>


<h3><code>input</code> step</h3>

<p>Simple <code>input</code> step can be used to ask for approval to proceed.
For asking input from a list of multiple choices, you can use the advanced version of input.</p>

<figure class='code'><figcaption><span>Input from list of choices</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>   <span class="n">sh</span> <span class="s2">&quot;source scripts/findCL.sh &gt; choiceLists.txt&quot;</span>
</span><span class='line'>   <span class="kt">def</span> <span class="n">choiceOptions</span> <span class="o">=</span> <span class="n">readFile</span> <span class="s2">&quot;${env.WORKSPACE}/choiceLists.txt&quot;</span>
</span><span class='line'>   <span class="kt">def</span> <span class="n">choice</span> <span class="o">=</span> <span class="n">input</span><span class="o">(</span>
</span><span class='line'>   <span class="nl">id:</span> <span class="s1">&#39;CHOICE_LIST&#39;</span><span class="o">,</span> <span class="nl">message:</span><span class="s1">&#39;Choose a CL&#39;</span> <span class="o">,</span> <span class="nl">parameters:</span> <span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;ChoiceParameterDefinition&#39;</span><span class="o">,</span> <span class="nl">name:</span><span class="s1">&#39;CHOICE_LIST_SELECTED&#39;</span><span class="o">,</span> <span class="nl">description:</span><span class="s1">&#39;Select one&#39;</span><span class="o">,</span> <span class="nl">choices:</span><span class="n">choiceOptions</span><span class="o">]</span>
</span><span class='line'>  <span class="o">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Reference:</p>

<ul>
<li><a href="https://jenkins.io/doc/pipeline/steps/pipeline-input-step/"><code>input</code> step</a></li>
</ul>


<h3><code>junit</code> step</h3>

<p>JUnit tests + PMD, FindBugs, CheckStyle.
In Blue Ocean interface, these will be displayed in a separate tab.</p>

<figure class='code'><figcaption><span>Related steps</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">stage</span><span class="o">(</span><span class="s1">&#39;JUnit-Reports&#39;</span><span class="o">){</span>
</span><span class='line'>    <span class="n">junit</span> <span class="nl">allowEmptyResults:</span> <span class="kc">true</span><span class="o">,</span> <span class="nl">testResults:</span> <span class="s1">&#39;**/build/test-results/*.xml&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">stage</span><span class="o">(</span><span class="s1">&#39;FindBugs-Reports&#39;</span><span class="o">){</span>
</span><span class='line'>    <span class="n">step</span><span class="o">([</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;FindBugsPublisher&#39;</span><span class="o">,</span> <span class="nl">canComputeNew:</span> <span class="kc">false</span><span class="o">,</span> <span class="nl">defaultEncoding:</span> <span class="s1">&#39;&#39;</span><span class="o">,</span>
</span><span class='line'>    <span class="nl">excludePattern:</span> <span class="s1">&#39;&#39;</span><span class="o">,</span> <span class="nl">healthy:</span> <span class="s1">&#39;&#39;</span><span class="o">,</span> <span class="nl">includePattern:</span> <span class="s1">&#39;&#39;</span><span class="o">,</span>
</span><span class='line'>    <span class="nl">pattern:</span> <span class="s1">&#39;**/build/reports/findbugs/*.xml&#39;</span><span class="o">,</span> <span class="nl">unHealthy:</span> <span class="s1">&#39;&#39;</span><span class="o">])</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">stage</span><span class="o">(</span><span class="s1">&#39;PMD-Reports&#39;</span><span class="o">){</span>
</span><span class='line'>    <span class="n">step</span><span class="o">([</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;PmdPublisher&#39;</span><span class="o">,</span> <span class="nl">canComputeNew:</span> <span class="kc">false</span><span class="o">,</span> <span class="nl">defaultEncoding:</span> <span class="s1">&#39;&#39;</span><span class="o">,</span>
</span><span class='line'>    <span class="nl">healthy:</span> <span class="s1">&#39;&#39;</span><span class="o">,</span> <span class="nl">pattern:</span> <span class="s1">&#39;**/build/reports/pmd/*.xml&#39;</span><span class="o">,</span> <span class="nl">unHealthy:</span> <span class="s1">&#39;&#39;</span><span class="o">])</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">stage</span><span class="o">(</span><span class="s1">&#39;CheckStyle-Reports&#39;</span><span class="o">){</span>
</span><span class='line'>    <span class="n">step</span><span class="o">([</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;CheckStylePublisher&#39;</span><span class="o">,</span> <span class="nl">canComputeNew:</span> <span class="kc">false</span><span class="o">,</span> <span class="nl">defaultEncoding:</span> <span class="s1">&#39;&#39;</span><span class="o">,</span>
</span><span class='line'>    <span class="nl">healthy:</span> <span class="s1">&#39;&#39;</span><span class="o">,</span> <span class="nl">pattern:</span> <span class="s1">&#39;**/build/reports/checkstyle/*.xml&#39;</span><span class="o">,</span> <span class="nl">unHealthy:</span> <span class="s1">&#39;&#39;</span><span class="o">])</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>podTemplate</code> step</h3>

<p>This step is used to specify a new pod template for running jobs on Kubernetes cluster.</p>

<figure class='code'><figcaption><span>Kubernetes plugin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">podTemplate</span><span class="o">(</span><span class="nl">label:</span><span class="s1">&#39;base-agent&#39;</span><span class="o">,</span> <span class="nl">containers:</span> <span class="o">[</span>
</span><span class='line'>    <span class="n">containerTemplate</span><span class="o">(</span><span class="nl">name:</span> <span class="s1">&#39;maven&#39;</span><span class="o">,</span>
</span><span class='line'>        <span class="nl">image:</span> <span class="s1">&#39;ops0-artifactrepo1-0-prd.data.sfdc.net/tdongsi/matrix-jenkins-aqueduct-agent:13&#39;</span><span class="o">,</span>
</span><span class='line'>        <span class="nl">workingDir:</span> <span class="s1">&#39;/home/jenkins&#39;</span><span class="o">,</span>
</span><span class='line'>        <span class="nl">volumes:</span> <span class="o">[</span><span class="n">hostPathVolume</span><span class="o">(</span><span class="nl">mountPath:</span> <span class="s1">&#39;/srv/jenkins&#39;</span><span class="o">,</span> <span class="nl">hostPath:</span> <span class="s1">&#39;/usr/local/npm&#39;</span><span class="o">),</span>
</span><span class='line'>        <span class="n">secretVolume</span><span class="o">(</span><span class="nl">mountPath:</span> <span class="s1">&#39;/etc/mount2&#39;</span><span class="o">,</span> <span class="nl">secretName:</span> <span class="s1">&#39;my-secret&#39;</span><span class="o">)],</span>
</span><span class='line'>        <span class="nl">imagePullSecrets:</span> <span class="s1">&#39;sfregistry&#39;</span><span class="o">)</span>
</span><span class='line'><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">node</span><span class="o">(</span><span class="s1">&#39;base-agent&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">stage</span><span class="o">(</span><span class="s1">&#39;Checkout&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">checkout</span> <span class="n">scm</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">stage</span><span class="o">(</span><span class="s1">&#39;main&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">sh</span> <span class="s1">&#39;java -version&#39;</span>
</span><span class='line'>            <span class="n">sh</span> <span class="s1">&#39;mvn -version&#39;</span>
</span><span class='line'>            <span class="n">sh</span> <span class="s1">&#39;python -V&#39;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">input</span> <span class="s1">&#39;Finished with K8S pod?&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Reference:</p>

<ul>
<li><a href="https://wiki.jenkins.io/display/JENKINS/Kubernetes+Plugin">Kubernetes plugin</a></li>
<li><a href="https://www.infoq.com/articles/scaling-docker-with-kubernetes">Tutorial</a></li>
<li><a href="https://github.com/jenkinsci/kubernetes-plugin">Github repo</a></li>
<li><a href="https://jenkins.io/doc/pipeline/steps/kubernetes/">Pipeline steps</a></li>
</ul>


<h3><code>sendSlack</code> step</h3>

<p>Standard Jenkinsfile for testing Slack</p>

<figure class='code'><figcaption><span>Jenkinsfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">node</span><span class="o">(</span><span class="s1">&#39;test-agent&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">stage</span><span class="o">(</span><span class="s1">&#39;Checkout&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">checkout</span> <span class="n">scm</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">stage</span><span class="o">(</span><span class="s1">&#39;Main&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">withCredentials</span><span class="o">([</span><span class="n">string</span><span class="o">(</span><span class="nl">credentialsId:</span> <span class="s1">&#39;matrixsfdc-slack&#39;</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">&#39;TOKEN&#39;</span><span class="o">)])</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">slackSend</span> <span class="o">(</span> <span class="nl">teamDomain:</span> <span class="s1">&#39;matrixsfdc&#39;</span><span class="o">,</span> <span class="nl">channel:</span> <span class="s1">&#39;#jenkins-pcloud&#39;</span><span class="o">,</span> <span class="nl">token:</span> <span class="n">env</span><span class="o">.</span><span class="na">TOKEN</span><span class="o">,</span>
</span><span class='line'>                   <span class="nl">baseUrl:</span> <span class="s1">&#39;https://matrixsfdc.slack.com/services/hooks/jenkins-ci/&#39;</span><span class="o">,</span>
</span><span class='line'>                   <span class="nl">color:</span> <span class="s1">&#39;#FFFF00&#39;</span><span class="o">,</span>
</span><span class='line'>                   <span class="nl">message:</span> <span class="s2">&quot;STARTED: Job &#39;${env.JOB_NAME} [${env.BUILD_NUMBER}]&#39; (${env.BUILD_URL})&quot;</span>
</span><span class='line'>                   <span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">input</span> <span class="s1">&#39;Finished with K8S pod?&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>withCredentials</code> step</h3>

<p>There are different variations of <code>withCredentials</code> step.
The most common ones are:</p>

<figure class='code'><figcaption><span>Binding secret to username and password separately</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">node</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">withCredentials</span><span class="o">([</span><span class="n">usernamePassword</span><span class="o">(</span><span class="nl">credentialsId:</span> <span class="s1">&#39;amazon&#39;</span><span class="o">,</span> <span class="nl">usernameVariable:</span> <span class="s1">&#39;USERNAME&#39;</span><span class="o">,</span> <span class="nl">passwordVariable:</span> <span class="s1">&#39;PASSWORD&#39;</span><span class="o">)])</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// available as an env variable, but will be masked if you try to print it out any which way</span>
</span><span class='line'>        <span class="n">sh</span> <span class="s1">&#39;echo $PASSWORD&#39;</span>
</span><span class='line'>        <span class="c1">// also available as a Groovy variable—note double quotes for string interpolation</span>
</span><span class='line'>        <span class="n">echo</span> <span class="s2">&quot;$USERNAME&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Binding secret to $username:$password</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">node</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">withCredentials</span><span class="o">([</span><span class="n">usernameColonPassword</span><span class="o">(</span><span class="nl">credentialsId:</span> <span class="s1">&#39;mylogin&#39;</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">&#39;USERPASS&#39;</span><span class="o">)])</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">sh</span> <span class="s1">&#39;&#39;&#39;</span>
</span><span class='line'><span class="s1">      set +x</span>
</span><span class='line'><span class="s1">      curl -u $USERPASS https://private.server/ &gt; output</span>
</span><span class='line'><span class="s1">    &#39;&#39;&#39;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Binding secret string to a variable</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">node</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">withCredentials</span><span class="o">([</span><span class="n">string</span><span class="o">(</span><span class="nl">credentialsId:</span> <span class="s1">&#39;secretString&#39;</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">&#39;MY_STRING&#39;</span><span class="o">)])</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">sh</span> <span class="s1">&#39;&#39;&#39;</span>
</span><span class='line'><span class="s1">      echo $MY_STRING</span>
</span><span class='line'><span class="s1">    &#39;&#39;&#39;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For secret file, the file will be passed into some secret location and that secret location will be bound to some variable.
If you want the secret files in specific locations, the workaround is to create symlinks to those secret files.</p>

<figure class='code'><figcaption><span>Binding secret file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>    <span class="n">withCredentials</span><span class="o">(</span> <span class="o">[</span><span class="n">file</span><span class="o">(</span><span class="nl">credentialsId:</span> <span class="s1">&#39;host-cert&#39;</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">&#39;HOST_CERT&#39;</span><span class="o">),</span>
</span><span class='line'>                    <span class="n">file</span><span class="o">(</span><span class="nl">credentialsId:</span> <span class="s1">&#39;host-key&#39;</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">&#39;HOST_KEY&#39;</span><span class="o">),</span>
</span><span class='line'>                    <span class="n">file</span><span class="o">(</span><span class="nl">credentialsId:</span> <span class="s1">&#39;cert-ca&#39;</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">&#39;CERT_CA&#39;</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">])</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">sh</span> <span class="s2">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s2">            mkdir download</span>
</span><span class='line'><span class="s2">            ln -s ${env.HOST_CERT} download/hostcert.crt</span>
</span><span class='line'><span class="s2">            ln -s ${env.HOST_KEY} download/hostcert.key</span>
</span><span class='line'><span class="s2">            ln -s ${env.CERT_CA} download/ca.crt</span>
</span><span class='line'><span class="s2">        &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// The Python script read those files download/*.* by default</span>
</span><span class='line'>        <span class="n">sh</span> <span class="s2">&quot;python python/main.py&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For &ldquo;private key with passphrase&rdquo; Credential type, <code>sshagent</code> is only usage that I know (credential ID is <code>jenkins_ssh_key</code> in this example):</p>

<figure class='code'><figcaption><span>Binding private key with passphrase</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">node</span><span class="o">(</span><span class="s1">&#39;my-agent&#39;</span><span class="o">){</span>
</span><span class='line'>  <span class="n">stage</span> <span class="s1">&#39;Checkout&#39;</span>
</span><span class='line'>  <span class="n">checkout</span> <span class="n">scm</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">if</span> <span class="o">(</span><span class="n">env</span><span class="o">.</span><span class="na">BRANCH_NAME</span> <span class="o">==</span> <span class="s1">&#39;master&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">stage</span> <span class="s1">&#39;Commit&#39;</span>
</span><span class='line'>    <span class="n">println</span> <span class="s2">&quot;Pushing Jenkins Shared Library&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sshagent</span><span class="o">([</span><span class="s1">&#39;jenkins_ssh_key&#39;</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">sh</span> <span class="s2">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s2">        git branch master</span>
</span><span class='line'><span class="s2">        git checkout master</span>
</span><span class='line'><span class="s2">        ssh-keyscan -H -p 12222 \${JENKINS_ADDR} &gt;&gt; ~/.ssh/known_hosts</span>
</span><span class='line'><span class="s2">        git remote add jenkins ssh://tdongsi@\${JENKINS_ADDR}:12222/workflowLibs.git</span>
</span><span class='line'><span class="s2">        git push --force jenkins master</span>
</span><span class='line'><span class="s2">      &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Reference:</p>

<ul>
<li><a href="https://wiki.jenkins.io/display/JENKINS/Credentials+Binding+Plugin?focusedCommentId=80184884">Credentials Binding plugin</a></li>
</ul>


<h3>References</h3>

<ul>
<li><a href="https://jenkins.io/doc/pipeline/steps/">Basic Jenkinsfile steps</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy in Jenkinsfile]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/06/17/groovy-in-jenkinsfile/"/>
    <updated>2017-06-17T12:08:15-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/06/17/groovy-in-jenkinsfile</id>
    <content type="html"><![CDATA[<p>Groovy is supported in Jenkinsfile for quick scripting.
However, lots of features in the Groovy language is not supported and simple works in Groovy can be really tricky in Jenkinsfile.</p>

<!--more-->


<h3>Different ways to process XML file</h3>

<p>In summary, if it is possible, use another script language (e.g., Python) for <strong>file manipulation</strong> in Jenkinsfile.
It is time consuming to navigate all tricky stuffs of Groovy implementaiton in Jenkins:</p>

<ul>
<li>In-process Script Approval: you have to approve every single class and method <em>one by one</em>.</li>
<li>Some features of Groovy is not supported and it takes time to figure out what is not supported and how to work around. When in doubt, use <code>@NonCPS</code>.</li>
</ul>


<h4>Groovy method in Jenkinsfile</h4>

<figure class='code'><figcaption><span>Jenkinsfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">groovy.xml.StreamingMarkupBuilder</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">groovy.xml.XmlUtil</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">settingsFile</span> <span class="o">=</span> <span class="s1">&#39;temp.xml&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@NonCPS</span>
</span><span class='line'><span class="kt">def</span> <span class="nf">xmlTransform</span><span class="o">(</span><span class="n">txt</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">def</span> <span class="n">xmlRoot</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlSlurper</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">).</span><span class="na">parseText</span><span class="o">(</span><span class="n">txt</span><span class="o">)</span>
</span><span class='line'>    <span class="n">echo</span> <span class="s1">&#39;Start tranforming XML&#39;</span>
</span><span class='line'>    <span class="n">xmlRoot</span><span class="o">.</span><span class="na">servers</span><span class="o">.</span><span class="na">server</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">node</span> <span class="o">-&gt;</span>
</span><span class='line'>       <span class="n">node</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span>
</span><span class='line'>       <span class="n">node</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// TRICKY: FileWriter does NOT work</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">outWriter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="o">()</span>
</span><span class='line'>    <span class="n">XmlUtil</span><span class="o">.</span><span class="na">serialize</span><span class="o">(</span> <span class="n">xmlRoot</span><span class="o">,</span> <span class="n">outWriter</span> <span class="o">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">outWriter</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">pipeline</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">agent</span> <span class="o">{</span> <span class="n">node</span> <span class="o">{</span> <span class="n">label</span> <span class="s1">&#39;test-agent&#39;</span> <span class="o">}</span> <span class="o">}</span>
</span><span class='line'>   <span class="n">stages</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">stage</span><span class="o">(</span><span class="s2">&quot;compile&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">steps</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">checkout</span> <span class="n">scm</span>
</span><span class='line'>               <span class="nf">withCredentials</span><span class="o">([</span>
</span><span class='line'>                 <span class="o">[</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;StringBinding&#39;</span><span class="o">,</span> <span class="nl">credentialsId:</span> <span class="s1">&#39;nexusUsername&#39;</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">&#39;nexusUsername&#39;</span><span class="o">],</span>
</span><span class='line'>                 <span class="o">[</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;StringBinding&#39;</span><span class="o">,</span> <span class="nl">credentialsId:</span> <span class="s1">&#39;nexusPassword&#39;</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">&#39;nexusPassword&#39;</span><span class="o">]</span>
</span><span class='line'>               <span class="o">])</span> <span class="o">{</span>
</span><span class='line'>                   <span class="n">script</span> <span class="o">{</span>
</span><span class='line'>                       <span class="kt">def</span> <span class="n">xmlTemplate</span> <span class="o">=</span> <span class="n">readFile</span><span class="o">(</span> <span class="s1">&#39;jenkins/settings.xml&#39;</span> <span class="o">)</span>
</span><span class='line'>                       <span class="kt">def</span> <span class="n">xmlFile</span> <span class="o">=</span> <span class="n">xmlTransform</span><span class="o">(</span><span class="n">xmlTemplate</span><span class="o">,</span> <span class="n">env</span><span class="o">.</span><span class="na">nexusUsername</span><span class="o">,</span> <span class="n">env</span><span class="o">.</span><span class="na">nexusPassword</span><span class="o">)</span>
</span><span class='line'>                       <span class="n">writeFile</span> <span class="nl">file:</span> <span class="n">settingsFile</span><span class="o">,</span> <span class="nl">text:</span> <span class="n">xmlFile</span>
</span><span class='line'>
</span><span class='line'>                       <span class="n">sh</span> <span class="s2">&quot;mvn -B -s ${settingsFile} clean compile&quot;</span>
</span><span class='line'>                   <span class="o">}</span>
</span><span class='line'>               <span class="o">}</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>           <span class="n">post</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">failure</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">echo</span> <span class="s2">&quot;Sending email for compile failed (TBD)&quot;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some notes:</p>

<ul>
<li><code>import</code> statements must be at the top, right after the shebang and before anything else.</li>
<li>The Groovy methods must be annotated with <code>@NonCPS</code> or Jenkins will report the error &ldquo;java.io.NotSerializableException&rdquo;.</li>
<li>The Groovy methods can not be defined inside a <code>step</code> block. It must be defined at the top.</li>
<li><code>@NonCPS</code> is required since the Groovy method uses several non-serializble objects.</li>
</ul>


<h4>Groovy method in separate script</h4>

<figure class='code'><figcaption><span>Jenkinsfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">myScript</span>
</span><span class='line'>
</span><span class='line'><span class="n">pipeline</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">agent</span> <span class="o">{</span> <span class="n">node</span> <span class="o">{</span> <span class="n">label</span> <span class="s1">&#39;test-agent&#39;</span> <span class="o">}</span> <span class="o">}</span>
</span><span class='line'>   <span class="n">stages</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">stage</span><span class="o">(</span><span class="s2">&quot;compile&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">steps</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">checkout</span> <span class="n">scm</span>
</span><span class='line'>               <span class="nf">withCredentials</span><span class="o">([</span>
</span><span class='line'>                 <span class="o">[</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;StringBinding&#39;</span><span class="o">,</span> <span class="nl">credentialsId:</span> <span class="s1">&#39;nexusUsername&#39;</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">&#39;nexusUsername&#39;</span><span class="o">],</span>
</span><span class='line'>                 <span class="o">[</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;StringBinding&#39;</span><span class="o">,</span> <span class="nl">credentialsId:</span> <span class="s1">&#39;nexusPassword&#39;</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">&#39;nexusPassword&#39;</span><span class="o">]</span>
</span><span class='line'>               <span class="o">])</span> <span class="o">{</span>
</span><span class='line'>                   <span class="n">script</span> <span class="o">{</span>
</span><span class='line'>                       <span class="n">myScript</span> <span class="o">=</span> <span class="n">load</span> <span class="s1">&#39;jenkins/xml.groovy&#39;</span>
</span><span class='line'>                       <span class="kt">def</span> <span class="n">xmlTemplate</span> <span class="o">=</span> <span class="n">readFile</span><span class="o">(</span> <span class="s1">&#39;jenkins/settings.xml&#39;</span> <span class="o">)</span>
</span><span class='line'>                       <span class="n">String</span> <span class="n">xmlFile</span> <span class="o">=</span> <span class="n">myScript</span><span class="o">.</span><span class="na">transformXml</span><span class="o">(</span><span class="n">xmlTemplate</span><span class="o">,</span> <span class="n">env</span><span class="o">.</span><span class="na">nexusUsername</span><span class="o">,</span> <span class="n">env</span><span class="o">.</span><span class="na">nexusPassword</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>                       <span class="n">String</span> <span class="n">myPath</span> <span class="o">=</span> <span class="s1">&#39;temp.xml&#39;</span>
</span><span class='line'>                       <span class="kt">def</span> <span class="n">mCommand</span> <span class="o">=</span> <span class="s2">&quot;cat &gt;${myPath} &lt;&lt;EOF&quot;</span>
</span><span class='line'>                       <span class="n">mCommand</span> <span class="o">+=</span> <span class="s2">&quot;\n${xmlFile}\nEOF&quot;</span>
</span><span class='line'>                       <span class="n">sh</span> <span class="n">mCommand</span>
</span><span class='line'>
</span><span class='line'>                       <span class="n">sh</span> <span class="s2">&quot;mvn -B clean compile -s ${myPath}&quot;</span>
</span><span class='line'>
</span><span class='line'>                       <span class="n">sh</span> <span class="s2">&quot;rm ${myPath}&quot;</span>
</span><span class='line'>                   <span class="o">}</span>
</span><span class='line'>               <span class="o">}</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>           <span class="n">post</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">failure</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">echo</span> <span class="s2">&quot;Sending email for compile failed (TBD)&quot;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>xml.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">groovy.xml.StreamingMarkupBuilder</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">groovy.xml.XmlUtil</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@NonCPS</span>
</span><span class='line'><span class="kt">def</span> <span class="nf">transformXml</span><span class="o">(</span><span class="n">String</span> <span class="n">xmlContent</span><span class="o">,</span> <span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">def</span> <span class="n">xml</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlSlurper</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">).</span><span class="na">parseText</span><span class="o">(</span><span class="n">xmlContent</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">echo</span> <span class="s1">&#39;Start tranforming XML&#39;</span>
</span><span class='line'>  <span class="n">xml</span><span class="o">.</span><span class="na">servers</span><span class="o">.</span><span class="na">server</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">node</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="n">outWriter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="o">()</span>
</span><span class='line'>  <span class="n">XmlUtil</span><span class="o">.</span><span class="na">serialize</span><span class="o">(</span> <span class="n">xml</span><span class="o">,</span> <span class="n">outWriter</span> <span class="o">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">outWriter</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="k">this</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Groovy method in shared library</h4>

<p>The above Nexus authentication code is likely repeated across multiple Maven builds.
Therefore, it is worth converting it into a DSL into a Shared Library in Jenkins.
The DSL takes two parameters:</p>

<ul>
<li>templateFile: settings.xml template with Nexus credentials info redacted.</li>
<li>command: Maven command with settings file NOT specified (i.e., NO &ldquo;-s&rdquo; option in the command).</li>
</ul>


<p>The example usage is as follows:</p>

<figure class='code'><figcaption><span>Jenkinsfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">pipeline</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">agent</span> <span class="o">{</span> <span class="n">node</span> <span class="o">{</span> <span class="n">label</span> <span class="s1">&#39;test-agent&#39;</span> <span class="o">}</span> <span class="o">}</span>
</span><span class='line'>   <span class="n">stages</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">stage</span><span class="o">(</span><span class="s2">&quot;compile&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">steps</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">checkout</span> <span class="n">scm</span>
</span><span class='line'>               <span class="n">script</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">withNexusMaven</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">templateFile</span> <span class="o">=</span> <span class="s1">&#39;jenkins/settings.xml&#39;</span>
</span><span class='line'>                        <span class="n">command</span> <span class="o">=</span> <span class="s2">&quot;mvn -B clean compile&quot;</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>               <span class="o">}</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>           <span class="n">post</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">failure</span> <span class="o">{</span>
</span><span class='line'>               <span class="n">echo</span> <span class="s2">&quot;Sending email for compile failed (TBD)&quot;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Jenksinfile is much cleaner since most of implementation details have been moved inside the DSL:</p>

<figure class='code'><figcaption><span>withNexusMaven.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="cp">#!groovy</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">groovy.xml.XmlUtil</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@NonCPS</span>
</span><span class='line'><span class="kt">def</span> <span class="nf">transformXml</span><span class="o">(</span><span class="n">String</span> <span class="n">xmlContent</span><span class="o">,</span> <span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">def</span> <span class="n">xml</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlSlurper</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">).</span><span class="na">parseText</span><span class="o">(</span><span class="n">xmlContent</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">echo</span> <span class="s1">&#39;Start tranforming XML&#39;</span>
</span><span class='line'>  <span class="n">xml</span><span class="o">.</span><span class="na">servers</span><span class="o">.</span><span class="na">server</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">node</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="n">outWriter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="o">()</span>
</span><span class='line'>  <span class="n">XmlUtil</span><span class="o">.</span><span class="na">serialize</span><span class="o">(</span> <span class="n">xml</span><span class="o">,</span> <span class="n">outWriter</span> <span class="o">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">outWriter</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="nf">call</span><span class="o">(</span><span class="n">Closure</span> <span class="n">body</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">def</span> <span class="n">config</span> <span class="o">=</span> <span class="o">[:]</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">body</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">body</span><span class="o">.</span><span class="na">resolveStrategy</span> <span class="o">=</span> <span class="n">Closure</span><span class="o">.</span><span class="na">DELEGATE_FIRST</span>
</span><span class='line'>        <span class="n">body</span><span class="o">.</span><span class="na">delegate</span> <span class="o">=</span> <span class="n">config</span>
</span><span class='line'>        <span class="n">body</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">def</span> <span class="n">templateFile</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="na">templateFile</span> <span class="o">?:</span> <span class="s1">&#39;/home/data/settings.xml&#39;</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">command</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="na">command</span> <span class="o">?:</span> <span class="s2">&quot;mvn -B clean compile&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">withCredentials</span><span class="o">([</span>
</span><span class='line'>        <span class="o">[</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;StringBinding&#39;</span><span class="o">,</span> <span class="nl">credentialsId:</span> <span class="s1">&#39;nexusUsername&#39;</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">&#39;nexusUsername&#39;</span><span class="o">],</span>
</span><span class='line'>        <span class="o">[</span><span class="n">$class</span><span class="o">:</span> <span class="s1">&#39;StringBinding&#39;</span><span class="o">,</span> <span class="nl">credentialsId:</span> <span class="s1">&#39;nexusPassword&#39;</span><span class="o">,</span> <span class="nl">variable:</span> <span class="s1">&#39;nexusPassword&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="o">])</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">def</span> <span class="n">xmlTemplate</span> <span class="o">=</span> <span class="n">readFile</span> <span class="n">templateFile</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">xmlFile</span> <span class="o">=</span> <span class="n">transformXml</span><span class="o">(</span><span class="n">xmlTemplate</span><span class="o">,</span> <span class="n">env</span><span class="o">.</span><span class="na">nexusUsername</span><span class="o">,</span> <span class="n">env</span><span class="o">.</span><span class="na">nexusPassword</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span> <span class="n">tempFile</span> <span class="o">=</span> <span class="s1">&#39;temp.xml&#39;</span>
</span><span class='line'>        <span class="n">writeFile</span> <span class="nl">file:</span> <span class="n">tempFile</span><span class="o">,</span> <span class="nl">text:</span> <span class="n">xmlFile</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">sh</span> <span class="s2">&quot;${command} -s ${tempFile}&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Clean up</span>
</span><span class='line'>        <span class="n">sh</span> <span class="s2">&quot;rm ${tempFile}&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XML Processing in Groovy]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/06/14/xml-processing-in-groovy/"/>
    <updated>2017-06-14T09:57:51-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/06/14/xml-processing-in-groovy</id>
    <content type="html"><![CDATA[<p>This post discusses XML processing in Groovy.</p>

<!--more-->


<h3>Parsing: XmlParser vs XmlSlurper</h3>

<p>Both are in <code>groovy.util</code> packages and both have the same approach to parse an xml: both are based on <code>SAX</code> (low memory footprint) and both can update/transform the XML.</p>

<p>Based on this <a href="https://stackoverflow.com/questions/7558019/groovy-xmlslurper-vs-xmlparser">StackOverflow answer</a>, when to use <code>XmlParser</code> versus <code>XmlSlurper</code> is as follows:</p>

<ul>
<li><code>XmlSlurper</code>: when you want to transform an existing XML document to another.</li>
<li><code>XmlSlurper</code>: when you just want to read a few nodes since <code>XmlSlurper</code> evaluates the structure lazily.</li>
<li><code>XmlParser</code>: when you want to update and read at the same time.</li>
</ul>


<h4>Example usage:</h4>

<figure class='code'><figcaption><span>XmlSlurper</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;</span>
</span><span class='line'><span class="s1">    &lt;list&gt;</span>
</span><span class='line'><span class="s1">        &lt;technology&gt;</span>
</span><span class='line'><span class="s1">            &lt;name&gt;Groovy&lt;/name&gt;</span>
</span><span class='line'><span class="s1">        &lt;/technology&gt;</span>
</span><span class='line'><span class="s1">    &lt;/list&gt;</span>
</span><span class='line'><span class="s1">&#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlSlurper</span><span class="o">().</span><span class="na">parseText</span><span class="o">(</span><span class="n">text</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">list</span> <span class="k">instanceof</span> <span class="n">groovy</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">slurpersupport</span><span class="o">.</span><span class="na">GPathResult</span>
</span><span class='line'><span class="k">assert</span> <span class="n">list</span><span class="o">.</span><span class="na">technology</span><span class="o">.</span><span class="na">name</span> <span class="o">==</span> <span class="s1">&#39;Groovy&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>XmlParser</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlParser</span><span class="o">().</span><span class="na">parseText</span><span class="o">(</span><span class="n">text</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">list</span> <span class="k">instanceof</span> <span class="n">groovy</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Node</span>
</span><span class='line'><span class="k">assert</span> <span class="n">list</span><span class="o">.</span><span class="na">technology</span><span class="o">.</span><span class="na">name</span><span class="o">.</span><span class="na">text</span><span class="o">()</span> <span class="o">==</span> <span class="s1">&#39;Groovy&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another option is DOMCategory:</p>

<figure class='code'><figcaption><span>DOMCateogry</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringReader</span><span class="o">(</span><span class="n">CAR_RECORDS</span><span class="o">)</span>
</span><span class='line'><span class="kt">def</span> <span class="n">doc</span> <span class="o">=</span> <span class="n">DOMBuilder</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">reader</span><span class="o">)</span>
</span><span class='line'><span class="kt">def</span> <span class="n">records</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="na">documentElement</span>
</span><span class='line'>
</span><span class='line'><span class="n">use</span><span class="o">(</span><span class="n">DOMCategory</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">assert</span> <span class="n">records</span><span class="o">.</span><span class="na">car</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Navigation with GPath</h3>

<p>From <a href="http://groovy-lang.org/processing-xml.html">here</a>:</p>

<figure class='code'><figcaption><span>GPath example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">books</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;</span>
</span><span class='line'><span class="s1">    &lt;response version-api=&quot;2.0&quot;&gt;</span>
</span><span class='line'><span class="s1">        &lt;value&gt;</span>
</span><span class='line'><span class="s1">            &lt;books&gt;</span>
</span><span class='line'><span class="s1">                &lt;book available=&quot;20&quot; id=&quot;1&quot;&gt;</span>
</span><span class='line'><span class="s1">                    &lt;title&gt;Don Xijote&lt;/title&gt;</span>
</span><span class='line'><span class="s1">                    &lt;author id=&quot;1&quot;&gt;Manuel De Cervantes&lt;/author&gt;</span>
</span><span class='line'><span class="s1">                &lt;/book&gt;</span>
</span><span class='line'><span class="s1">                &lt;book available=&quot;14&quot; id=&quot;2&quot;&gt;</span>
</span><span class='line'><span class="s1">                    &lt;title&gt;Catcher in the Rye&lt;/title&gt;</span>
</span><span class='line'><span class="s1">                   &lt;author id=&quot;2&quot;&gt;JD Salinger&lt;/author&gt;</span>
</span><span class='line'><span class="s1">               &lt;/book&gt;</span>
</span><span class='line'><span class="s1">               &lt;book available=&quot;13&quot; id=&quot;3&quot;&gt;</span>
</span><span class='line'><span class="s1">                   &lt;title&gt;Alice in Wonderland&lt;/title&gt;</span>
</span><span class='line'><span class="s1">                   &lt;author id=&quot;3&quot;&gt;Lewis Carroll&lt;/author&gt;</span>
</span><span class='line'><span class="s1">               &lt;/book&gt;</span>
</span><span class='line'><span class="s1">               &lt;book available=&quot;5&quot; id=&quot;4&quot;&gt;</span>
</span><span class='line'><span class="s1">                   &lt;title&gt;Don Xijote&lt;/title&gt;</span>
</span><span class='line'><span class="s1">                   &lt;author id=&quot;4&quot;&gt;Manuel De Cervantes&lt;/author&gt;</span>
</span><span class='line'><span class="s1">               &lt;/book&gt;</span>
</span><span class='line'><span class="s1">           &lt;/books&gt;</span>
</span><span class='line'><span class="s1">       &lt;/value&gt;</span>
</span><span class='line'><span class="s1">    &lt;/response&gt;</span>
</span><span class='line'><span class="s1">&#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlSlurper</span><span class="o">().</span><span class="na">parseText</span><span class="o">(</span><span class="n">books</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">book</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">value</span><span class="o">.</span><span class="na">books</span><span class="o">.</span><span class="na">book</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="kt">def</span> <span class="n">bookAuthorId1</span> <span class="o">=</span> <span class="n">book</span><span class="o">.</span><span class="nd">@id</span>
</span><span class='line'><span class="kt">def</span> <span class="n">bookAuthorId2</span> <span class="o">=</span> <span class="n">book</span><span class="o">[</span><span class="s1">&#39;@id&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">bookAuthorId1</span> <span class="o">==</span> <span class="s1">&#39;1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// .&#39;*&#39; could be replaced by .children()</span>
</span><span class='line'><span class="kt">def</span> <span class="n">catcherInTheRye</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">value</span><span class="o">.</span><span class="na">books</span><span class="o">.</span><span class="s1">&#39;*&#39;</span><span class="o">.</span><span class="na">find</span> <span class="o">{</span> <span class="n">node</span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="c1">// node.@id == 2 could be expressed as node[&#39;@id&#39;] == 2</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="na">name</span><span class="o">()</span> <span class="o">==</span> <span class="s1">&#39;book&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">node</span><span class="o">.</span><span class="nd">@id</span> <span class="o">==</span> <span class="s1">&#39;2&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">catcherInTheRye</span><span class="o">.</span><span class="na">title</span><span class="o">.</span><span class="na">text</span><span class="o">()</span> <span class="o">==</span> <span class="s1">&#39;Catcher in the Rye&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// .&#39;**&#39; could be replaced by .depthFirst()</span>
</span><span class='line'><span class="kt">def</span> <span class="n">bookId</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="s1">&#39;**&#39;</span><span class="o">.</span><span class="na">find</span> <span class="o">{</span> <span class="n">book</span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">book</span><span class="o">.</span><span class="na">author</span><span class="o">.</span><span class="na">text</span><span class="o">()</span> <span class="o">==</span> <span class="s1">&#39;Lewis Carroll&#39;</span>
</span><span class='line'><span class="o">}.</span><span class="nd">@id</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">bookId</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// find(Closure cl) finds just the first occurrence. To find all titles:</span>
</span><span class='line'><span class="kt">def</span> <span class="n">titles</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="s1">&#39;**&#39;</span><span class="o">.</span><span class="na">findAll</span><span class="o">{</span> <span class="n">node</span><span class="o">-&gt;</span> <span class="n">node</span><span class="o">.</span><span class="na">name</span><span class="o">()</span> <span class="o">==</span> <span class="s1">&#39;title&#39;</span> <span class="o">}*.</span><span class="na">text</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">titles</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see there are two types of notations to get attributes, the</p>

<ul>
<li>direct notation with <code>@nameoftheattribute</code></li>
<li>map notation using <code>['@nameoftheattribute']</code></li>
</ul>


<h3>Writing XML</h3>

<figure class='code'><figcaption><span>Standard usage of MarkupBuilder</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="o">()</span>
</span><span class='line'><span class="kt">def</span> <span class="n">xml</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MarkupBuilder</span><span class="o">(</span><span class="n">writer</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">xml</span><span class="o">.</span><span class="na">records</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">car</span><span class="o">(</span><span class="nl">name:</span><span class="s1">&#39;HSV Maloo&#39;</span><span class="o">,</span> <span class="nl">make:</span><span class="s1">&#39;Holden&#39;</span><span class="o">,</span> <span class="nl">year:</span><span class="mi">2006</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">country</span><span class="o">(</span><span class="s1">&#39;Australia&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">record</span><span class="o">(</span><span class="nl">type:</span><span class="s1">&#39;speed&#39;</span><span class="o">,</span> <span class="s1">&#39;Production Pickup Truck with speed of 271kph&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">car</span><span class="o">(</span><span class="nl">name:</span><span class="s1">&#39;Royale&#39;</span><span class="o">,</span> <span class="nl">make:</span><span class="s1">&#39;Bugatti&#39;</span><span class="o">,</span> <span class="nl">year:</span><span class="mi">1931</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">country</span><span class="o">(</span><span class="s1">&#39;France&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">record</span><span class="o">(</span><span class="nl">type:</span><span class="s1">&#39;price&#39;</span><span class="o">,</span> <span class="s1">&#39;Most Valuable Car at $15 million&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">records</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlSlurper</span><span class="o">().</span><span class="na">parseText</span><span class="o">(</span><span class="n">writer</span><span class="o">.</span><span class="na">toString</span><span class="o">())</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">records</span><span class="o">.</span><span class="na">car</span><span class="o">.</span><span class="na">first</span><span class="o">().</span><span class="na">name</span><span class="o">.</span><span class="na">text</span><span class="o">()</span> <span class="o">==</span> <span class="s1">&#39;HSV Maloo&#39;</span>
</span><span class='line'><span class="k">assert</span> <span class="n">records</span><span class="o">.</span><span class="na">car</span><span class="o">.</span><span class="na">last</span><span class="o">().</span><span class="na">name</span><span class="o">.</span><span class="na">text</span><span class="o">()</span> <span class="o">==</span> <span class="s1">&#39;Royale&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>See documentation for the following use cases:</p>

<ul>
<li>Namespace aware</li>
<li>Generate elements inside XML document.</li>
</ul>


<p>Using <code>StreamingMarkupBuilder</code> is very similar to using <code>MarkupBuilder</code>.
The <code>bind</code> method returns a <code>Writable</code> instance that can be used to stream the markup.</p>

<figure class='code'><figcaption><span>Standard usage of StreamingMarkupBuilder</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">xml</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StreamingMarkupBuilder</span><span class="o">().</span><span class="na">bind</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">records</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">car</span><span class="o">(</span><span class="nl">name:</span><span class="s1">&#39;HSV Maloo&#39;</span><span class="o">,</span> <span class="nl">make:</span><span class="s1">&#39;Holden&#39;</span><span class="o">,</span> <span class="nl">year:</span><span class="mi">2006</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">country</span><span class="o">(</span><span class="s1">&#39;Australia&#39;</span><span class="o">)</span>
</span><span class='line'>            <span class="n">record</span><span class="o">(</span><span class="nl">type:</span><span class="s1">&#39;speed&#39;</span><span class="o">,</span> <span class="s1">&#39;Production Pickup Truck with speed of 271kph&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">car</span><span class="o">(</span><span class="nl">name:</span><span class="s1">&#39;P50&#39;</span><span class="o">,</span> <span class="nl">make:</span><span class="s1">&#39;Peel&#39;</span><span class="o">,</span> <span class="nl">year:</span><span class="mi">1962</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">country</span><span class="o">(</span><span class="s1">&#39;Isle of Man&#39;</span><span class="o">)</span>
</span><span class='line'>            <span class="n">record</span><span class="o">(</span><span class="nl">type:</span><span class="s1">&#39;size&#39;</span><span class="o">,</span> <span class="s1">&#39;Smallest Street-Legal Car at 99cm wide and 59 kg in weight&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">car</span><span class="o">(</span><span class="nl">name:</span><span class="s1">&#39;Royale&#39;</span><span class="o">,</span> <span class="nl">make:</span><span class="s1">&#39;Bugatti&#39;</span><span class="o">,</span> <span class="nl">year:</span><span class="mi">1931</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">country</span><span class="o">(</span><span class="s1">&#39;France&#39;</span><span class="o">)</span>
</span><span class='line'>            <span class="n">record</span><span class="o">(</span><span class="nl">type:</span><span class="s1">&#39;price&#39;</span><span class="o">,</span> <span class="s1">&#39;Most Valuable Car at $15 million&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">records</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlSlurper</span><span class="o">().</span><span class="na">parseText</span><span class="o">(</span><span class="n">xml</span><span class="o">.</span><span class="na">toString</span><span class="o">())</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">records</span><span class="o">.</span><span class="na">car</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'><span class="k">assert</span> <span class="n">records</span><span class="o">.</span><span class="na">car</span><span class="o">.</span><span class="na">find</span> <span class="o">{</span> <span class="n">it</span><span class="o">.</span><span class="nd">@name</span> <span class="o">==</span> <span class="s1">&#39;P50&#39;</span> <span class="o">}.</span><span class="na">country</span><span class="o">.</span><span class="na">text</span><span class="o">()</span> <span class="o">==</span> <span class="s1">&#39;Isle of Man&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>MarkupBuilderHelper</h4>

<p>This helper normally can be accessed from within an instance of class MarkupBuilder or an instance of StreamingMarkupBuilder as <code>mkp</code> property.</p>

<figure class='code'><figcaption><span>Using mkp for comments and escape in XML</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">xmlWriter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="o">()</span>
</span><span class='line'><span class="kt">def</span> <span class="n">xmlMarkup</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MarkupBuilder</span><span class="o">(</span><span class="n">xmlWriter</span><span class="o">).</span><span class="na">rules</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mkp</span><span class="o">.</span><span class="na">comment</span><span class="o">(</span><span class="s1">&#39;THIS IS THE MAIN RULE&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">rule</span><span class="o">(</span><span class="nl">sentence:</span> <span class="n">mkp</span><span class="o">.</span><span class="na">yield</span><span class="o">(</span><span class="s1">&#39;3 &gt; n&#39;</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">xmlWriter</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="s1">&#39;3 &amp;gt; n&#39;</span><span class="o">)</span>
</span><span class='line'><span class="k">assert</span> <span class="n">xmlWriter</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="s1">&#39;&lt;!-- THIS IS THE MAIN RULE --&gt;&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Code recipes</h3>

<p>The input XML file is based on typical Maven &ldquo;settings.xml&rdquo; file.</p>

<p><strong>Recipe 1</strong>: Read, transform, and write to file. Based on <a href="https://stackoverflow.com/questions/2245641/load-modify-and-write-an-xml-document-in-groovy">this</a>.</p>

<figure class='code'><figcaption><span>XML transform to file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">groovy.xml.StreamingMarkupBuilder</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">groovy.xml.XmlUtil</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="nf">transformXml</span><span class="o">(</span><span class="n">String</span> <span class="n">filePath</span><span class="o">,</span> <span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">TMP_PATH</span> <span class="o">=</span> <span class="s1">&#39;/tmp/temp.xml&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="n">inFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span> <span class="n">filePath</span> <span class="o">)</span>
</span><span class='line'>  <span class="kt">def</span> <span class="n">outFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span> <span class="n">TMP_PATH</span> <span class="o">)</span>
</span><span class='line'>  <span class="kt">def</span> <span class="n">xml</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlSlurper</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">).</span><span class="na">parse</span><span class="o">(</span><span class="n">inFile</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">xml</span><span class="o">.</span><span class="na">servers</span><span class="o">.</span><span class="na">server</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">node</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="n">outBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StreamingMarkupBuilder</span><span class="o">()</span>
</span><span class='line'>  <span class="kt">def</span> <span class="n">outWriter</span> <span class="o">=</span> <span class="n">outFile</span><span class="o">.</span><span class="na">newWriter</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Option 1: Write XML to one line</span>
</span><span class='line'>  <span class="n">outWriter</span> <span class="o">&lt;&lt;</span> <span class="n">outBuilder</span><span class="o">.</span><span class="na">bind</span><span class="o">{</span> <span class="n">mkp</span><span class="o">.</span><span class="na">yield</span> <span class="n">xml</span> <span class="o">}</span>
</span><span class='line'>  <span class="c1">// Option 2: Pretty print XML</span>
</span><span class='line'>  <span class="n">XmlUtil</span><span class="o">.</span><span class="na">serialize</span><span class="o">(</span> <span class="n">xml</span><span class="o">,</span> <span class="n">outWriter</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">TMP_PATH</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For overwriting the original file (based on <a href="https://stackoverflow.com/questions/18385062/writing-updated-xml-to-originally-parsed-file">this</a>):</p>

<figure class='code'><figcaption><span>Write the transformed XML to original file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">inFile</span><span class="o">.</span><span class="na">withWriter</span> <span class="o">{</span> <span class="n">outWriter</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">XmlUtil</span><span class="o">.</span><span class="na">serialize</span><span class="o">(</span> <span class="k">new</span> <span class="n">StreamingMarkupBuilder</span><span class="o">().</span><span class="na">bind</span><span class="o">{</span> <span class="n">mkp</span><span class="o">.</span><span class="na">yield</span> <span class="n">xml</span> <span class="o">},</span> <span class="n">outWriter</span> <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Recipe 2</strong>: Read, transform, and write to string.</p>

<figure class='code'><figcaption><span>XML transform to String</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">groovy.xml.XmlUtil</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@NonCPS</span>
</span><span class='line'><span class="kt">def</span> <span class="nf">transformXml</span><span class="o">(</span><span class="n">String</span> <span class="n">xmlContent</span><span class="o">,</span> <span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">def</span> <span class="n">xml</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlSlurper</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">).</span><span class="na">parseText</span><span class="o">(</span><span class="n">xmlContent</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">echo</span> <span class="s1">&#39;Start tranforming XML&#39;</span>
</span><span class='line'>  <span class="n">xml</span><span class="o">.</span><span class="na">servers</span><span class="o">.</span><span class="na">server</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">node</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="n">outWriter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="o">()</span>
</span><span class='line'>  <span class="n">XmlUtil</span><span class="o">.</span><span class="na">serialize</span><span class="o">(</span> <span class="n">xml</span><span class="o">,</span> <span class="n">outWriter</span> <span class="o">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">outWriter</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Tips</h3>

<ul>
<li><code>XmlSlurper(false, false)</code> is used due to <a href="https://stackoverflow.com/questions/9197588/tag0-namespace-added-for-elements-in-default-namespace">this</a></li>
</ul>


<h3>References</h3>

<ul>
<li><a href="http://groovy-lang.org/processing-xml.html">Processing XML</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle Cookbook]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/05/11/gradle-cookbook/"/>
    <updated>2017-05-11T10:20:39-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/05/11/gradle-cookbook</id>
    <content type="html"><![CDATA[<p>This post goes over simple (but beyond the very basic) recipes for getting started with Gradle.</p>

<!--more-->


<h3>Basic tasks</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./gradlew dependencies
</span><span class='line'>
</span><span class='line'># Subproject
</span><span class='line'>./gradlew :subprojectName:dependencies
</span><span class='line'>
</span><span class='line'># Configuration
</span><span class='line'>./gradlew dependencies --configuration testCompile</span></code></pre></td></tr></table></div></figure>


<p>In the second command based on <a href="http://stackoverflow.com/questions/27763472/how-to-check-dependency-list-at-runtime-gradle">this example</a>, the root project might not have dependencies and you want to list dependencies on one of the subprojects.</p>

<p>In the third command based on <a href="https://discuss.gradle.org/t/how-to-find-which-dependency-is-fetching-a-certain-jar/7319/10">this example</a>, you want to see which task will fetch a certain JAR (e.g., velocity).</p>

<h3>Sample <code>build.gradle</code> file</h3>

<p>Most of the tutorials show a very simplistic <code>build.gradle</code> file to illustrate the basics.
However, starting from those simple build files will often lead to frequent major changes, coming from frequent Google and StackOverflow searches for how to do something (e.g., Nexus authentication).
This section shows how a <code>build.gradle</code> file looks like for a medium-size team working in industry.</p>

<figure class='code'><figcaption><span>Sample build file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">buildscript</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">credentials</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">username</span> <span class="n">nexusUsername</span>
</span><span class='line'>                <span class="n">password</span> <span class="n">nexusPassword</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">url</span> <span class="o">{</span> <span class="n">nexusPublic</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="s1">&#39;com.h2database:h2:1.3.170&#39;</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="s1">&#39;org.postgresql:postgresql:9.4-1201-jdbc41&#39;</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="s1">&#39;com.example.plugins:some-gradle-plugin:1.1.6&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;com.example.plugins&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">subprojects</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">credentials</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">username</span> <span class="n">nexusUsername</span>
</span><span class='line'>                <span class="n">password</span> <span class="n">nexusPassword</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">url</span> <span class="o">{</span> <span class="n">nexusPublic</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;groovy&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">group</span> <span class="o">=</span> <span class="s1">&#39;com.example.app&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Core</span>
</span><span class='line'>        <span class="n">compile</span> <span class="o">(</span><span class="s1">&#39;org.apache.kafka:kafka_2.11:0.8.2.0&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">exclude</span> <span class="nl">module:</span> <span class="s1">&#39;jms&#39;</span>
</span><span class='line'>            <span class="n">exclude</span> <span class="nl">module:</span> <span class="s1">&#39;jmxtools&#39;</span>
</span><span class='line'>            <span class="n">exclude</span> <span class="nl">module:</span> <span class="s1">&#39;jmxri&#39;</span>
</span><span class='line'>            <span class="n">exclude</span> <span class="nl">group:</span> <span class="s1">&#39;org.slf4j&#39;</span>
</span><span class='line'>            <span class="n">exclude</span> <span class="nl">module:</span> <span class="s1">&#39;junit&#39;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">compile</span> <span class="s1">&#39;com.amazonaws:aws-java-sdk:1.9.24&#39;</span>
</span><span class='line'>        <span class="n">compile</span> <span class="s1">&#39;io.swagger:swagger-core:1.5.10&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * junit is excluded in multiple places, because org.apache.cassandra.cassandra-all:2.1.9</span>
</span><span class='line'><span class="cm">         * includes JUnit 4.8.1 as a compile dependency, and our test framework needing 4.12</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="c1">// Support</span>
</span><span class='line'>        <span class="n">compile</span> <span class="o">(</span><span class="s2">&quot;org.apache.cassandra.cassandra-all:2.1.9&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">exclude</span> <span class="nl">module:</span> <span class="s1">&#39;junit&#39;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">compile</span> <span class="o">(</span><span class="s2">&quot;com.example.app:common:${commons_version}&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">exclude</span> <span class="nl">module:</span> <span class="s1">&#39;junit&#39;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">compile</span> <span class="s2">&quot;org.flywaydb:flyway-core:3.2.1&quot;</span>
</span><span class='line'>        <span class="n">testCompile</span> <span class="s1">&#39;org.hsqldb:hsqldb:2.3.2&#39;</span>
</span><span class='line'>        <span class="n">compile</span> <span class="s1">&#39;com.google.code.findbugs:findbugs:3.0.1&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// CassandraSetupTest-based tests fail for newer versions of Guava.</span>
</span><span class='line'>    <span class="n">configurations</span><span class="o">.</span><span class="na">all</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">resolutionStrategy</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">force</span> <span class="s1">&#39;com.google.guava:guava:18.0&#39;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">jacocoCoverage</span><span class="o">.</span><span class="na">limits</span> <span class="o">=</span>  <span class="o">[</span>
</span><span class='line'>    <span class="s1">&#39;instruction&#39;</span><span class="o">:</span> <span class="mi">40</span><span class="o">,</span>
</span><span class='line'>    <span class="s1">&#39;line&#39;</span>       <span class="o">:</span> <span class="mi">48</span><span class="o">,</span>
</span><span class='line'>    <span class="s1">&#39;complexity&#39;</span> <span class="o">:</span> <span class="mi">30</span><span class="o">,</span>
</span><span class='line'>    <span class="s1">&#39;method&#39;</span>     <span class="o">:</span> <span class="mi">55</span><span class="o">,</span>
</span><span class='line'>    <span class="s1">&#39;class&#39;</span>      <span class="o">:</span> <span class="mi">70</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">project</span><span class="o">(</span><span class="s1">&#39;:server&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mainClassName</span> <span class="o">=</span> <span class="s1">&#39;com.example.app.ApiApplication&#39;</span>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">compile</span> <span class="s1">&#39;com.exacttarget:partner-api:1.0.3&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">testCompile</span> <span class="s1">&#39;com.squareup.okhttp3:mockwebserver:3.2.0&#39;</span>
</span><span class='line'>        <span class="n">testCompile</span> <span class="s1">&#39;org.apache.lucene:lucene-test-framework:5.3.1&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">test</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">exclude</span> <span class="s1">&#39;**/SomeClass.class&#39;</span>
</span><span class='line'>        <span class="n">exclude</span> <span class="s1">&#39;**/*IntegrationTest.*&#39;</span>
</span><span class='line'>      <span class="n">exclude</span> <span class="s1">&#39;**/schema/model/*MoreWildcard.class&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// generateSwagger is not a Test but depends on the testing framework</span>
</span><span class='line'>    <span class="n">task</span> <span class="nf">generateSwagger</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Test</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="n">testClasses</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">include</span> <span class="s1">&#39;**/util/SwaggerFileGenerator.class&#39;</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">swaggerPath</span> <span class="o">=</span> <span class="s1">&#39;build/swagger-test.yaml&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Not considered &quot;UP-TO-DATE&quot; if the output file does not exist</span>
</span><span class='line'>        <span class="n">outputs</span><span class="o">.</span><span class="na">upToDateWhen</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">file</span><span class="o">(</span><span class="s1">&#39;server/&#39;</span> <span class="o">+</span> <span class="n">swaggerPath</span><span class="o">).</span><span class="na">exists</span><span class="o">()</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">systemProperty</span> <span class="s1">&#39;test.swagger.outfile&#39;</span><span class="o">,</span> <span class="n">file</span><span class="o">(</span><span class="n">swaggerPath</span><span class="o">)</span>
</span><span class='line'>        <span class="n">doLast</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">println</span> <span class="s2">&quot;\n\nSwagger documentation can be found in api/server/${swaggerPath}\n\n&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">checkstyle</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">checkstyleMain</span><span class="o">.</span><span class="na">exclude</span> <span class="s1">&#39;**/db/migration/*.java&#39;</span> <span class="c1">// Exclude flywaydb migrations: they violate type name checks</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">jacocoCoverage</span><span class="o">.</span><span class="na">limits</span> <span class="o">=</span>  <span class="o">[</span>
</span><span class='line'>        <span class="s1">&#39;instruction&#39;</span><span class="o">:</span> <span class="mi">40</span><span class="o">,</span>
</span><span class='line'>        <span class="s1">&#39;line&#39;</span>       <span class="o">:</span> <span class="mi">48</span><span class="o">,</span>
</span><span class='line'>        <span class="s1">&#39;complexity&#39;</span> <span class="o">:</span> <span class="mi">30</span><span class="o">,</span>
</span><span class='line'>        <span class="s1">&#39;method&#39;</span>     <span class="o">:</span> <span class="mi">55</span><span class="o">,</span>
</span><span class='line'>        <span class="s1">&#39;class&#39;</span>      <span class="o">:</span> <span class="mi">70</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Maven/Nexus authentication</h4>

<p>In Gradle, Nexus authentication can be specified in both <code>build.gradle</code> and <code>gradle.properties</code> file, where <code>build.gradle</code> should be checked into VCS (e.g., git) while <code>gradle.properties</code> contains sensitive credentials information.</p>

<figure class='code'><figcaption><span>Example build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">credentials</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">username</span> <span class="n">nexusUsername</span>
</span><span class='line'>            <span class="n">password</span> <span class="n">nexusPassword</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">url</span> <span class="o">{</span> <span class="n">nexusPublic</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Example gradle.properties</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">nexusUsername</span><span class="o">=</span><span class="s">myUsername</span>
</span><span class='line'><span class="na">nexusPassword</span><span class="o">=</span><span class="s">password123</span>
</span><span class='line'><span class="na">nexusPublic</span><span class="o">=</span><span class="s">https://nexus.example.com/nexus/content/groups/public/</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Jenkins, to securely passing Nexus credentials, <code>properties</code> file is not recommended.
Instead, use <code>withCredentials</code> for passing credentials as shown in <a href="http://tdongsi.github.io/blog/2017/05/20/gradle-settings-in-jenkinsfile/">this blog post</a>.</p>

<h4><code>buildscript</code> block</h4>

<p>From <a href="https://discuss.gradle.org/t/what-is-difference-between-buildscript-classpath-and-dependencies-compile/4290/2">here</a>,
the <code>buildscript</code> block only controls dependencies for the buildscript process itself, not for the application code, which the top-level <code>dependencies</code> block controls.
For instance, you could define dependencies in &ldquo;buildscript/classpath&rdquo; that represent Gradle plugins used in the build process.
Those plugins would not be referenced as dependencies for the application code.
Read the Gradle User Guide for more information (the PDF is easy to search).</p>

<h4>Proxy</h4>

<p>Use <code>http.proxyHost</code> and <code>https.proxyHost</code> accordingly for setting up proxy.</p>

<figure class='code'><figcaption><span>Example HTTP proxy in Jenkinsfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>        <span class="n">echo</span> <span class="s2">&quot;Running with proxy ${env.https_proxy} and ${env.http_proxy}&quot;</span>
</span><span class='line'>        <span class="n">PROXY_OPTIONS</span> <span class="o">=</span> <span class="s1">&#39;-Dhttps.proxyHost=public0-proxy1.data.example.net -Dhttps.proxyPort=8080&#39;</span>
</span><span class='line'>        <span class="n">sh</span> <span class="s2">&quot;./gradlew ${PROXY_OPTIONS} run --stacktrace --info&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Quick-start for Groovy Programming Test]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/05/10/tutorial-quick-start-for-groovy-programming-test/"/>
    <updated>2017-05-10T00:07:18-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/05/10/tutorial-quick-start-for-groovy-programming-test</id>
    <content type="html"><![CDATA[<p>Eclipse &amp; Maven.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Common Interview Questions]]></title>
    <link href="http://tdongsi.github.io/java/blog/2016/09/09/common-interview-questions/"/>
    <updated>2016-09-09T00:50:08-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2016/09/09/common-interview-questions</id>
    <content type="html"><![CDATA[<p>Common interview questions that are specific to Java language.</p>

<!--more-->


<h3>Trivia Questions</h3>

<p>The full list is <a href="http://javarevisited.blogspot.sg/2015/10/133-java-interview-questions-answers-from-last-5-years.html">here</a>.</p>

<ol>
<li>Why constructors dont return any value. What problem did Java face in returning a value from Constructors?

<ul>
<li>So the reason the constructor doesn&rsquo;t return a value is because it&rsquo;s not called directly by your code, it&rsquo;s called by the memory allocation and object initialization code in the runtime.
Its return value (if it actually has one when compiled down to machine code) is opaque to the user - therefore, you can&rsquo;t specify it.</li>
</ul>
</li>
<li>Difference between abstract class and interface?

<ul>
<li>The question is lame. However, it comes up so often that you have to get ready for it.
Failing to give the expected answer can make you fail in the phone screen.</li>
<li>Answer <a href="http://javarevisited.blogspot.com/2013/05/difference-between-abstract-class-vs-interface-java-when-prefer-over-design-oops.html">here</a>.</li>
</ul>
</li>
<li>What is string immutable? What is intern() method on String?</li>
<li>What is the difference between StringBuilder vs. StringBuffer? Vector and ArrayList?</li>
<li>Generics: is there any way to get the generic type in your program? (Answer: no due to type erasure)</li>
<li>Design pattern: what do you know? Which one do you use most? In what situation?</li>
<li>What is the <code>finalize()</code> method?

<ul>
<li>Finalizers are unpredictable, often dangerous, and generally unnecessary.
Only use it when you need a safety-net, a reminder to call explicit termination method OR you work with native methods and objects.</li>
</ul>
</li>
</ol>


<p>Java:</p>

<ul>
<li>Methods of Object class (relation between hashCode() and equals(), give a simple algorithm to do hashCode(), when to use finalize()). See chapter in Effective Java (see wiki)

<ul>
<li>equals() compare the hash code that is generated by hashCode(), usually different for different instances. If the two different objects, such as String, have equals() as true, the equals() function must be overridden.</li>
<li>Simple hashCode: use the time of creation.</li>
</ul>
</li>
<li>Collections framework (when to use Map, List, Set; implementations of those). See wiki</li>
<li>Some details about frequently used classes: String class (e.g., what intern() method does), StringBuilder vs. StringBuffer</li>
<li>Java I/O: using Scanner, printf, InputStream</li>
<li>Java generics: erasure, Java generics vs. C++ template</li>
<li>It&rsquo;s very impressive if you know about Java concurrency: e.g., what is volatile? when to use it? synchronize?</li>
</ul>


<p>20) From this book, which methods are invoked? Classes are extended as Dessert &lt;- Cake &lt;- ChocolateCake, and Dessert &lt;- Scone &lt;- ButteredScone.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Overloaded method forms</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">more</span><span class="o">(</span> <span class="n">Dessert</span> <span class="n">d</span><span class="o">,</span> <span class="n">Scone</span> <span class="n">s</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">more</span><span class="o">(</span> <span class="n">Cake</span> <span class="n">c</span><span class="o">,</span> <span class="n">Dessert</span> <span class="n">d</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">more</span><span class="o">(</span> <span class="n">Chocolatecake</span> <span class="n">cc</span><span class="o">,</span> <span class="n">Scone</span> <span class="n">s</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">more</span><span class="o">(</span> <span class="n">Dessert</span><span class="o">...</span> <span class="n">desserts</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Method invocations</span>
</span><span class='line'><span class="n">more</span><span class="o">(</span> <span class="n">dessertRef</span><span class="o">,</span> <span class="n">sconeRef</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="n">more</span><span class="o">(</span> <span class="n">chocolateCakeRef</span><span class="o">,</span> <span class="n">dessertRef</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="n">more</span><span class="o">(</span> <span class="n">chocolateCakeRef</span><span class="o">,</span> <span class="n">butteredSconeRef</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="n">more</span><span class="o">(</span> <span class="n">cakeRef</span><span class="o">,</span> <span class="n">sconeRef</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="n">more</span><span class="o">(</span> <span class="n">sconeRef</span><span class="o">,</span> <span class="n">cakeRef</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Singleton question</h3>

<p>This question seems to be common because it shows that if a candidate knows &ldquo;design pattern&rdquo;, best practices, concurrency, and enum (one of newer Java features).</p>

<p>TODO: Enum</p>

<p>TODO: Standard singleton with lazy initlaization and private constructor.</p>

<p>TODO: Is it thread-safe?</p>

<p>TODO: How to make it thread-safe?</p>

<p>TODO: How to make it more performant?</p>

<p>Double-checked locking idiom for Singleton.
<a href="http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html">http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</a></p>

<figure class='code'><figcaption><span>Double-checked locking idiom</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Works with acquire/release semantics for volatile</span>
</span><span class='line'><span class="c1">// Broken under current semantics for volatile</span>
</span><span class='line'>  <span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">volatile</span> <span class="n">Helper</span> <span class="n">helper</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Helper</span> <span class="nf">getHelper</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">helper</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">synchronized</span><span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">helper</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                        <span class="n">helper</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Helper</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">helper</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Quick-start for Java Programming Test]]></title>
    <link href="http://tdongsi.github.io/java/blog/2016/08/29/tutorial-timed-programming-test/"/>
    <updated>2016-08-29T01:38:40-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2016/08/29/tutorial-timed-programming-test</id>
    <content type="html"><![CDATA[<p>For <strong>timed</strong> programming tests, new test-takers usually underestimate how short two and a half hours can be.
Remember that 30 minutes of that will go into reading the problem instructions and another 10 to 30 minutes go into setting up before you can start writing the first line of code.
And if you are unlucky, you need another 15-30 minutes to debug any issue that comes up.
That leaves you only about one hour for actually solving the problem.
Most of the test takers are experienced and skilled programmers, but they tend to forget that many of those steps above are not needed in their everyday tasks, in their daily environments and routines.</p>

<p>This post lists out steps to get started quickly for a <strong>Java</strong> programming test, using Eclipse and Maven.</p>

<!--more-->


<p>(1) Use this command to setup an Eclipse empty project.</p>

<figure class='code'><figcaption><span>Create an Eclipse project</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn archetype:generate -DgroupId=my.interview -DartifactId=CompanyName -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false</span></code></pre></td></tr></table></div></figure>


<p>(2) In Eclipse, go to File > Import > Existing Maven Project. Import the Eclipse project created above.</p>

<p>(3) Update pom.xml for &ldquo;Executable jar file&rdquo; + &ldquo;specified Java version&rdquo;. Replace <code>my.interview.CompanyName</code> with the correct name of your main class.</p>

<figure class='code'><figcaption><span>Add this into pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;build&gt;</span>
</span><span class='line'>    <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>        <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>maven-assembly-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>                <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;goal&gt;</span>attached<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;phase&gt;</span>package<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;descriptorRefs&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;descriptorRef&gt;</span>jar-with-dependencies<span class="nt">&lt;/descriptorRef&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/descriptorRefs&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;archive&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;manifest&gt;</span>
</span><span class='line'>                                <span class="nt">&lt;mainClass&gt;</span>my.interview.CompanyName<span class="nt">&lt;/mainClass&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;/manifest&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/archive&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>        <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>3.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;source&gt;</span>1.7<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>                <span class="nt">&lt;target&gt;</span>1.7<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'><span class="nt">&lt;/build&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>(4) Add logging. Ability to use logging frameworks shows off your skill and experience.
More importantly, it allows you to liberally print lots of information needed for debugging without worrying about cleaning up console output later.</p>

<ul>
<li>Create <code>resources</code> source folder in <code>src/main</code>.</li>
<li>Add <code>log4j.properties</code>. For simplicity, only log information to console.

<ul>
<li>Use <code>logger.debug</code> for printing debug information and turn on/off logging by setting <code>rootLogger</code> to <code>DEBUG</code>/<code>INFO</code>.</li>
</ul>
</li>
<li>You need to add into <code>pom.xml</code> dependencies for the three followings: <code>slf4j-api</code> (interface), <code>slf4j-log4j12</code> (route slf4j calls to log4j), <code>log4j</code> (logging backend).</li>
</ul>


<p>Use the following content for <code>log4j.properties</code>, modified from <a href="https://logging.apache.org/log4j/1.2/manual.html">this example</a>.</p>

<figure class='code'><figcaption><span>log4j.properties file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">#</span> <span class="n">Set</span> <span class="n">root</span> <span class="n">logger</span> <span class="n">level</span> <span class="n">to</span> <span class="n">DEBUG</span> <span class="n">and</span> <span class="n">its</span> <span class="n">only</span> <span class="n">appender</span> <span class="n">to</span> <span class="n">A1</span><span class="o">.</span>
</span><span class='line'><span class="n">log4j</span><span class="o">.</span><span class="na">rootLogger</span><span class="o">=</span> <span class="n">INFO</span><span class="o">,</span> <span class="n">A1</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="n">A1</span> <span class="n">is</span> <span class="n">set</span> <span class="n">to</span> <span class="n">be</span> <span class="n">a</span> <span class="n">ConsoleAppender</span><span class="o">.</span>
</span><span class='line'><span class="n">log4j</span><span class="o">.</span><span class="na">appender</span><span class="o">.</span><span class="na">A1</span><span class="o">=</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">log4j</span><span class="o">.</span><span class="na">ConsoleAppender</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="n">A1</span> <span class="n">uses</span> <span class="n">PatternLayout</span><span class="o">.</span>
</span><span class='line'><span class="n">log4j</span><span class="o">.</span><span class="na">appender</span><span class="o">.</span><span class="na">A1</span><span class="o">.</span><span class="na">layout</span><span class="o">=</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">log4j</span><span class="o">.</span><span class="na">PatternLayout</span>
</span><span class='line'><span class="n">log4j</span><span class="o">.</span><span class="na">appender</span><span class="o">.</span><span class="na">A1</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">ConversionPattern</span><span class="o">=</span> <span class="o">[%</span><span class="n">t</span><span class="o">][%-</span><span class="mi">5</span><span class="n">p</span><span class="o">][%</span><span class="n">c</span><span class="o">]</span> <span class="o">-</span> <span class="o">%</span><span class="n">m</span><span class="o">%</span><span class="n">n</span>
</span></code></pre></td></tr></table></div></figure>


<p>(5) At the end, your <code>pom.xml</code> shoulld looks like <a href="https://github.com/tdongsi/bart-parking/blob/f8511604bafa4564c468f952ca2fce1452f6a097/java/bart/pom.xml">this</a>. Check setup.</p>

<figure class='code'><figcaption><span>Check running</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn clean package
</span><span class='line'>java -jar target/xxx-jar-with-dependencies.jar</span></code></pre></td></tr></table></div></figure>


<p>(6) Use <code>StreamEditor</code> interface for easy testing in Eclipse and CLI.</p>

<figure class='code'><figcaption><span>StreamEditor interface</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">StreamEditor</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">InputStream</span> <span class="n">in</span><span class="o">,</span> <span class="n">PrintStream</span> <span class="n">out</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Main class calling Solver that implements StreamEditor interface</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">InputStream</span> <span class="n">in</span><span class="o">;</span>
</span><span class='line'>      <span class="n">PrintStream</span> <span class="n">out</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">FileInputStream</span><span class="o">(</span><span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
</span><span class='line'>              <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">PrintStream</span><span class="o">(</span><span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]));</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Could not find file&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="k">return</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">in</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">;</span>
</span><span class='line'>          <span class="n">out</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">Solver</span> <span class="n">solver</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Solver</span><span class="o">();</span>
</span><span class='line'>      <span class="n">solver</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">in</span><span class="o">,</span> <span class="n">out</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the test requires specific input from/output to console or file, it&rsquo;s easy to do it either way.</p>

<figure class='code'><figcaption><span>Commands to run when using StreamEditor interface</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>For console input/output:
</span><span class='line'>java -jar target\xxx-jar-with-dependencies.jar &lt; data\in.txt
</span><span class='line'>
</span><span class='line'>For file input/output:
</span><span class='line'>java -jar target\Salesforce-1.0-SNAPSHOT-jar-with-dependencies.jar data/in.txt data/out.txt</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven Cookbook]]></title>
    <link href="http://tdongsi.github.io/java/blog/2015/06/19/maven-cookbook/"/>
    <updated>2015-06-19T14:07:37-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2015/06/19/maven-cookbook</id>
    <content type="html"><![CDATA[<p>This blog post lists out some common <code>mvn</code> commands.</p>

<!--more-->


<h3>Recipes</h3>

<p><strong>Recipe 1</strong>: <code>mvn</code> exit normally wieth test failures.</p>

<figure class='code'><figcaption><span>Exit normally with test failure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh "${mvnHome}/bin/mvn -B -Dmaven.test.failure.ignore verify"</span></code></pre></td></tr></table></div></figure>


<p><strong>Recipe 2</strong>: Switch between corporate Nexus and Maven Central.</p>

<p>Corporate Nexus is specified in settings.xml. Some need to use Maven Central for personal projects.
To switch between them, create a <a href="https://maven.apache.org/settings.html">minimal settings.xml</a> and specify with <code>mvn -s settings.xml</code>.</p>

<figure class='code'><figcaption><span>Minimal settings.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;settings</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span>
</span><span class='line'>  <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/SETTINGS/1.0.0</span>
</span><span class='line'><span class="s">                      https://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;localRepository/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;interactiveMode/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;usePluginRegistry/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;offline/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;pluginGroups/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;servers/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;mirrors/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;proxies/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;profiles/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;activeProfiles/&gt;</span>
</span><span class='line'><span class="nt">&lt;/settings&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Recipe 3</strong>: Install a jar file into local repository. See <a href="http://tdongsi.github.io/blog/2015/11/17/pushing-local-jar-file-into-your-local-maven-m2-repository/">here</a>.</p>

<h3>Reference</h3>

<ul>
<li><a href="https://maven.apache.org/settings.html">settings.xml</a></li>
<li><a href="http://maven.apache.org/plugins/maven-resources-plugin/examples/resource-directory.html">resource directory</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HttpClient Cookbook]]></title>
    <link href="http://tdongsi.github.io/java/blog/2015/06/08/httpclient-cookbook/"/>
    <updated>2015-06-08T17:14:29-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2015/06/08/httpclient-cookbook</id>
    <content type="html"><![CDATA[<p>Apache HttpClient library is regularly used in Java program to query REST endpoints.</p>

<!--more-->


<h3>Beginner Cookbook</h3>

<p>Based on HttpClient Tutorial (version 4.3).</p>

<p><strong>Recipe 1</strong>: For simple use cases, it is better to use <a href="https://hc.apache.org/httpcomponents-client-ga/tutorial/html/fluent.html">Fluent API</a>.</p>

<figure class='code'><figcaption><span>Fluent API</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">API_ENDPOINT</span> <span class="o">=</span> <span class="s">&quot;http://api.icndb.com/jokes/random&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">String</span> <span class="n">see</span> <span class="o">=</span> <span class="n">Request</span><span class="o">.</span><span class="na">Get</span><span class="o">(</span><span class="n">API_ENDPOINT</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">execute</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">returnContent</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">asString</span><span class="o">();</span>
</span><span class='line'><span class="n">assertFalse</span><span class="o">(</span><span class="n">see</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">());</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">see</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Recipe 2</strong>: Consuming response entities originate from a trusted HTTP server and are known to be of limited length. From <a href="https://hc.apache.org/httpcomponents-client-ga/tutorial/html/fundamentals.html">here</a>. <a href="http://www.vogella.com/tutorials/ApacheHttpClient/article.html">Another variant</a>.</p>

<figure class='code'><figcaption><span>Consuming entity content</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">CloseableHttpClient</span> <span class="n">httpclient</span> <span class="o">=</span> <span class="n">HttpClients</span><span class="o">.</span><span class="na">createDefault</span><span class="o">();</span>
</span><span class='line'><span class="n">HttpGet</span> <span class="n">httpget</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HttpGet</span><span class="o">(</span><span class="s">&quot;http://localhost/&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">CloseableHttpResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">httpclient</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">httpget</span><span class="o">);</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">HttpEntity</span> <span class="n">entity</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getEntity</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">entity</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">len</span> <span class="o">=</span> <span class="n">entity</span><span class="o">.</span><span class="na">getContentLength</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">len</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">len</span> <span class="o">&lt;</span> <span class="mi">2048</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">EntityUtils</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">entity</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Stream content out</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">response</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Advanced Cookbook</h3>

<h4>Version 4.1.x -> 4.2.1</h4>

<p>Git2Gus service uses HttpClient 4.2.1 (httpclient-4.2.1.jar).</p>

<p><strong>Recipe 1</strong>: Proxy setup. Based on <a href="https://stackoverflow.com/questions/9811828/common-httpclient-and-proxy">this</a>:</p>

<figure class='code'><figcaption><span>Setting up proxy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">HttpHost</span> <span class="n">proxy</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HttpHost</span><span class="o">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="o">,</span> <span class="mi">8080</span><span class="o">,</span> <span class="s">&quot;http&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">DefaultHttpClient</span> <span class="n">httpclient</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DefaultHttpClient</span><span class="o">();</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">httpclient</span><span class="o">.</span><span class="na">getParams</span><span class="o">().</span><span class="na">setParameter</span><span class="o">(</span><span class="n">ConnRoutePNames</span><span class="o">.</span><span class="na">DEFAULT_PROXY</span><span class="o">,</span> <span class="n">proxy</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">HttpHost</span> <span class="n">target</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HttpHost</span><span class="o">(</span><span class="s">&quot;issues.apache.org&quot;</span><span class="o">,</span> <span class="mi">443</span><span class="o">,</span> <span class="s">&quot;https&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">HttpGet</span> <span class="n">req</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HttpGet</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;executing request to &quot;</span> <span class="o">+</span> <span class="n">target</span> <span class="o">+</span> <span class="s">&quot; via &quot;</span> <span class="o">+</span> <span class="n">proxy</span><span class="o">);</span>
</span><span class='line'>    <span class="n">HttpResponse</span> <span class="n">rsp</span> <span class="o">=</span> <span class="n">httpclient</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="n">req</span><span class="o">);</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// When HttpClient instance is no longer needed,</span>
</span><span class='line'>    <span class="c1">// shut down the connection manager to ensure</span>
</span><span class='line'>    <span class="c1">// immediate deallocation of all system resources</span>
</span><span class='line'>    <span class="n">httpclient</span><span class="o">.</span><span class="na">getConnectionManager</span><span class="o">().</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With proxy authentication? Check out <a href="https://stackoverflow.com/questions/13288038/httpclient-4-2-2-and-proxy-with-username-password">this</a></p>

<p><strong>Recipe 2</strong>: Connection timeout. Based on <a href="https://gist.github.com/tychobrailleur/9fbf521727539b403c90">this</a>:</p>

<figure class='code'><figcaption><span>Conneciton timeout</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RunTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">runDefaultClient</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">URI</span> <span class="n">uri</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">URL</span><span class="o">(</span><span class="s">&quot;http://localhost:3000/&quot;</span><span class="o">).</span><span class="na">toURI</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">HttpHost</span> <span class="n">host</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HttpHost</span><span class="o">(</span><span class="n">uri</span><span class="o">.</span><span class="na">getHost</span><span class="o">(),</span> <span class="n">uri</span><span class="o">.</span><span class="na">getPort</span><span class="o">(),</span> <span class="n">uri</span><span class="o">.</span><span class="na">getScheme</span><span class="o">());</span>
</span><span class='line'>        <span class="n">DefaultHttpClient</span> <span class="n">httpClient</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DefaultHttpClient</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">httpClient</span><span class="o">.</span><span class="na">getParams</span><span class="o">().</span><span class="na">setParameter</span><span class="o">(</span><span class="n">CoreConnectionPNames</span><span class="o">.</span><span class="na">CONNECTION_TIMEOUT</span><span class="o">,</span> <span class="mi">2000</span><span class="o">);</span>
</span><span class='line'>        <span class="n">httpClient</span><span class="o">.</span><span class="na">getParams</span><span class="o">().</span><span class="na">setParameter</span><span class="o">(</span><span class="n">CoreConnectionPNames</span><span class="o">.</span><span class="na">SO_TIMEOUT</span><span class="o">,</span> <span class="mi">10000</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">HttpGet</span> <span class="n">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HttpGet</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">HttpResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">httpClient</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">host</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">getStatusLine</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Later version</h4>

<p><strong>Recipe 1</strong>: Based on <a href="http://hc.apache.org/httpcomponents-client-ga/httpclient/examples/org/apache/http/examples/client/ClientExecuteProxy.java">this</a></p>

<figure class='code'><figcaption><span>Setting up proxy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClientExecuteProxy</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span><span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">CloseableHttpClient</span> <span class="n">httpclient</span> <span class="o">=</span> <span class="n">HttpClients</span><span class="o">.</span><span class="na">createDefault</span><span class="o">();</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">HttpHost</span> <span class="n">target</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HttpHost</span><span class="o">(</span><span class="s">&quot;httpbin.org&quot;</span><span class="o">,</span> <span class="mi">443</span><span class="o">,</span> <span class="s">&quot;https&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">HttpHost</span> <span class="n">proxy</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HttpHost</span><span class="o">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="o">,</span> <span class="mi">8080</span><span class="o">,</span> <span class="s">&quot;http&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">RequestConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="n">RequestConfig</span><span class="o">.</span><span class="na">custom</span><span class="o">()</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">setProxy</span><span class="o">(</span><span class="n">proxy</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>            <span class="n">HttpGet</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HttpGet</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">request</span><span class="o">.</span><span class="na">setConfig</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Executing request &quot;</span> <span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestLine</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; to &quot;</span> <span class="o">+</span> <span class="n">target</span> <span class="o">+</span> <span class="s">&quot; via &quot;</span> <span class="o">+</span> <span class="n">proxy</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">CloseableHttpResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">httpclient</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="n">request</span><span class="o">);</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;----------------------------------------&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">getStatusLine</span><span class="o">());</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">EntityUtils</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">getEntity</span><span class="o">()));</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">response</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">httpclient</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Reference</h3>

<ul>
<li><a href="https://hc.apache.org/index.html">Project Home</a></li>
<li><a href="https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/index.html">JavaDoc</a></li>
<li>Alternative: <a href="https://www.eclipse.org/jetty/documentation/9.4.6.v20170531/http-client.html">Jetty HttpClient</a>.</li>
</ul>


<p>Apache HttpClient 4.2.1</p>

<ul>
<li><a href="https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient/4.2.1">Maven</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog Map]]></title>
    <link href="http://tdongsi.github.io/java/blog/2011/08/06/blog-map/"/>
    <updated>2011-08-06T15:05:44-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2011/08/06/blog-map</id>
    <content type="html"><![CDATA[<p>A blog post in 2011 will serve as a general guideline on how posts are organized in this blog.</p>

<ul>
<li>2015: Java topics. Too beginner to post in main blog.</li>
<li>2016: Java-related interview topics</li>
<li>2017: Groovy, Gradle topics.</li>
</ul>

]]></content>
  </entry>
  
</feed>
