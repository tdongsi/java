<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Personal Interview Notes]]></title>
  <link href="http://tdongsi.github.io/java/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/java/"/>
  <updated>2017-12-15T16:15:43-08:00</updated>
  <id>http://tdongsi.github.io/java/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Groovy Fundamentals: Part 5: Demos]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-5/"/>
    <updated>2017-12-08T17:17:20-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-5</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy Fundamentals: Part 4: Closures & Operators]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-4/"/>
    <updated>2017-12-08T17:17:09-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-4</id>
    <content type="html"><![CDATA[<p>This post corresponds to &ldquo;Basic Closures&rdquo; and &ldquo;Misc Operators&rdquo; sections of <a href="https://www.safaribooksonline.com/library/view/groovy-programming-fundamentals/9781491926253/">this course</a>.</p>

<!--more-->


<h3>Closures</h3>

<figure class='code'><figcaption><span>Iterating list with closure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">List</span> <span class="n">nums</span> <span class="o">=</span> <span class="o">[</span><span class="mi">9</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="nl">num:</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span> <span class="n">num</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Pro: not much. You don&#39;t have to specify type</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">num</span> <span class="k">in</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// println num</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Idiomatic in Groovy.</span>
</span><span class='line'><span class="n">nums</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">num</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">println</span> <span class="n">num</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">nums</span><span class="o">.</span><span class="na">eachWithIndex</span> <span class="o">{</span> <span class="n">num</span><span class="o">,</span> <span class="n">idx</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">println</span> <span class="s2">&quot;nums[$idx] == $num&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Iterating map with closure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Map</span> <span class="n">m</span> <span class="o">=</span> <span class="o">[</span><span class="nl">a:</span><span class="mi">1</span><span class="o">,</span> <span class="nl">b:</span><span class="mi">2</span><span class="o">,</span> <span class="nl">c:</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Java idiom</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">key</span> <span class="o">:</span> <span class="n">m</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Groovy idiom</span>
</span><span class='line'><span class="c1">// One parameter closure gives Map.Entry</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">e</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">println</span> <span class="s2">&quot;${e.key} ${e.value}&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">// Two parameter closure gives key, value</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">k</span><span class="o">,</span> <span class="n">v</span> <span class="o">-&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>collect method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">println</span> <span class="n">nums</span><span class="o">.</span><span class="na">collect</span> <span class="o">{</span> <span class="n">it</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">}</span> <span class="c1">// map</span>
</span><span class='line'>    <span class="o">.</span><span class="na">findAll</span> <span class="o">{</span> <span class="n">it</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">}</span>    <span class="c1">// filter</span>
</span><span class='line'>    <span class="o">.</span><span class="na">sum</span><span class="o">()</span>                      <span class="c1">// reduce</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">factor</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">println</span> <span class="n">nums</span><span class="o">.</span><span class="na">collect</span> <span class="o">{</span> <span class="n">it</span><span class="o">*</span><span class="n">factor</span> <span class="o">}</span>
</span><span class='line'><span class="c1">// Spread dot operator</span>
</span><span class='line'><span class="n">println</span> <span class="n">nums</span> <span class="o">*.</span> <span class="n">multiply</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'><span class="c1">// Demo</span>
</span><span class='line'><span class="n">String</span> <span class="n">HOMEPAGE</span> <span class="o">=</span> <span class="s1">&#39;http://oreilly.com&#39;</span>
</span><span class='line'><span class="n">println</span> <span class="n">HOMEPAGE</span><span class="o">.</span><span class="na">toURL</span><span class="o">().</span><span class="na">text</span><span class="o">.</span><span class="na">readLines</span><span class="o">()</span> <span class="o">*.</span> <span class="n">size</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Geocoding demo: XML query and parsing</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">String</span> <span class="n">XML_BASE</span> <span class="o">=</span> <span class="s1">&#39;https://maps.googleapis.com/maps/api/geocode/xml?&#39;</span>
</span><span class='line'><span class="n">List</span> <span class="n">address</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;2700 Coast Ave&#39;</span><span class="o">,</span> <span class="s1">&#39;Mountain View&#39;</span><span class="o">,</span> <span class="s1">&#39;CA&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span> <span class="n">encoded</span> <span class="o">=</span> <span class="n">address</span><span class="o">.</span><span class="na">collect</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">URLEncoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">it</span><span class="o">,</span> <span class="s1">&#39;UTF-8&#39;</span><span class="o">)</span>
</span><span class='line'><span class="o">}.</span><span class="na">join</span><span class="o">(</span><span class="s1">&#39;,&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span> <span class="n">queryString</span> <span class="o">=</span> <span class="s2">&quot;address=$encoded&quot;</span>
</span><span class='line'><span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;$XML_BASE$queryString&quot;</span>
</span><span class='line'><span class="c1">// println url.toURL().text</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlSlurper</span><span class="o">().</span><span class="na">parse</span><span class="o">(</span><span class="n">url</span><span class="o">)</span>
</span><span class='line'><span class="kt">def</span> <span class="n">loc</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="na">result</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">geometry</span><span class="o">.</span><span class="na">location</span> <span class="c1">// Navigate DOM using dot</span>
</span><span class='line'><span class="n">println</span> <span class="s2">&quot;Coordinates: ${loc.lat}, ${loc.lng}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ICNDB demo: JSON query and parsing</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">String</span> <span class="n">JSON_BASE</span> <span class="o">=</span> <span class="s1">&#39;http://api.icndb.com/jokes/random?&#39;</span>
</span><span class='line'><span class="c1">// Only the POTUS can claim such hyperbole.</span>
</span><span class='line'><span class="kt">def</span> <span class="n">params</span> <span class="o">=</span> <span class="o">[</span><span class="nl">limitTo:</span><span class="s1">&#39;[nerdy]&#39;</span><span class="o">,</span> <span class="nl">firstName:</span> <span class="s1">&#39;Donald&#39;</span><span class="o">,</span> <span class="nl">lastName:</span> <span class="s1">&#39;Trump&#39;</span><span class="o">]</span>
</span><span class='line'><span class="kt">def</span> <span class="n">qs</span> <span class="o">=</span> <span class="n">params</span><span class="o">.</span><span class="na">collect</span> <span class="o">{</span><span class="n">k</span><span class="o">,</span><span class="n">v</span> <span class="o">-&gt;</span> <span class="s2">&quot;$k=$v&quot;</span><span class="o">}.</span><span class="na">join</span><span class="o">(</span><span class="s1">&#39;&amp;&#39;</span><span class="o">)</span>
</span><span class='line'><span class="n">String</span> <span class="n">jsonTxt</span> <span class="o">=</span> <span class="s2">&quot;$JSON_BASE$qs&quot;</span><span class="o">.</span><span class="na">toURL</span><span class="o">().</span><span class="na">text</span>
</span><span class='line'><span class="c1">// println jsonTxt</span>
</span><span class='line'><span class="kt">def</span> <span class="n">json</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JsonSlurper</span><span class="o">().</span><span class="na">parseText</span><span class="o">(</span><span class="n">jsonTxt</span><span class="o">)</span>
</span><span class='line'><span class="n">println</span> <span class="n">json</span><span class="o">.</span><span class="na">value</span><span class="o">.</span><span class="na">joke</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Operators</h3>

<figure class='code'><figcaption><span>Misc operators in Groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="c1">// Safe navigation ?.</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Department</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Manager</span> <span class="n">boss</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Manager</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">name</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">Department</span> <span class="n">d1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Department</span><span class="o">(</span><span class="nl">boss:</span> <span class="k">new</span> <span class="n">Manager</span><span class="o">(</span><span class="nl">name:</span> <span class="s1">&#39;ABC&#39;</span><span class="o">))</span>
</span><span class='line'><span class="n">Department</span> <span class="n">d2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Department</span><span class="o">()</span>
</span><span class='line'><span class="n">println</span> <span class="n">d1</span> <span class="o">?.</span> <span class="n">boss</span> <span class="o">?.</span> <span class="n">name</span>
</span><span class='line'><span class="c1">// Standard d2.boss.name will throw NPE.</span>
</span><span class='line'><span class="n">println</span> <span class="n">d2</span> <span class="o">?.</span> <span class="n">boss</span> <span class="o">?.</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Spaceship operator: Comparable interface</span>
</span><span class='line'><span class="n">println</span> <span class="mi">1</span> <span class="o">&lt;=&gt;</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// See Groovy truth</span>
</span><span class='line'><span class="c1">// Elvis operator</span>
</span><span class='line'><span class="n">String</span> <span class="n">input</span>
</span><span class='line'><span class="n">String</span> <span class="n">greet</span> <span class="o">=</span> <span class="s1">&#39;Hello &#39;</span> <span class="o">+</span> <span class="o">(</span><span class="n">input</span> <span class="o">?:</span> <span class="s1">&#39;World&#39;</span><span class="o">)</span>
</span><span class='line'><span class="n">println</span> <span class="n">greet</span>
</span></code></pre></td></tr></table></div></figure>


<p>Groovy truth:</p>

<ul>
<li>non-zero numbers</li>
<li>non-null references</li>
<li>non-empty strings</li>
<li>non-empty collections</li>
<li>regex with a match</li>
<li>boolean true</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy Fundamentals: Part 3: POGOs & Collections]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-3/"/>
    <updated>2017-12-08T17:17:05-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-3</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy Fundamentals: Part 2: Numbers & Strings]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-2/"/>
    <updated>2017-12-08T17:16:49-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-2</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy Fundamentals: Part 1: Basics]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-1/"/>
    <updated>2017-12-08T17:16:47-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/12/08/groovy-fundamentals-part-1</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 9]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/12/06/java-9/"/>
    <updated>2017-12-06T12:11:16-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/12/06/java-9</id>
    <content type="html"><![CDATA[<p>JDK 9 was released in September and includes many changes to the Java platform.
The biggest is the Java Platform Module System (often referred to as Project Jigsaw).</p>

<!--more-->


<p>This new JPMS breaks up the existing rt.jar file into 97 modules (28 of them are SE) but also encapsulates internal APIs, such as sun.misc.Unsafe that have previously been available to developers.
This note summarizes some intersting points from a guest speaker about the new JDK 9 and other intersting changes in Java Community.</p>

<h3>JDK 9 Features</h3>

<p>Java Platform Module System</p>

<ul>
<li>Initially, leave everything on the classpath.</li>
<li>Anything on the classpath is in the unamed module

<ul>
<li>All packages are exported</li>
<li>The unamed module depends on all modules</li>
</ul>
</li>
<li>Migrate to modules as required</li>
</ul>


<p><code>--illegal-access</code> option is the Kill Switch to turn off encapsulation:</p>

<ul>
<li>permit: Warning for first use of an encapsulated API</li>
<li>warn: Warning for every use</li>
<li>debug: Warning and stack trace for every use</li>
<li>deny: No access.</li>
</ul>


<p><code>--add-exports</code> option allows direct access to encapsulated APIs.
<code>--add-opens</code> option allows reflective access to encapulated APIs.</p>

<p><code>jlink</code>: The Java Linker (JEP 282).
The implication of <code>jlink</code> is that the slogan &ldquo;Write once, run anywhere&rdquo; might not be true anymore.
<code>jlink</code> generated runtime may not include all Java SE modules.
It is still a conformant Java implementation.</p>

<h3>Java Development Changes</h3>

<p>OpenJDK have a new release model: more agile, every six months.
Features are included when ready instead of targeted for specific release when started.</p>

<p>JDK Version Numbering: new scheme introduced (JEP 223).</p>

<ul>
<li>JDK MAJOR.MINOR.SECURITY</li>
<li>Semantic versioning</li>
</ul>


<p>However, there is a new scheme proposed in JEP 322: FEATURE.INTERIM.UPDATE.PATCH.</p>

<p>Availability of JDK updates: Oracle is switching to LTS model.</p>

<ul>
<li>JDK 8 is a LTS release.

<ul>
<li>It will have updates for more than 3 years.</li>
</ul>
</li>
<li>JDK 9 is a feature release.

<ul>
<li>Public updates are only available until next feature release.</li>
</ul>
</li>
</ul>


<h3>Deprecated features in JDK 9</h3>

<ul>
<li>Applets as a deployment mechanism</li>
<li>CMS garbage collector</li>
<li>Java policy tool, jconsole, Doclet API</li>
<li>No more 32-bit Oracle JDK binaries. No more ARM binaries.

<ul>
<li>Only Mac, Windows, Linux, SPARC supported. All 64-bit.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XML Processing in Groovy]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/06/14/xml-processing-in-groovy/"/>
    <updated>2017-06-14T09:57:51-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/06/14/xml-processing-in-groovy</id>
    <content type="html"><![CDATA[<p>This post discusses XML processing in Groovy.</p>

<!--more-->


<h3>Parsing: XmlParser vs XmlSlurper</h3>

<p>Both are in <code>groovy.util</code> packages and both have the same approach to parse an xml: both are based on <code>SAX</code> (low memory footprint) and both can update/transform the XML.</p>

<p>Based on this <a href="https://stackoverflow.com/questions/7558019/groovy-xmlslurper-vs-xmlparser">StackOverflow answer</a>, when to use <code>XmlParser</code> versus <code>XmlSlurper</code> is as follows:</p>

<ul>
<li><code>XmlSlurper</code>: when you want to transform an existing XML document to another.</li>
<li><code>XmlSlurper</code>: when you just want to read a few nodes since <code>XmlSlurper</code> evaluates the structure lazily.</li>
<li><code>XmlParser</code>: when you want to update and read at the same time.</li>
</ul>


<h4>Example usage:</h4>

<figure class='code'><figcaption><span>XmlSlurper</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;</span>
</span><span class='line'><span class="s1">    &lt;list&gt;</span>
</span><span class='line'><span class="s1">        &lt;technology&gt;</span>
</span><span class='line'><span class="s1">            &lt;name&gt;Groovy&lt;/name&gt;</span>
</span><span class='line'><span class="s1">        &lt;/technology&gt;</span>
</span><span class='line'><span class="s1">    &lt;/list&gt;</span>
</span><span class='line'><span class="s1">&#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlSlurper</span><span class="o">().</span><span class="na">parseText</span><span class="o">(</span><span class="n">text</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">list</span> <span class="k">instanceof</span> <span class="n">groovy</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">slurpersupport</span><span class="o">.</span><span class="na">GPathResult</span>
</span><span class='line'><span class="k">assert</span> <span class="n">list</span><span class="o">.</span><span class="na">technology</span><span class="o">.</span><span class="na">name</span> <span class="o">==</span> <span class="s1">&#39;Groovy&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>XmlParser</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlParser</span><span class="o">().</span><span class="na">parseText</span><span class="o">(</span><span class="n">text</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">list</span> <span class="k">instanceof</span> <span class="n">groovy</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Node</span>
</span><span class='line'><span class="k">assert</span> <span class="n">list</span><span class="o">.</span><span class="na">technology</span><span class="o">.</span><span class="na">name</span><span class="o">.</span><span class="na">text</span><span class="o">()</span> <span class="o">==</span> <span class="s1">&#39;Groovy&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another option is DOMCategory:</p>

<figure class='code'><figcaption><span>DOMCateogry</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringReader</span><span class="o">(</span><span class="n">CAR_RECORDS</span><span class="o">)</span>
</span><span class='line'><span class="kt">def</span> <span class="n">doc</span> <span class="o">=</span> <span class="n">DOMBuilder</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">reader</span><span class="o">)</span>
</span><span class='line'><span class="kt">def</span> <span class="n">records</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="na">documentElement</span>
</span><span class='line'>
</span><span class='line'><span class="n">use</span><span class="o">(</span><span class="n">DOMCategory</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">assert</span> <span class="n">records</span><span class="o">.</span><span class="na">car</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Navigation with GPath</h3>

<p>From <a href="http://groovy-lang.org/processing-xml.html">here</a>:</p>

<figure class='code'><figcaption><span>GPath example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">books</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;</span>
</span><span class='line'><span class="s1">    &lt;response version-api=&quot;2.0&quot;&gt;</span>
</span><span class='line'><span class="s1">        &lt;value&gt;</span>
</span><span class='line'><span class="s1">            &lt;books&gt;</span>
</span><span class='line'><span class="s1">                &lt;book available=&quot;20&quot; id=&quot;1&quot;&gt;</span>
</span><span class='line'><span class="s1">                    &lt;title&gt;Don Xijote&lt;/title&gt;</span>
</span><span class='line'><span class="s1">                    &lt;author id=&quot;1&quot;&gt;Manuel De Cervantes&lt;/author&gt;</span>
</span><span class='line'><span class="s1">                &lt;/book&gt;</span>
</span><span class='line'><span class="s1">                &lt;book available=&quot;14&quot; id=&quot;2&quot;&gt;</span>
</span><span class='line'><span class="s1">                    &lt;title&gt;Catcher in the Rye&lt;/title&gt;</span>
</span><span class='line'><span class="s1">                   &lt;author id=&quot;2&quot;&gt;JD Salinger&lt;/author&gt;</span>
</span><span class='line'><span class="s1">               &lt;/book&gt;</span>
</span><span class='line'><span class="s1">               &lt;book available=&quot;13&quot; id=&quot;3&quot;&gt;</span>
</span><span class='line'><span class="s1">                   &lt;title&gt;Alice in Wonderland&lt;/title&gt;</span>
</span><span class='line'><span class="s1">                   &lt;author id=&quot;3&quot;&gt;Lewis Carroll&lt;/author&gt;</span>
</span><span class='line'><span class="s1">               &lt;/book&gt;</span>
</span><span class='line'><span class="s1">               &lt;book available=&quot;5&quot; id=&quot;4&quot;&gt;</span>
</span><span class='line'><span class="s1">                   &lt;title&gt;Don Xijote&lt;/title&gt;</span>
</span><span class='line'><span class="s1">                   &lt;author id=&quot;4&quot;&gt;Manuel De Cervantes&lt;/author&gt;</span>
</span><span class='line'><span class="s1">               &lt;/book&gt;</span>
</span><span class='line'><span class="s1">           &lt;/books&gt;</span>
</span><span class='line'><span class="s1">       &lt;/value&gt;</span>
</span><span class='line'><span class="s1">    &lt;/response&gt;</span>
</span><span class='line'><span class="s1">&#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlSlurper</span><span class="o">().</span><span class="na">parseText</span><span class="o">(</span><span class="n">books</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">book</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">value</span><span class="o">.</span><span class="na">books</span><span class="o">.</span><span class="na">book</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="kt">def</span> <span class="n">bookAuthorId1</span> <span class="o">=</span> <span class="n">book</span><span class="o">.</span><span class="nd">@id</span>
</span><span class='line'><span class="kt">def</span> <span class="n">bookAuthorId2</span> <span class="o">=</span> <span class="n">book</span><span class="o">[</span><span class="s1">&#39;@id&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">bookAuthorId1</span> <span class="o">==</span> <span class="s1">&#39;1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// .&#39;*&#39; could be replaced by .children()</span>
</span><span class='line'><span class="kt">def</span> <span class="n">catcherInTheRye</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">value</span><span class="o">.</span><span class="na">books</span><span class="o">.</span><span class="s1">&#39;*&#39;</span><span class="o">.</span><span class="na">find</span> <span class="o">{</span> <span class="n">node</span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="c1">// node.@id == 2 could be expressed as node[&#39;@id&#39;] == 2</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="na">name</span><span class="o">()</span> <span class="o">==</span> <span class="s1">&#39;book&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">node</span><span class="o">.</span><span class="nd">@id</span> <span class="o">==</span> <span class="s1">&#39;2&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">catcherInTheRye</span><span class="o">.</span><span class="na">title</span><span class="o">.</span><span class="na">text</span><span class="o">()</span> <span class="o">==</span> <span class="s1">&#39;Catcher in the Rye&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// .&#39;**&#39; could be replaced by .depthFirst()</span>
</span><span class='line'><span class="kt">def</span> <span class="n">bookId</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="s1">&#39;**&#39;</span><span class="o">.</span><span class="na">find</span> <span class="o">{</span> <span class="n">book</span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">book</span><span class="o">.</span><span class="na">author</span><span class="o">.</span><span class="na">text</span><span class="o">()</span> <span class="o">==</span> <span class="s1">&#39;Lewis Carroll&#39;</span>
</span><span class='line'><span class="o">}.</span><span class="nd">@id</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">bookId</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// find(Closure cl) finds just the first occurrence. To find all titles:</span>
</span><span class='line'><span class="kt">def</span> <span class="n">titles</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="s1">&#39;**&#39;</span><span class="o">.</span><span class="na">findAll</span><span class="o">{</span> <span class="n">node</span><span class="o">-&gt;</span> <span class="n">node</span><span class="o">.</span><span class="na">name</span><span class="o">()</span> <span class="o">==</span> <span class="s1">&#39;title&#39;</span> <span class="o">}*.</span><span class="na">text</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">titles</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see there are two types of notations to get attributes, the</p>

<ul>
<li>direct notation with <code>@nameoftheattribute</code></li>
<li>map notation using <code>['@nameoftheattribute']</code></li>
</ul>


<h3>Writing XML</h3>

<figure class='code'><figcaption><span>Standard usage of MarkupBuilder</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="o">()</span>
</span><span class='line'><span class="kt">def</span> <span class="n">xml</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MarkupBuilder</span><span class="o">(</span><span class="n">writer</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">xml</span><span class="o">.</span><span class="na">records</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">car</span><span class="o">(</span><span class="nl">name:</span><span class="s1">&#39;HSV Maloo&#39;</span><span class="o">,</span> <span class="nl">make:</span><span class="s1">&#39;Holden&#39;</span><span class="o">,</span> <span class="nl">year:</span><span class="mi">2006</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">country</span><span class="o">(</span><span class="s1">&#39;Australia&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">record</span><span class="o">(</span><span class="nl">type:</span><span class="s1">&#39;speed&#39;</span><span class="o">,</span> <span class="s1">&#39;Production Pickup Truck with speed of 271kph&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">car</span><span class="o">(</span><span class="nl">name:</span><span class="s1">&#39;Royale&#39;</span><span class="o">,</span> <span class="nl">make:</span><span class="s1">&#39;Bugatti&#39;</span><span class="o">,</span> <span class="nl">year:</span><span class="mi">1931</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">country</span><span class="o">(</span><span class="s1">&#39;France&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">record</span><span class="o">(</span><span class="nl">type:</span><span class="s1">&#39;price&#39;</span><span class="o">,</span> <span class="s1">&#39;Most Valuable Car at $15 million&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">records</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlSlurper</span><span class="o">().</span><span class="na">parseText</span><span class="o">(</span><span class="n">writer</span><span class="o">.</span><span class="na">toString</span><span class="o">())</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">records</span><span class="o">.</span><span class="na">car</span><span class="o">.</span><span class="na">first</span><span class="o">().</span><span class="na">name</span><span class="o">.</span><span class="na">text</span><span class="o">()</span> <span class="o">==</span> <span class="s1">&#39;HSV Maloo&#39;</span>
</span><span class='line'><span class="k">assert</span> <span class="n">records</span><span class="o">.</span><span class="na">car</span><span class="o">.</span><span class="na">last</span><span class="o">().</span><span class="na">name</span><span class="o">.</span><span class="na">text</span><span class="o">()</span> <span class="o">==</span> <span class="s1">&#39;Royale&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>See documentation for the following use cases:</p>

<ul>
<li>Namespace aware</li>
<li>Generate elements inside XML document.</li>
</ul>


<p>Using <code>StreamingMarkupBuilder</code> is very similar to using <code>MarkupBuilder</code>.
The <code>bind</code> method returns a <code>Writable</code> instance that can be used to stream the markup.</p>

<figure class='code'><figcaption><span>Standard usage of StreamingMarkupBuilder</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">xml</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StreamingMarkupBuilder</span><span class="o">().</span><span class="na">bind</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">records</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">car</span><span class="o">(</span><span class="nl">name:</span><span class="s1">&#39;HSV Maloo&#39;</span><span class="o">,</span> <span class="nl">make:</span><span class="s1">&#39;Holden&#39;</span><span class="o">,</span> <span class="nl">year:</span><span class="mi">2006</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">country</span><span class="o">(</span><span class="s1">&#39;Australia&#39;</span><span class="o">)</span>
</span><span class='line'>            <span class="n">record</span><span class="o">(</span><span class="nl">type:</span><span class="s1">&#39;speed&#39;</span><span class="o">,</span> <span class="s1">&#39;Production Pickup Truck with speed of 271kph&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">car</span><span class="o">(</span><span class="nl">name:</span><span class="s1">&#39;P50&#39;</span><span class="o">,</span> <span class="nl">make:</span><span class="s1">&#39;Peel&#39;</span><span class="o">,</span> <span class="nl">year:</span><span class="mi">1962</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">country</span><span class="o">(</span><span class="s1">&#39;Isle of Man&#39;</span><span class="o">)</span>
</span><span class='line'>            <span class="n">record</span><span class="o">(</span><span class="nl">type:</span><span class="s1">&#39;size&#39;</span><span class="o">,</span> <span class="s1">&#39;Smallest Street-Legal Car at 99cm wide and 59 kg in weight&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">car</span><span class="o">(</span><span class="nl">name:</span><span class="s1">&#39;Royale&#39;</span><span class="o">,</span> <span class="nl">make:</span><span class="s1">&#39;Bugatti&#39;</span><span class="o">,</span> <span class="nl">year:</span><span class="mi">1931</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">country</span><span class="o">(</span><span class="s1">&#39;France&#39;</span><span class="o">)</span>
</span><span class='line'>            <span class="n">record</span><span class="o">(</span><span class="nl">type:</span><span class="s1">&#39;price&#39;</span><span class="o">,</span> <span class="s1">&#39;Most Valuable Car at $15 million&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="n">records</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlSlurper</span><span class="o">().</span><span class="na">parseText</span><span class="o">(</span><span class="n">xml</span><span class="o">.</span><span class="na">toString</span><span class="o">())</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">records</span><span class="o">.</span><span class="na">car</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'><span class="k">assert</span> <span class="n">records</span><span class="o">.</span><span class="na">car</span><span class="o">.</span><span class="na">find</span> <span class="o">{</span> <span class="n">it</span><span class="o">.</span><span class="nd">@name</span> <span class="o">==</span> <span class="s1">&#39;P50&#39;</span> <span class="o">}.</span><span class="na">country</span><span class="o">.</span><span class="na">text</span><span class="o">()</span> <span class="o">==</span> <span class="s1">&#39;Isle of Man&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>MarkupBuilderHelper</h4>

<p>This helper normally can be accessed from within an instance of class MarkupBuilder or an instance of StreamingMarkupBuilder as <code>mkp</code> property.</p>

<figure class='code'><figcaption><span>Using mkp for comments and escape in XML</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">xmlWriter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="o">()</span>
</span><span class='line'><span class="kt">def</span> <span class="n">xmlMarkup</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MarkupBuilder</span><span class="o">(</span><span class="n">xmlWriter</span><span class="o">).</span><span class="na">rules</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mkp</span><span class="o">.</span><span class="na">comment</span><span class="o">(</span><span class="s1">&#39;THIS IS THE MAIN RULE&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">rule</span><span class="o">(</span><span class="nl">sentence:</span> <span class="n">mkp</span><span class="o">.</span><span class="na">yield</span><span class="o">(</span><span class="s1">&#39;3 &gt; n&#39;</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span> <span class="n">xmlWriter</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="s1">&#39;3 &amp;gt; n&#39;</span><span class="o">)</span>
</span><span class='line'><span class="k">assert</span> <span class="n">xmlWriter</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="s1">&#39;&lt;!-- THIS IS THE MAIN RULE --&gt;&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Code recipes</h3>

<p>The input XML file is based on typical Maven &ldquo;settings.xml&rdquo; file.</p>

<p><strong>Recipe 1</strong>: Read, transform, and write to file. Based on <a href="https://stackoverflow.com/questions/2245641/load-modify-and-write-an-xml-document-in-groovy">this</a>.</p>

<figure class='code'><figcaption><span>XML transform to file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">groovy.xml.StreamingMarkupBuilder</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">groovy.xml.XmlUtil</span>
</span><span class='line'>
</span><span class='line'><span class="kt">def</span> <span class="nf">transformXml</span><span class="o">(</span><span class="n">String</span> <span class="n">filePath</span><span class="o">,</span> <span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">TMP_PATH</span> <span class="o">=</span> <span class="s1">&#39;/tmp/temp.xml&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="n">inFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span> <span class="n">filePath</span> <span class="o">)</span>
</span><span class='line'>  <span class="kt">def</span> <span class="n">outFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span> <span class="n">TMP_PATH</span> <span class="o">)</span>
</span><span class='line'>  <span class="kt">def</span> <span class="n">xml</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlSlurper</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">).</span><span class="na">parse</span><span class="o">(</span><span class="n">inFile</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">xml</span><span class="o">.</span><span class="na">servers</span><span class="o">.</span><span class="na">server</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">node</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="n">outBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StreamingMarkupBuilder</span><span class="o">()</span>
</span><span class='line'>  <span class="kt">def</span> <span class="n">outWriter</span> <span class="o">=</span> <span class="n">outFile</span><span class="o">.</span><span class="na">newWriter</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Option 1: Write XML to one line</span>
</span><span class='line'>  <span class="n">outWriter</span> <span class="o">&lt;&lt;</span> <span class="n">outBuilder</span><span class="o">.</span><span class="na">bind</span><span class="o">{</span> <span class="n">mkp</span><span class="o">.</span><span class="na">yield</span> <span class="n">xml</span> <span class="o">}</span>
</span><span class='line'>  <span class="c1">// Option 2: Pretty print XML</span>
</span><span class='line'>  <span class="n">XmlUtil</span><span class="o">.</span><span class="na">serialize</span><span class="o">(</span> <span class="n">xml</span><span class="o">,</span> <span class="n">outWriter</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">TMP_PATH</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For overwriting the original file (based on <a href="https://stackoverflow.com/questions/18385062/writing-updated-xml-to-originally-parsed-file">this</a>):</p>

<figure class='code'><figcaption><span>Write the transformed XML to original file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">inFile</span><span class="o">.</span><span class="na">withWriter</span> <span class="o">{</span> <span class="n">outWriter</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">XmlUtil</span><span class="o">.</span><span class="na">serialize</span><span class="o">(</span> <span class="k">new</span> <span class="n">StreamingMarkupBuilder</span><span class="o">().</span><span class="na">bind</span><span class="o">{</span> <span class="n">mkp</span><span class="o">.</span><span class="na">yield</span> <span class="n">xml</span> <span class="o">},</span> <span class="n">outWriter</span> <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Recipe 2</strong>: Read, transform, and write to string.</p>

<figure class='code'><figcaption><span>XML transform to String</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">groovy.xml.XmlUtil</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@NonCPS</span>
</span><span class='line'><span class="kt">def</span> <span class="nf">transformXml</span><span class="o">(</span><span class="n">String</span> <span class="n">xmlContent</span><span class="o">,</span> <span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">def</span> <span class="n">xml</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlSlurper</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">).</span><span class="na">parseText</span><span class="o">(</span><span class="n">xmlContent</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">echo</span> <span class="s1">&#39;Start tranforming XML&#39;</span>
</span><span class='line'>  <span class="n">xml</span><span class="o">.</span><span class="na">servers</span><span class="o">.</span><span class="na">server</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">node</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="n">outWriter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="o">()</span>
</span><span class='line'>  <span class="n">XmlUtil</span><span class="o">.</span><span class="na">serialize</span><span class="o">(</span> <span class="n">xml</span><span class="o">,</span> <span class="n">outWriter</span> <span class="o">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">outWriter</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Tips</h3>

<ul>
<li><code>XmlSlurper(false, false)</code> is used due to <a href="https://stackoverflow.com/questions/9197588/tag0-namespace-added-for-elements-in-default-namespace">this</a></li>
</ul>


<h3>References</h3>

<ul>
<li><a href="http://groovy-lang.org/processing-xml.html">Processing XML</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle Cookbook]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/05/11/gradle-cookbook/"/>
    <updated>2017-05-11T10:20:39-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/05/11/gradle-cookbook</id>
    <content type="html"><![CDATA[<p>This post goes over simple (but beyond the very basic) recipes for getting started with Gradle.</p>

<!--more-->


<h3>Basic tasks</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./gradlew dependencies
</span><span class='line'>
</span><span class='line'># Subproject
</span><span class='line'>./gradlew :subprojectName:dependencies
</span><span class='line'>
</span><span class='line'># Configuration
</span><span class='line'>./gradlew dependencies --configuration testCompile</span></code></pre></td></tr></table></div></figure>


<p>In the second command based on <a href="http://stackoverflow.com/questions/27763472/how-to-check-dependency-list-at-runtime-gradle">this example</a>, the root project might not have dependencies and you want to list dependencies on one of the subprojects.</p>

<p>In the third command based on <a href="https://discuss.gradle.org/t/how-to-find-which-dependency-is-fetching-a-certain-jar/7319/10">this example</a>, you want to see which task will fetch a certain JAR (e.g., velocity).</p>

<h3>Sample <code>build.gradle</code> file</h3>

<p>Most of the tutorials show a very simplistic <code>build.gradle</code> file to illustrate the basics.
However, starting from those simple build files will often lead to frequent major changes, coming from frequent Google and StackOverflow searches for how to do something (e.g., Nexus authentication).
This section shows how a <code>build.gradle</code> file looks like for a medium-size team working in industry.</p>

<figure class='code'><figcaption><span>Sample build file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">buildscript</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">credentials</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">username</span> <span class="n">nexusUsername</span>
</span><span class='line'>                <span class="n">password</span> <span class="n">nexusPassword</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">url</span> <span class="o">{</span> <span class="n">nexusPublic</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="s1">&#39;com.h2database:h2:1.3.170&#39;</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="s1">&#39;org.postgresql:postgresql:9.4-1201-jdbc41&#39;</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="s1">&#39;com.example.plugins:some-gradle-plugin:1.1.6&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;com.example.plugins&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">subprojects</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">credentials</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">username</span> <span class="n">nexusUsername</span>
</span><span class='line'>                <span class="n">password</span> <span class="n">nexusPassword</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">url</span> <span class="o">{</span> <span class="n">nexusPublic</span> <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;groovy&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">group</span> <span class="o">=</span> <span class="s1">&#39;com.example.app&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Core</span>
</span><span class='line'>        <span class="n">compile</span> <span class="o">(</span><span class="s1">&#39;org.apache.kafka:kafka_2.11:0.8.2.0&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">exclude</span> <span class="nl">module:</span> <span class="s1">&#39;jms&#39;</span>
</span><span class='line'>            <span class="n">exclude</span> <span class="nl">module:</span> <span class="s1">&#39;jmxtools&#39;</span>
</span><span class='line'>            <span class="n">exclude</span> <span class="nl">module:</span> <span class="s1">&#39;jmxri&#39;</span>
</span><span class='line'>            <span class="n">exclude</span> <span class="nl">group:</span> <span class="s1">&#39;org.slf4j&#39;</span>
</span><span class='line'>            <span class="n">exclude</span> <span class="nl">module:</span> <span class="s1">&#39;junit&#39;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">compile</span> <span class="s1">&#39;com.amazonaws:aws-java-sdk:1.9.24&#39;</span>
</span><span class='line'>        <span class="n">compile</span> <span class="s1">&#39;io.swagger:swagger-core:1.5.10&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * junit is excluded in multiple places, because org.apache.cassandra.cassandra-all:2.1.9</span>
</span><span class='line'><span class="cm">         * includes JUnit 4.8.1 as a compile dependency, and our test framework needing 4.12</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="c1">// Support</span>
</span><span class='line'>        <span class="n">compile</span> <span class="o">(</span><span class="s2">&quot;org.apache.cassandra.cassandra-all:2.1.9&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">exclude</span> <span class="nl">module:</span> <span class="s1">&#39;junit&#39;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">compile</span> <span class="o">(</span><span class="s2">&quot;com.example.app:common:${commons_version}&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">exclude</span> <span class="nl">module:</span> <span class="s1">&#39;junit&#39;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">compile</span> <span class="s2">&quot;org.flywaydb:flyway-core:3.2.1&quot;</span>
</span><span class='line'>        <span class="n">testCompile</span> <span class="s1">&#39;org.hsqldb:hsqldb:2.3.2&#39;</span>
</span><span class='line'>        <span class="n">compile</span> <span class="s1">&#39;com.google.code.findbugs:findbugs:3.0.1&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// CassandraSetupTest-based tests fail for newer versions of Guava.</span>
</span><span class='line'>    <span class="n">configurations</span><span class="o">.</span><span class="na">all</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">resolutionStrategy</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">force</span> <span class="s1">&#39;com.google.guava:guava:18.0&#39;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">jacocoCoverage</span><span class="o">.</span><span class="na">limits</span> <span class="o">=</span>  <span class="o">[</span>
</span><span class='line'>    <span class="s1">&#39;instruction&#39;</span><span class="o">:</span> <span class="mi">40</span><span class="o">,</span>
</span><span class='line'>    <span class="s1">&#39;line&#39;</span>       <span class="o">:</span> <span class="mi">48</span><span class="o">,</span>
</span><span class='line'>    <span class="s1">&#39;complexity&#39;</span> <span class="o">:</span> <span class="mi">30</span><span class="o">,</span>
</span><span class='line'>    <span class="s1">&#39;method&#39;</span>     <span class="o">:</span> <span class="mi">55</span><span class="o">,</span>
</span><span class='line'>    <span class="s1">&#39;class&#39;</span>      <span class="o">:</span> <span class="mi">70</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">project</span><span class="o">(</span><span class="s1">&#39;:server&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mainClassName</span> <span class="o">=</span> <span class="s1">&#39;com.example.app.ApiApplication&#39;</span>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">compile</span> <span class="s1">&#39;com.exacttarget:partner-api:1.0.3&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">testCompile</span> <span class="s1">&#39;com.squareup.okhttp3:mockwebserver:3.2.0&#39;</span>
</span><span class='line'>        <span class="n">testCompile</span> <span class="s1">&#39;org.apache.lucene:lucene-test-framework:5.3.1&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">test</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">exclude</span> <span class="s1">&#39;**/SomeClass.class&#39;</span>
</span><span class='line'>        <span class="n">exclude</span> <span class="s1">&#39;**/*IntegrationTest.*&#39;</span>
</span><span class='line'>      <span class="n">exclude</span> <span class="s1">&#39;**/schema/model/*MoreWildcard.class&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// generateSwagger is not a Test but depends on the testing framework</span>
</span><span class='line'>    <span class="n">task</span> <span class="nf">generateSwagger</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Test</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="n">testClasses</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">include</span> <span class="s1">&#39;**/util/SwaggerFileGenerator.class&#39;</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">swaggerPath</span> <span class="o">=</span> <span class="s1">&#39;build/swagger-test.yaml&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Not considered &quot;UP-TO-DATE&quot; if the output file does not exist</span>
</span><span class='line'>        <span class="n">outputs</span><span class="o">.</span><span class="na">upToDateWhen</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">file</span><span class="o">(</span><span class="s1">&#39;server/&#39;</span> <span class="o">+</span> <span class="n">swaggerPath</span><span class="o">).</span><span class="na">exists</span><span class="o">()</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">systemProperty</span> <span class="s1">&#39;test.swagger.outfile&#39;</span><span class="o">,</span> <span class="n">file</span><span class="o">(</span><span class="n">swaggerPath</span><span class="o">)</span>
</span><span class='line'>        <span class="n">doLast</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">println</span> <span class="s2">&quot;\n\nSwagger documentation can be found in api/server/${swaggerPath}\n\n&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">checkstyle</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">checkstyleMain</span><span class="o">.</span><span class="na">exclude</span> <span class="s1">&#39;**/db/migration/*.java&#39;</span> <span class="c1">// Exclude flywaydb migrations: they violate type name checks</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">jacocoCoverage</span><span class="o">.</span><span class="na">limits</span> <span class="o">=</span>  <span class="o">[</span>
</span><span class='line'>        <span class="s1">&#39;instruction&#39;</span><span class="o">:</span> <span class="mi">40</span><span class="o">,</span>
</span><span class='line'>        <span class="s1">&#39;line&#39;</span>       <span class="o">:</span> <span class="mi">48</span><span class="o">,</span>
</span><span class='line'>        <span class="s1">&#39;complexity&#39;</span> <span class="o">:</span> <span class="mi">30</span><span class="o">,</span>
</span><span class='line'>        <span class="s1">&#39;method&#39;</span>     <span class="o">:</span> <span class="mi">55</span><span class="o">,</span>
</span><span class='line'>        <span class="s1">&#39;class&#39;</span>      <span class="o">:</span> <span class="mi">70</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Maven/Nexus authentication</h4>

<p>In Gradle, Nexus authentication can be specified in both <code>build.gradle</code> and <code>gradle.properties</code> file, where <code>build.gradle</code> should be checked into VCS (e.g., git) while <code>gradle.properties</code> contains sensitive credentials information.</p>

<figure class='code'><figcaption><span>Example build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">credentials</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">username</span> <span class="n">nexusUsername</span>
</span><span class='line'>            <span class="n">password</span> <span class="n">nexusPassword</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">url</span> <span class="o">{</span> <span class="n">nexusPublic</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Example gradle.properties</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">nexusUsername</span><span class="o">=</span><span class="s">myUsername</span>
</span><span class='line'><span class="na">nexusPassword</span><span class="o">=</span><span class="s">password123</span>
</span><span class='line'><span class="na">nexusPublic</span><span class="o">=</span><span class="s">https://nexus.example.com/nexus/content/groups/public/</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Jenkins, to securely passing Nexus credentials, <code>properties</code> file is not recommended.
Instead, use <code>withCredentials</code> for passing credentials as shown in <a href="http://tdongsi.github.io/blog/2017/05/20/gradle-settings-in-jenkinsfile/">this blog post</a>.</p>

<h4><code>buildscript</code> block</h4>

<p>From <a href="https://discuss.gradle.org/t/what-is-difference-between-buildscript-classpath-and-dependencies-compile/4290/2">here</a>,
the <code>buildscript</code> block only controls dependencies for the buildscript process itself, not for the application code, which the top-level <code>dependencies</code> block controls.
For instance, you could define dependencies in &ldquo;buildscript/classpath&rdquo; that represent Gradle plugins used in the build process.
Those plugins would not be referenced as dependencies for the application code.
Read the Gradle User Guide for more information (the PDF is easy to search).</p>

<h4>Proxy</h4>

<p>Use <code>http.proxyHost</code> and <code>https.proxyHost</code> accordingly for setting up proxy.</p>

<figure class='code'><figcaption><span>Example HTTP proxy in Jenkinsfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>        <span class="n">echo</span> <span class="s2">&quot;Running with proxy ${env.https_proxy} and ${env.http_proxy}&quot;</span>
</span><span class='line'>        <span class="n">PROXY_OPTIONS</span> <span class="o">=</span> <span class="s1">&#39;-Dhttps.proxyHost=public0-proxy1.data.example.net -Dhttps.proxyPort=8080&#39;</span>
</span><span class='line'>        <span class="n">sh</span> <span class="s2">&quot;./gradlew ${PROXY_OPTIONS} run --stacktrace --info&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Quick-start for Groovy Programming Test]]></title>
    <link href="http://tdongsi.github.io/java/blog/2017/05/10/tutorial-quick-start-for-groovy-programming-test/"/>
    <updated>2017-05-10T00:07:18-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2017/05/10/tutorial-quick-start-for-groovy-programming-test</id>
    <content type="html"><![CDATA[<p>Eclipse &amp; Maven.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Common Interview Questions]]></title>
    <link href="http://tdongsi.github.io/java/blog/2016/09/09/common-interview-questions/"/>
    <updated>2016-09-09T00:50:08-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2016/09/09/common-interview-questions</id>
    <content type="html"><![CDATA[<p>Common interview questions that are specific to Java language.</p>

<!--more-->


<h3>Trivia Questions</h3>

<p>The full list is <a href="http://javarevisited.blogspot.sg/2015/10/133-java-interview-questions-answers-from-last-5-years.html">here</a>.</p>

<ol>
<li>Why constructors dont return any value. What problem did Java face in returning a value from Constructors?

<ul>
<li>So the reason the constructor doesn&rsquo;t return a value is because it&rsquo;s not called directly by your code, it&rsquo;s called by the memory allocation and object initialization code in the runtime.
Its return value (if it actually has one when compiled down to machine code) is opaque to the user - therefore, you can&rsquo;t specify it.</li>
</ul>
</li>
<li>Difference between abstract class and interface?

<ul>
<li>The question is lame. However, it comes up so often that you have to get ready for it.
Failing to give the expected answer can make you fail in the phone screen.</li>
<li>Answer <a href="http://javarevisited.blogspot.com/2013/05/difference-between-abstract-class-vs-interface-java-when-prefer-over-design-oops.html">here</a>.</li>
</ul>
</li>
<li>What is string immutable? What is intern() method on String?</li>
<li>What is the difference between StringBuilder vs. StringBuffer? Vector and ArrayList?</li>
<li>Generics: is there any way to get the generic type in your program? (Answer: no due to type erasure)</li>
<li>Design pattern: what do you know? Which one do you use most? In what situation?</li>
<li>What is the <code>finalize()</code> method?

<ul>
<li>Finalizers are unpredictable, often dangerous, and generally unnecessary.
Only use it when you need a safety-net, a reminder to call explicit termination method OR you work with native methods and objects.</li>
</ul>
</li>
</ol>


<p>Java:</p>

<ul>
<li>Methods of Object class (relation between hashCode() and equals(), give a simple algorithm to do hashCode(), when to use finalize()). See chapter in Effective Java (see wiki)

<ul>
<li>equals() compare the hash code that is generated by hashCode(), usually different for different instances. If the two different objects, such as String, have equals() as true, the equals() function must be overridden.</li>
<li>Simple hashCode: use the time of creation.</li>
</ul>
</li>
<li>Collections framework (when to use Map, List, Set; implementations of those). See wiki</li>
<li>Some details about frequently used classes: String class (e.g., what intern() method does), StringBuilder vs. StringBuffer</li>
<li>Java I/O: using Scanner, printf, InputStream</li>
<li>Java generics: erasure, Java generics vs. C++ template</li>
<li>It&rsquo;s very impressive if you know about Java concurrency: e.g., what is volatile? when to use it? synchronize?</li>
</ul>


<p>20) From this book, which methods are invoked? Classes are extended as Dessert &lt;- Cake &lt;- ChocolateCake, and Dessert &lt;- Scone &lt;- ButteredScone.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Overloaded method forms</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">more</span><span class="o">(</span> <span class="n">Dessert</span> <span class="n">d</span><span class="o">,</span> <span class="n">Scone</span> <span class="n">s</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">more</span><span class="o">(</span> <span class="n">Cake</span> <span class="n">c</span><span class="o">,</span> <span class="n">Dessert</span> <span class="n">d</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">more</span><span class="o">(</span> <span class="n">Chocolatecake</span> <span class="n">cc</span><span class="o">,</span> <span class="n">Scone</span> <span class="n">s</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">more</span><span class="o">(</span> <span class="n">Dessert</span><span class="o">...</span> <span class="n">desserts</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Method invocations</span>
</span><span class='line'><span class="n">more</span><span class="o">(</span> <span class="n">dessertRef</span><span class="o">,</span> <span class="n">sconeRef</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="n">more</span><span class="o">(</span> <span class="n">chocolateCakeRef</span><span class="o">,</span> <span class="n">dessertRef</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="n">more</span><span class="o">(</span> <span class="n">chocolateCakeRef</span><span class="o">,</span> <span class="n">butteredSconeRef</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="n">more</span><span class="o">(</span> <span class="n">cakeRef</span><span class="o">,</span> <span class="n">sconeRef</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="n">more</span><span class="o">(</span> <span class="n">sconeRef</span><span class="o">,</span> <span class="n">cakeRef</span> <span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Singleton question</h3>

<p>This question seems to be common because it shows that if a candidate knows &ldquo;design pattern&rdquo;, best practices, concurrency, and enum (one of newer Java features).</p>

<p>TODO: Enum</p>

<p>TODO: Standard singleton with lazy initlaization and private constructor.</p>

<p>TODO: Is it thread-safe?</p>

<p>TODO: How to make it thread-safe?</p>

<p>TODO: How to make it more performant?</p>

<p>Double-checked locking idiom for Singleton.
<a href="http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html">http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</a></p>

<figure class='code'><figcaption><span>Double-checked locking idiom</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Works with acquire/release semantics for volatile</span>
</span><span class='line'><span class="c1">// Broken under current semantics for volatile</span>
</span><span class='line'>  <span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">volatile</span> <span class="n">Helper</span> <span class="n">helper</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Helper</span> <span class="nf">getHelper</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">helper</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">synchronized</span><span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">helper</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                        <span class="n">helper</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Helper</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">helper</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Quick-start for Java Programming Test]]></title>
    <link href="http://tdongsi.github.io/java/blog/2016/08/29/tutorial-timed-programming-test/"/>
    <updated>2016-08-29T01:38:40-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2016/08/29/tutorial-timed-programming-test</id>
    <content type="html"><![CDATA[<p>For <strong>timed</strong> programming tests, new test-takers usually underestimate how short two and a half hours can be.
Remember that 30 minutes of that will go into reading the problem instructions and another 10 to 30 minutes go into setting up before you can start writing the first line of code.
And if you are unlucky, you need another 15-30 minutes to debug any issue that comes up.
That leaves you only about one hour for actually solving the problem.
Most of the test takers are experienced and skilled programmers, but they tend to forget that many of those steps above are not needed in their everyday tasks, in their daily environments and routines.</p>

<p>This post lists out steps to get started quickly for a <strong>Java</strong> programming test, using Eclipse and Maven.</p>

<!--more-->


<p>(1) Use this command to setup an Eclipse empty project.</p>

<figure class='code'><figcaption><span>Create an Eclipse project</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn archetype:generate -DgroupId=my.interview -DartifactId=CompanyName -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false</span></code></pre></td></tr></table></div></figure>


<p>(2) In Eclipse, go to File > Import > Existing Maven Project. Import the Eclipse project created above.</p>

<p>(3) Update pom.xml for &ldquo;Executable jar file&rdquo; + &ldquo;specified Java version&rdquo;. Replace <code>my.interview.CompanyName</code> with the correct name of your main class.</p>

<figure class='code'><figcaption><span>Add this into pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;build&gt;</span>
</span><span class='line'>    <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>        <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>maven-assembly-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>                <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;goal&gt;</span>attached<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;phase&gt;</span>package<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;descriptorRefs&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;descriptorRef&gt;</span>jar-with-dependencies<span class="nt">&lt;/descriptorRef&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/descriptorRefs&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;archive&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;manifest&gt;</span>
</span><span class='line'>                                <span class="nt">&lt;mainClass&gt;</span>my.interview.CompanyName<span class="nt">&lt;/mainClass&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;/manifest&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/archive&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>        <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>3.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;source&gt;</span>1.7<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>                <span class="nt">&lt;target&gt;</span>1.7<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'><span class="nt">&lt;/build&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>(4) Add logging. Ability to use logging frameworks shows off your skill and experience.
More importantly, it allows you to liberally print lots of information needed for debugging without worrying about cleaning up console output later.</p>

<ul>
<li>Create <code>resources</code> source folder in <code>src/main</code>.</li>
<li>Add <code>log4j.properties</code>. For simplicity, only log information to console.

<ul>
<li>Use <code>logger.debug</code> for printing debug information and turn on/off logging by setting <code>rootLogger</code> to <code>DEBUG</code>/<code>INFO</code>.</li>
</ul>
</li>
<li>You need to add into <code>pom.xml</code> dependencies for the three followings: <code>slf4j-api</code> (interface), <code>slf4j-log4j12</code> (route slf4j calls to log4j), <code>log4j</code> (logging backend).</li>
</ul>


<p>Use the following content for <code>log4j.properties</code>, modified from <a href="https://logging.apache.org/log4j/1.2/manual.html">this example</a>.</p>

<figure class='code'><figcaption><span>log4j.properties file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">#</span> <span class="n">Set</span> <span class="n">root</span> <span class="n">logger</span> <span class="n">level</span> <span class="n">to</span> <span class="n">DEBUG</span> <span class="n">and</span> <span class="n">its</span> <span class="n">only</span> <span class="n">appender</span> <span class="n">to</span> <span class="n">A1</span><span class="o">.</span>
</span><span class='line'><span class="n">log4j</span><span class="o">.</span><span class="na">rootLogger</span><span class="o">=</span> <span class="n">INFO</span><span class="o">,</span> <span class="n">A1</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="n">A1</span> <span class="n">is</span> <span class="n">set</span> <span class="n">to</span> <span class="n">be</span> <span class="n">a</span> <span class="n">ConsoleAppender</span><span class="o">.</span>
</span><span class='line'><span class="n">log4j</span><span class="o">.</span><span class="na">appender</span><span class="o">.</span><span class="na">A1</span><span class="o">=</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">log4j</span><span class="o">.</span><span class="na">ConsoleAppender</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="n">A1</span> <span class="n">uses</span> <span class="n">PatternLayout</span><span class="o">.</span>
</span><span class='line'><span class="n">log4j</span><span class="o">.</span><span class="na">appender</span><span class="o">.</span><span class="na">A1</span><span class="o">.</span><span class="na">layout</span><span class="o">=</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">log4j</span><span class="o">.</span><span class="na">PatternLayout</span>
</span><span class='line'><span class="n">log4j</span><span class="o">.</span><span class="na">appender</span><span class="o">.</span><span class="na">A1</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">ConversionPattern</span><span class="o">=</span> <span class="o">[%</span><span class="n">t</span><span class="o">][%-</span><span class="mi">5</span><span class="n">p</span><span class="o">][%</span><span class="n">c</span><span class="o">]</span> <span class="o">-</span> <span class="o">%</span><span class="n">m</span><span class="o">%</span><span class="n">n</span>
</span></code></pre></td></tr></table></div></figure>


<p>(5) At the end, your <code>pom.xml</code> shoulld looks like <a href="https://github.com/tdongsi/bart-parking/blob/f8511604bafa4564c468f952ca2fce1452f6a097/java/bart/pom.xml">this</a>. Check setup.</p>

<figure class='code'><figcaption><span>Check running</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn clean package
</span><span class='line'>java -jar target/xxx-jar-with-dependencies.jar</span></code></pre></td></tr></table></div></figure>


<p>(6) Use <code>StreamEditor</code> interface for easy testing in Eclipse and CLI.</p>

<figure class='code'><figcaption><span>StreamEditor interface</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">StreamEditor</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">InputStream</span> <span class="n">in</span><span class="o">,</span> <span class="n">PrintStream</span> <span class="n">out</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Main class calling Solver that implements StreamEditor interface</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">InputStream</span> <span class="n">in</span><span class="o">;</span>
</span><span class='line'>      <span class="n">PrintStream</span> <span class="n">out</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">FileInputStream</span><span class="o">(</span><span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
</span><span class='line'>              <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">PrintStream</span><span class="o">(</span><span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]));</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Could not find file&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="k">return</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">in</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">;</span>
</span><span class='line'>          <span class="n">out</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">Solver</span> <span class="n">solver</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Solver</span><span class="o">();</span>
</span><span class='line'>      <span class="n">solver</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">in</span><span class="o">,</span> <span class="n">out</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the test requires specific input from/output to console or file, it&rsquo;s easy to do it either way.</p>

<figure class='code'><figcaption><span>Commands to run when using StreamEditor interface</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>For console input/output:
</span><span class='line'>java -jar target\xxx-jar-with-dependencies.jar &lt; data\in.txt
</span><span class='line'>
</span><span class='line'>For file input/output:
</span><span class='line'>java -jar target\Salesforce-1.0-SNAPSHOT-jar-with-dependencies.jar data/in.txt data/out.txt</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Process Synchronization (Pt. 2): Race Condition]]></title>
    <link href="http://tdongsi.github.io/java/blog/2015/11/26/concurrency-race-condition/"/>
    <updated>2015-11-26T18:13:05-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2015/11/26/concurrency-race-condition</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Process Synchronization (Pt. 1): Producer-Consumer Problem]]></title>
    <link href="http://tdongsi.github.io/java/blog/2015/11/19/concurrency-tutorial-in-java-part-1-producer-consumer-problem/"/>
    <updated>2015-11-19T14:57:21-08:00</updated>
    <id>http://tdongsi.github.io/java/blog/2015/11/19/concurrency-tutorial-in-java-part-1-producer-consumer-problem</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span> (Counter.java)</span> <a href='http://tdongsi.github.io/java/download/code/java/Concurrency/src/Counter.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">my</span><span class="o">.</span><span class="na">practice</span><span class="o">.</span><span class="na">concurrency</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Simulate a queue in Producer-Consumer problem</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * @author cdongsi</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Counter</span> <span class="o">{</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Increment counter value by one.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">increment</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Decrement counter value by one.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">decrement</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Return the current counter value.</span>
</span><span class='line'><span class="cm">  * </span>
</span><span class='line'><span class="cm">  * @return</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">current</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Reset the counter value. For multiple experiment runs.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">reset</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span> (Producer.java)</span> <a href='http://tdongsi.github.io/java/download/code/java/Concurrency/src/Producer.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">my</span><span class="o">.</span><span class="na">practice</span><span class="o">.</span><span class="na">concurrency</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Producer</span> <span class="kd">extends</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Add some item into a common item queue</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">produce</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Use Counter as an item queue</span>
</span><span class='line'><span class="cm">  * </span>
</span><span class='line'><span class="cm">  * @param queue</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">useQueue</span><span class="o">(</span><span class="n">Counter</span> <span class="n">queue</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span> (Consumer.java)</span> <a href='http://tdongsi.github.io/java/download/code/java/Concurrency/src/Consumer.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">my</span><span class="o">.</span><span class="na">practice</span><span class="o">.</span><span class="na">concurrency</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Consumer</span> <span class="kd">extends</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Remove some item from a common item queue</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">consume</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Use Counter as an item queue</span>
</span><span class='line'><span class="cm">  * </span>
</span><span class='line'><span class="cm">  * @param queue</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">useQueue</span><span class="o">(</span><span class="n">Counter</span> <span class="n">queue</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Producer-Consumer simulation (one producer, one consumer)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Run the simulation of producer-consumer problem</span>
</span><span class='line'><span class="cm"> * with the given queue.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * At the end of simulation run, the queue should have 0 item.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">produceAndConsume</span><span class="o">(</span><span class="n">Counter</span> <span class="n">queue</span><span class="o">,</span> <span class="n">Producer</span> <span class="n">producer</span><span class="o">,</span> <span class="n">Consumer</span> <span class="n">consumer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">Thread</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Thread</span><span class="o">((</span><span class="n">Runnable</span><span class="o">)</span> <span class="n">producer</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Thread</span> <span class="n">t2</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Thread</span><span class="o">((</span><span class="n">Runnable</span><span class="o">)</span> <span class="n">consumer</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">t1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>  <span class="n">t2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">t1</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
</span><span class='line'>      <span class="n">t2</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Nothing</span>
</span><span class='line'>  <span class="k">return</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you have concrete implementations of your queue (implementing Counter interface), producer (Producer interface), and consumer (Consumer interface), you can run the simulation easily. One example is as follows:</p>

<figure class='code'><figcaption><span>Run Producer-Consumer with concrete implementations</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">Counter</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SimpleCounter</span><span class="o">();</span>
</span><span class='line'>  <span class="n">Producer</span> <span class="n">producer</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SimpleProducer</span><span class="o">(</span><span class="n">queue</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Consumer</span> <span class="n">consumer</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SimpleConsumer</span><span class="o">(</span><span class="n">queue</span><span class="o">);</span>
</span><span class='line'>  <span class="n">produceAndConsume</span><span class="o">(</span><span class="n">queue</span><span class="o">,</span> <span class="n">producer</span><span class="o">,</span> <span class="n">consumer</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Queue at the end: &quot;</span> <span class="o">+</span> <span class="n">queue</span><span class="o">.</span><span class="na">current</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven Cookbook]]></title>
    <link href="http://tdongsi.github.io/java/blog/2015/06/19/maven-cookbook/"/>
    <updated>2015-06-19T14:07:37-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2015/06/19/maven-cookbook</id>
    <content type="html"><![CDATA[<p>This blog post lists out some common <code>mvn</code> commands.</p>

<!--more-->


<h3>Recipes</h3>

<p><strong>Recipe 1</strong>: <code>mvn</code> exit normally with test failures.</p>

<figure class='code'><figcaption><span>Exit normally with test failure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh "${mvnHome}/bin/mvn -B -Dmaven.test.failure.ignore verify"</span></code></pre></td></tr></table></div></figure>


<p><strong>Recipe 2</strong>: Switch between corporate Nexus and Maven Central.</p>

<p>Corporate Nexus is specified in settings.xml. Some need to use Maven Central for personal projects.
To switch between them, create a <a href="https://maven.apache.org/settings.html">minimal settings.xml</a> and specify with <code>mvn -s settings.xml</code>.</p>

<figure class='code'><figcaption><span>Minimal settings.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;settings</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span>
</span><span class='line'>  <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/SETTINGS/1.0.0</span>
</span><span class='line'><span class="s">                      https://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;localRepository/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;interactiveMode/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;usePluginRegistry/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;offline/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;pluginGroups/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;servers/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;mirrors/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;proxies/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;profiles/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;activeProfiles/&gt;</span>
</span><span class='line'><span class="nt">&lt;/settings&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Recipe 3</strong>: Install a jar file into local repository. See <a href="http://tdongsi.github.io/blog/2015/11/17/pushing-local-jar-file-into-your-local-maven-m2-repository/">here</a>.</p>

<p><strong>Recipe 4</strong>: Findbugs and Checkstyle. See <a href="https://www.safaribooksonline.com/library/view/continuous-integration-ci/9781491986547/video307702.html">here</a>.
Run <code>mvn clean install site</code> to generate Findbugs and Checkstyle reports.</p>

<figure class='code'><figcaption><span>Adding Findbugs and Checkstyle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;reporting&gt;</span>
</span><span class='line'>    <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>        <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.codehaus.mojo<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>findbugs-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>3.0.4<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xmlOutput&gt;</span>true<span class="nt">&lt;/xmlOutput&gt;</span>
</span><span class='line'>                <span class="nt">&lt;findbugsXmlOutput&gt;</span>true<span class="nt">&lt;/findbugsXmlOutput&gt;</span>
</span><span class='line'>                <span class="nt">&lt;findbugsXmlWithMessages&gt;</span>true<span class="nt">&lt;/findbugsXmlWithMessages&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>        <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>maven-checkstyle-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>2.17<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;reportSets&gt;</span>
</span><span class='line'>                <span class="nt">&lt;reportSet&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;reports&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;report&gt;</span>checkstyle<span class="nt">&lt;/report&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/reports&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/reportSet&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/resportSets&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'><span class="nt">&lt;/reporting&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conventions</h3>

<p>Maven follows the principle &ldquo;Conventions over configurations&rdquo;.
While it helps to get you started quickly, it is hard to understand what&rsquo;s going on underneath without knowing the defaults and conventions.</p>

<h4><a href="https://www.safaribooksonline.com/library/view/apache-maven-cookbook/9781785286124/ch08s04.html">Plugins</a></h4>

<p>You will recall that when using the Maven JaCoCo plugin, to generate code coverage we had to explicitly specify the <code>projectId</code> and <code>artifactId</code> values of the plugin to it from the command line.
However, for most other plugins, we specified the plugin name without additional information.
To avoid it for Jacoco, open the settings.xml file and add the following section:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;pluginGroups&gt;</span>
</span><span class='line'>    <span class="nt">&lt;pluginGroup&gt;</span>org.jacoco<span class="nt">&lt;/pluginGroup&gt;</span>
</span><span class='line'><span class="nt">&lt;/pluginGroups&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run the following command on the same project for which you ran JaCoCo earlier:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Before
</span><span class='line'>mvn clean org.jacoco:jacoco-maven-plugin:0.7.9:prepare-agent test org.jacoco:jacoco-maven-plugin:0.7.9:report
</span><span class='line'>
</span><span class='line'># After
</span><span class='line'>mvn clean jacoco:prepare-agent test jacoco:report</span></code></pre></td></tr></table></div></figure>


<p>What is going on? There are two types of Maven plugins, which are as follows:</p>

<ul>
<li>Plugins maintained by the Maven team itself (official plugins). These are in the default plugin groups <strong>org.apache.maven.plugins</strong> and <strong>org.codehaus.mojo</strong>.</li>
<li>All other plugins (let&rsquo;s say third-party plugins).</li>
</ul>


<p>All official plugins have the same <code>groupId</code>, namely <strong>org.apache.maven.plugins</strong>.
They also have a convention for <code>artifactId</code>: &ldquo;maven-${prefix}-plugin&rdquo;, where <code>prefix</code> stands for the plugin prefix, the short name to refer to the plugin.
The prefix used to reference the plugin can be customized as well.
The prefix can be specified directly through the <code>goalPrefix</code> configuration parameter on the Maven-plugin-plugin of the plugin&rsquo;s pom file.
So, when we run mvn clean, Maven looks for the &ldquo;maven-clean-plugin&rdquo; in the <strong>org.apache.maven.plugins</strong> group.</p>

<p>What about third-party plugins? <code>pluginGroups</code> lets Maven know the <code>groupId</code> where it should search for additional plugins.
So in the earlier case, Maven searched for plugins in the org.jacoco group.
Third-party plugins should be named differently from official plugins.
The conventional way to define the <code>artifactId</code> for third-party plugins is &ldquo;${prefix}-maven-plugin&rdquo;.
When specified in this way, Maven automatically identifies the shortcut name for the plugin.
In the earlier case, as the artifactId is jacoco-maven-plugin, the shortcut is jacoco.</p>

<p>Maven will always search specified pluginGroups before it searches the following default groups:</p>

<ul>
<li>org.apache.maven.plugins</li>
<li>org.codehaus.mojo</li>
</ul>


<p>Maven takes the first match for the shortcut that it finds.
For instance, if there is a clean shortcut in a user-specified plugin in pluginGroups, it will take precedence over a Maven Clean plugin.</p>

<h3>Reference</h3>

<ul>
<li><a href="https://maven.apache.org/settings.html">settings.xml</a></li>
<li><a href="http://maven.apache.org/plugins/maven-resources-plugin/examples/resource-directory.html">resource directory</a></li>
<li><a href="https://www.safaribooksonline.com/library/view/apache-maven-cookbook/9781785286124/ch08s04.html">Apache Maven Cookbook</a> by Raghuram Bharathan</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HttpClient Cookbook]]></title>
    <link href="http://tdongsi.github.io/java/blog/2015/06/08/httpclient-cookbook/"/>
    <updated>2015-06-08T17:14:29-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2015/06/08/httpclient-cookbook</id>
    <content type="html"><![CDATA[<p>Apache HttpClient library is regularly used in Java program to query REST endpoints.</p>

<!--more-->


<h3>Beginner Cookbook</h3>

<p>Based on HttpClient Tutorial (version 4.3).</p>

<p><strong>Recipe 1</strong>: For simple use cases, it is better to use <a href="https://hc.apache.org/httpcomponents-client-ga/tutorial/html/fluent.html">Fluent API</a>.</p>

<figure class='code'><figcaption><span>Fluent API</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">API_ENDPOINT</span> <span class="o">=</span> <span class="s">&quot;http://api.icndb.com/jokes/random&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">String</span> <span class="n">see</span> <span class="o">=</span> <span class="n">Request</span><span class="o">.</span><span class="na">Get</span><span class="o">(</span><span class="n">API_ENDPOINT</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">execute</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">returnContent</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">asString</span><span class="o">();</span>
</span><span class='line'><span class="n">assertFalse</span><span class="o">(</span><span class="n">see</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">());</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">see</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Recipe 2</strong>: Consuming response entities originate from a trusted HTTP server and are known to be of limited length. From <a href="https://hc.apache.org/httpcomponents-client-ga/tutorial/html/fundamentals.html">here</a>. <a href="http://www.vogella.com/tutorials/ApacheHttpClient/article.html">Another variant</a>.</p>

<figure class='code'><figcaption><span>Consuming entity content</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">CloseableHttpClient</span> <span class="n">httpclient</span> <span class="o">=</span> <span class="n">HttpClients</span><span class="o">.</span><span class="na">createDefault</span><span class="o">();</span>
</span><span class='line'><span class="n">HttpGet</span> <span class="n">httpget</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HttpGet</span><span class="o">(</span><span class="s">&quot;http://localhost/&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">CloseableHttpResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">httpclient</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">httpget</span><span class="o">);</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">HttpEntity</span> <span class="n">entity</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getEntity</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">entity</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">len</span> <span class="o">=</span> <span class="n">entity</span><span class="o">.</span><span class="na">getContentLength</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">len</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">len</span> <span class="o">&lt;</span> <span class="mi">2048</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">EntityUtils</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">entity</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Stream content out</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">response</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Advanced Cookbook</h3>

<h4>Version 4.1.x -> 4.2.1</h4>

<p>Git2Gus service uses HttpClient 4.2.1 (httpclient-4.2.1.jar).</p>

<p><strong>Recipe 1</strong>: Proxy setup. Based on <a href="https://stackoverflow.com/questions/9811828/common-httpclient-and-proxy">this</a>:</p>

<figure class='code'><figcaption><span>Setting up proxy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">HttpHost</span> <span class="n">proxy</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HttpHost</span><span class="o">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="o">,</span> <span class="mi">8080</span><span class="o">,</span> <span class="s">&quot;http&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">DefaultHttpClient</span> <span class="n">httpclient</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DefaultHttpClient</span><span class="o">();</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">httpclient</span><span class="o">.</span><span class="na">getParams</span><span class="o">().</span><span class="na">setParameter</span><span class="o">(</span><span class="n">ConnRoutePNames</span><span class="o">.</span><span class="na">DEFAULT_PROXY</span><span class="o">,</span> <span class="n">proxy</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">HttpHost</span> <span class="n">target</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HttpHost</span><span class="o">(</span><span class="s">&quot;issues.apache.org&quot;</span><span class="o">,</span> <span class="mi">443</span><span class="o">,</span> <span class="s">&quot;https&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">HttpGet</span> <span class="n">req</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HttpGet</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;executing request to &quot;</span> <span class="o">+</span> <span class="n">target</span> <span class="o">+</span> <span class="s">&quot; via &quot;</span> <span class="o">+</span> <span class="n">proxy</span><span class="o">);</span>
</span><span class='line'>    <span class="n">HttpResponse</span> <span class="n">rsp</span> <span class="o">=</span> <span class="n">httpclient</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="n">req</span><span class="o">);</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// When HttpClient instance is no longer needed,</span>
</span><span class='line'>    <span class="c1">// shut down the connection manager to ensure</span>
</span><span class='line'>    <span class="c1">// immediate deallocation of all system resources</span>
</span><span class='line'>    <span class="n">httpclient</span><span class="o">.</span><span class="na">getConnectionManager</span><span class="o">().</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With proxy authentication? Check out <a href="https://stackoverflow.com/questions/13288038/httpclient-4-2-2-and-proxy-with-username-password">this</a></p>

<p><strong>Recipe 2</strong>: Connection timeout. Based on <a href="https://gist.github.com/tychobrailleur/9fbf521727539b403c90">this</a>:</p>

<figure class='code'><figcaption><span>Conneciton timeout</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RunTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">runDefaultClient</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">URI</span> <span class="n">uri</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">URL</span><span class="o">(</span><span class="s">&quot;http://localhost:3000/&quot;</span><span class="o">).</span><span class="na">toURI</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">HttpHost</span> <span class="n">host</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HttpHost</span><span class="o">(</span><span class="n">uri</span><span class="o">.</span><span class="na">getHost</span><span class="o">(),</span> <span class="n">uri</span><span class="o">.</span><span class="na">getPort</span><span class="o">(),</span> <span class="n">uri</span><span class="o">.</span><span class="na">getScheme</span><span class="o">());</span>
</span><span class='line'>        <span class="n">DefaultHttpClient</span> <span class="n">httpClient</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DefaultHttpClient</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">httpClient</span><span class="o">.</span><span class="na">getParams</span><span class="o">().</span><span class="na">setParameter</span><span class="o">(</span><span class="n">CoreConnectionPNames</span><span class="o">.</span><span class="na">CONNECTION_TIMEOUT</span><span class="o">,</span> <span class="mi">2000</span><span class="o">);</span>
</span><span class='line'>        <span class="n">httpClient</span><span class="o">.</span><span class="na">getParams</span><span class="o">().</span><span class="na">setParameter</span><span class="o">(</span><span class="n">CoreConnectionPNames</span><span class="o">.</span><span class="na">SO_TIMEOUT</span><span class="o">,</span> <span class="mi">10000</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">HttpGet</span> <span class="n">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HttpGet</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">HttpResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">httpClient</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">host</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">getStatusLine</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Later version</h4>

<p><strong>Recipe 1</strong>: Based on <a href="http://hc.apache.org/httpcomponents-client-ga/httpclient/examples/org/apache/http/examples/client/ClientExecuteProxy.java">this</a></p>

<figure class='code'><figcaption><span>Setting up proxy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClientExecuteProxy</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span><span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">CloseableHttpClient</span> <span class="n">httpclient</span> <span class="o">=</span> <span class="n">HttpClients</span><span class="o">.</span><span class="na">createDefault</span><span class="o">();</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">HttpHost</span> <span class="n">target</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HttpHost</span><span class="o">(</span><span class="s">&quot;httpbin.org&quot;</span><span class="o">,</span> <span class="mi">443</span><span class="o">,</span> <span class="s">&quot;https&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">HttpHost</span> <span class="n">proxy</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HttpHost</span><span class="o">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="o">,</span> <span class="mi">8080</span><span class="o">,</span> <span class="s">&quot;http&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">RequestConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="n">RequestConfig</span><span class="o">.</span><span class="na">custom</span><span class="o">()</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">setProxy</span><span class="o">(</span><span class="n">proxy</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>            <span class="n">HttpGet</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HttpGet</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">request</span><span class="o">.</span><span class="na">setConfig</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Executing request &quot;</span> <span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestLine</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; to &quot;</span> <span class="o">+</span> <span class="n">target</span> <span class="o">+</span> <span class="s">&quot; via &quot;</span> <span class="o">+</span> <span class="n">proxy</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">CloseableHttpResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">httpclient</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="n">request</span><span class="o">);</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;----------------------------------------&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">getStatusLine</span><span class="o">());</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">EntityUtils</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">getEntity</span><span class="o">()));</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">response</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">httpclient</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Reference</h3>

<ul>
<li><a href="https://hc.apache.org/index.html">Project Home</a></li>
<li><a href="https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/index.html">JavaDoc</a></li>
<li>Alternative: <a href="https://www.eclipse.org/jetty/documentation/9.4.6.v20170531/http-client.html">Jetty HttpClient</a>.</li>
</ul>


<p>Apache HttpClient 4.2.1</p>

<ul>
<li><a href="https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient/4.2.1">Maven</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog Map]]></title>
    <link href="http://tdongsi.github.io/java/blog/2011/08/06/blog-map/"/>
    <updated>2011-08-06T15:05:44-07:00</updated>
    <id>http://tdongsi.github.io/java/blog/2011/08/06/blog-map</id>
    <content type="html"><![CDATA[<p>A blog post in 2011 will serve as a general guideline on how posts are organized in this blog.</p>

<ul>
<li>2015: Java topics. Too beginner to post in main blog.</li>
<li>2016: Java-related interview topics</li>
<li>2017: Groovy, Gradle topics.</li>
</ul>

]]></content>
  </entry>
  
</feed>
